{
    "pipes": [],
    "interfaces": [
        {
            "name": "Action",
            "id": "interface-Action-cb708bf653aabfa0b971fc85cc506a89617cbc9515087220223202d023ac08f32ab41ad9ff17df1f6062c84477ea2428b1ba18a70a9539cb796293bcab04126f",
            "file": "src/app/interfaces/dialog.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\n\r\nexport interface Dialog {\r\n\r\n  message: string\r\n  actions: Action[]\r\n\r\n}\r\n\r\nexport interface Action {\r\n\r\n  text: string\r\n  title: string\r\n  action: EventEmitter<any>\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Dialog",
            "id": "interface-Dialog-cb708bf653aabfa0b971fc85cc506a89617cbc9515087220223202d023ac08f32ab41ad9ff17df1f6062c84477ea2428b1ba18a70a9539cb796293bcab04126f",
            "file": "src/app/interfaces/dialog.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\n\r\nexport interface Dialog {\r\n\r\n  message: string\r\n  actions: Action[]\r\n\r\n}\r\n\r\nexport interface Action {\r\n\r\n  text: string\r\n  title: string\r\n  action: EventEmitter<any>\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Action[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ColorService",
            "id": "injectable-ColorService-75ceaea0faf7cc1b52e89b7716ae22aa159ea1a41b1c8f36791f058c4a50171068fa8ae5b0b80b80c2029ccccef764eaf914b6ffd4073db61aeb1217af95499e",
            "file": "src/app/services/color.service.ts",
            "properties": [
                {
                    "name": "color",
                    "defaultValue": "Color.generateRandomColor()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "colorChangeEmitter",
                    "defaultValue": "new EventEmitter<ChangeType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<ChangeType>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adjustShade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColorChangeEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "EventEmitter<ChangeType>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "randomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateColorName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Color} from \"../models/color.model\";\r\nimport {ColorInterpolater} from \"../class/color-interpolater\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ColorService {\r\n\r\n  private color: Color = Color.generateRandomColor()\r\n  private colorChangeEmitter: EventEmitter<ChangeType> = new EventEmitter<ChangeType>()\r\n\r\n  constructor() { }\r\n\r\n  loadColor(color: Color) {\r\n    this.color = color\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  adjustShade() {\r\n    ColorInterpolater.regenerateShades(this.color)\r\n    this.colorChangeEmitter.emit(ChangeType.ADJUST)\r\n  }\r\n\r\n  updateColorName(name: string) {\r\n    this.color.name = name\r\n    this.colorChangeEmitter.emit(ChangeType.ADJUST)\r\n  }\r\n\r\n  getColor() {\r\n    return this.color\r\n  }\r\n\r\n  randomColor() {\r\n    this.color = Color.generateRandomColor()\r\n    this.colorChangeEmitter.emit(ChangeType.RANDOM)\r\n  }\r\n\r\n  getColorChangeEmitter() {\r\n    return this.colorChangeEmitter\r\n  }\r\n\r\n}\r\n\r\nexport enum ChangeType {\r\n  LOAD, ADJUST, RANDOM\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-4ac37530659a8d7965c9bb0fececff3a818935746fbdcbaa09e85d84cc808667f460b2a021e538b3b7052f730ae16a1aa77ce596cd68812110b48a098cc2cf4b",
            "file": "src/app/services/notification.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "defaultValue": "new EventEmitter<Dialog | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<Dialog | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\nimport {Dialog} from \"../interfaces/dialog.interface\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  dialog: EventEmitter<Dialog | undefined> = new EventEmitter<Dialog | undefined>()\n\n  notification: EventEmitter<string | undefined> = new EventEmitter<string | undefined>()\n\n  constructor() { }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-33ce1477475b0e088ce57120bb94ad5e27a98b0c38e792f340d5e4184b164e1a3071278d637f041eccd66c18e0b4ef8a6b56d1a60ea56496e5dd1527a7ad2494",
            "file": "src/app/services/storage.service.ts",
            "properties": [
                {
                    "name": "darkEmitter",
                    "defaultValue": "new EventEmitter<Boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "loadPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.\n",
                    "description": "<p>Load the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.</p>\n"
                },
                {
                    "name": "loadTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.\n",
                    "description": "<p>Load the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.</p>\n"
                },
                {
                    "name": "savePalette",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave palette in local storage.\n",
                    "description": "<p>Save palette in local storage.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1769,
                                "end": 1776,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1763,
                                "end": 1768,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [
                        {
                            "name": "dark",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle between dark and light theme.\nForce dark or light mode with parameter.\n",
                    "description": "<p>Toggle between dark and light theme.\nForce dark or light mode with parameter.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 962,
                                "end": 966,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dark"
                            },
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 956,
                                "end": 961,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {PaletteGenerator, PaletteScheme} from \"../class/palette-generator\";\r\nimport {Shade} from \"../models/shade.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n\r\n  darkEmitter = new EventEmitter<Boolean>()\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Load the theme if it is stored in local storage.\r\n   * If no theme was saved, the browser default theme is used.\r\n   */\r\n  loadTheme() {\r\n    if (!localStorage.getItem('theme')) {\r\n      if (window.matchMedia('(prefers-color-scheme: dark)'))\r\n        return this.toggleTheme(true)\r\n      else {\r\n        this.darkEmitter.emit(true)\r\n        return false\r\n      }\r\n    } else {\r\n      return this.toggleTheme(localStorage.getItem('theme') === 'dark')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle between dark and light theme.\r\n   * Force dark or light mode with parameter.\r\n   * @param dark\r\n   */\r\n  toggleTheme(dark: boolean | undefined) {\r\n    document.body.classList.toggle('dark', dark)\r\n\r\n    dark = document.body.classList.contains('dark')\r\n    localStorage.setItem('theme', dark ? 'dark' : 'light')\r\n\r\n    this.darkEmitter.emit(dark)\r\n\r\n    return dark\r\n  }\r\n\r\n  /**\r\n   * Load the palette saved in local storage.\r\n   * If no palette is saved a random one is going to be generated.\r\n   */\r\n  loadPalette(): Palette {\r\n    const stored = localStorage.getItem('palette')\r\n    if (stored) {\r\n      try {\r\n        return Palette.parsePalette(JSON.parse(stored))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n\r\n    return PaletteGenerator.generatePalette(Shade.generateRandomShade(), PaletteScheme.SURPRISE)\r\n  }\r\n\r\n  /**\r\n   * Save palette in local storage.\r\n   * @param palette\r\n   */\r\n  savePalette(palette: Palette) {\r\n    localStorage.setItem('palette', palette.toString())\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Color",
            "id": "class-Color-5508f76028f6a33dcfec16258f8412de906836828ecaa91b85c51b4678b18d71fa2601687fe0e7af7809ecc1871b608c238f4fb6f075027f737a62f82edcece8",
            "file": "src/app/models/color.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorInterpolater} from \"../class/color-interpolater\";\r\nimport {Shade} from \"./shade.model\";\r\n\r\nexport class Color {\r\n\r\n  name: string\r\n\r\n  shades: Shade[]\r\n\r\n  public constructor(name: string, hex: string)\r\n  public constructor(name: string, hexes: string[])\r\n  public constructor(name: string, shades: Shade[])\r\n\r\n  constructor(...args: any[]) {\r\n    this.name = args[0].startsWith('#') ? args[0].substring(1) : args[0]\r\n\r\n    if (typeof args[1] === 'string') {\r\n      this.shades = []\r\n      const shade = new Shade(-1, true, args[1])\r\n      this.shades.push(shade)\r\n      ColorInterpolater.regenerateShades(this)\r\n\r\n      shade.fixed = false\r\n      this.getShade(500).fixed = true\r\n    } else if (typeof args[1][0] === 'string') {\r\n      this.shades = []\r\n\r\n      for (const hex of args[1]) {\r\n        this.shades.push(new Shade(-1, true, hex))\r\n      }\r\n      ColorInterpolater.regenerateShades(this)\r\n\r\n      this.getShade(500).fixed = true\r\n    } else {\r\n      this.shades = args[1]\r\n      ColorInterpolater.regenerateShades(this)\r\n\r\n      this.getShade(500).fixed = true\r\n    }\r\n\r\n    this.shades.sort((a, b) => a.index - b.index)\r\n  }\r\n\r\n  /**\r\n   * Get shade by index (50, 100, 200, ..., 900)\r\n   * @param index\r\n   */\r\n  public getShade(index: number): Shade {\r\n    return this.shades.find(s => s.index === index) || this.shades[0]\r\n  }\r\n\r\n  /**\r\n   * Generate a random color with all shades.\r\n   */\r\n  public static generateRandomColor(): Color {\r\n    const shade = Shade.generateRandomShade()\r\n    return new Color(\r\n      shade.hex,\r\n      shade.hex\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Stringify the color.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      name: this.name,\r\n      shades: this.shades\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a color.\r\n   * Throws exception if json object is no valid color object.\r\n   * @param json\r\n   */\r\n  public static parseColor(json: any): Color {\r\n    if (!json.name)\r\n      throw 'Color has no name'\r\n    if (!json.shades || json.shades.length < 1)\r\n      throw 'Color has not enough shades'\r\n\r\n    const shades: Shade[] = []\r\n    for (const shade of json.shades) {\r\n      shades.push(Shade.parseShade(shade))\r\n    }\r\n\r\n    return new Color(json.name, shades)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "shades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "generateRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a random color with all shades.\n",
                    "description": "<p>Generate a random color with all shades.</p>\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getShade",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet shade by index (50, 100, 200, ..., 900)\n",
                    "description": "<p>Get shade by index (50, 100, 200, ..., 900)</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1224,
                                "end": 1229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1218,
                                "end": 1223,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "parseColor",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a color.\nThrows exception if json object is no valid color object.\n",
                    "description": "<p>Parse the json object to a color.\nThrows exception if json object is no valid color object.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1869,
                                "end": 1873,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1863,
                                "end": 1868,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStringify the color.\n",
                    "description": "<p>Stringify the color.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorConverter",
            "id": "class-ColorConverter-65cfbaa98a6ffea40de6e5c4f5de13473e4ab8fb4b303d800e5383168d1644933a389a0830c34788385aefddca085ca5cdcea51889820f0fb2775a3eca081cb8",
            "file": "src/app/class/color-converter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ColorConverter {\n\n  static HEXtoRGB(hex: string) {\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\n      throw `Color ${hex} is not in form #RRGGBB.`\n\n    return {\n      red: parseInt(hex.substring(1, 3), 16),\n      green: parseInt(hex.substring(3, 5), 16),\n      blue: parseInt(hex.substring(5, 7), 16)\n    }\n  }\n\n  static HEXtoHSL(hex: string) {\n    const rgb = this.HEXtoRGB(hex)\n    return this.RGBtoHSL(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HEXtoHSV(hex: string) {\n    const hsl = this.HEXtoHSL(hex)\n    return this.HSLtoHSV(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static HEXtoCMYK(hex: string) {\n    const rgb = this.HEXtoRGB(hex)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static RGBtoHEX(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    return `#${\n      (red < 16 ? 0 : '') + red.toString(16)\n    }${\n      (green < 16 ? 0 : '') + green.toString(16)\n    }${\n      (blue < 16 ? 0 : '') + blue.toString(16)\n    }`\n  }\n\n  static RGBtoHSL(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    const r = red / 255\n    const g = green / 255\n    const b = blue / 255\n\n    const cMax = Math.max(r, g, b)\n    const cMin = Math.min(r, g, b)\n    const delta = cMax - cMin\n\n    const luminosity = (cMax + cMin) * 50\n    const saturation = (delta === 0) ? 0 : (100 * delta / (1 - Math.abs(2 * (luminosity / 100) - 1)))\n\n    let hue\n    if (delta === 0)\n      hue = 0\n    else if (cMax === r)\n      hue = 60 * ( ( (g - b) / delta) % 6)\n    else if (cMax === g)\n      hue = 60 * ( ( (b - r) / delta) + 2)\n    else\n      hue = 60 * ( ( (r - g) / delta) + 4)\n\n    if (hue < 0)\n      hue += 360\n\n    return {\n      hue: Math.round(hue),\n      saturation: Math.round(saturation),\n      luminosity: Math.round(luminosity)\n    }\n  }\n\n  static RGBtoHSV(red: number, green: number, blue: number) {\n    const hsl = this.RGBtoHSL(red, green, blue)\n    return this.HSLtoHSV(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static RGBtoCMYK(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    const r = red / 255\n    const g = green / 255\n    const b = blue / 255\n\n    const k = 1 - Math.max(r, g, b)\n    const c = (1 - r - k) / (1 - k)\n    const m = (1 - g - k) / (1 - k)\n    const y = (1 - b - k) / (1 - k)\n\n    return {\n      cyan: Math.round(c * 100),\n      magenta: Math.round(m * 100),\n      yellow: Math.round(y * 100),\n      key: Math.round(k * 100)\n    }\n  }\n\n\n  static HSLtoHEX(hue: number, saturation: number, luminosity: number): string {\n    const rgb = this.HSLtoRGB(hue, saturation, luminosity)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HSLtoRGB(hue: number, saturation: number, luminosity: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || luminosity < 0 || luminosity > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${luminosity}%] are not in valid ranges.`\n\n    const h = hue\n    const s = saturation / 100\n    const l = luminosity / 100\n\n    const c = (1 - Math.abs(2 * l - 1)) * s\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1))\n    const m = l - c / 2\n\n    const r = (h < 60 || h >= 300) ? c : (h < 120 || h >= 240) ? x : 0\n    const g = (h >= 240) ? 0 : (h < 60 || h >= 180) ? x : c\n    const b = (h < 120) ? 0 : (h < 180 || h >= 300) ? x : c\n\n    return {\n      red: Math.round((r + m) * 255),\n      green: Math.round((g + m) * 255),\n      blue: Math.round((b + m) * 255)\n    }\n  }\n\n  static HSLtoHSV(hue: number, saturation: number, luminosity: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || luminosity < 0 || luminosity > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${luminosity}%] are not in valid ranges.`\n\n    const v = luminosity + saturation * Math.min(luminosity, 1 - luminosity)\n\n    const s = (v === 0) ? 0 :\n      (2 * (1 - (luminosity / v)))\n\n    return {\n      hue: hue,\n      saturation: Math.round(s),\n      value: Math.round(v)\n    }\n  }\n\n  static HSLtoCMYK(hue: number, saturation: number, luminosity: number) {\n    const rgb = this.HSLtoRGB(hue, saturation, luminosity)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static HSVtoHEX(hue: number, saturation: number, value: number) {\n    const rgb = this.HSVtoRGB(hue, saturation, value)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HSVtoRGB(hue: number, saturation: number, value: number) {\n    const hsl = this.HSVtoHSL(hue, saturation, value)\n    return this.HSLtoRGB(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static HSVtoHSL(hue: number, saturation: number, value: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || value < 0 || value > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${value}%] are not in valid ranges.`\n\n    const l = value * (1 - (saturation / 2))\n\n    const s = (l === 0 || l === 1) ? 0 :\n      ((value - l) / Math.min(l, 1 - l))\n\n    return {\n      hue: hue,\n      saturation: Math.round(s),\n      luminosity: Math.round(l)\n    }\n  }\n\n  static HSVtoCMYK(hue: number, saturation: number, value: number) {\n    const rgb = this.HSVtoRGB(hue, saturation, value)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static CMYKtoHEX(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static CMYKtoRGB(cyan: number, magenta: number, yellow: number, key: number) {\n    if (cyan < 0 || cyan > 100 || magenta < 0 || magenta > 100 || yellow < 0 || yellow > 100 || key < 0 || key > 100)\n      throw `[${cyan}, ${magenta}, ${yellow}, ${key}] is not in valid format.`\n\n    const c = cyan / 100\n    const m = magenta / 100\n    const y = yellow / 100\n    const k = key / 100\n\n    const r = (1 - c) * (1 - k)\n    const g = (1 - m) * (1 - k)\n    const b = (1 - y) * (1 - k)\n\n    return {\n      red: Math.round(255 * r),\n      green: Math.round(255 * g),\n      blue: Math.round(255 * b),\n    }\n  }\n\n  static CMYKtoHSL(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHSL(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static CMYKtoHSV(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHSV(rgb.red, rgb.green, rgb.blue)\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "CMYKtoHEX",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoHSL",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoHSV",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoRGB",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoCMYK",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoHSL",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoHSV",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoRGB",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoCMYK",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoHEX",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoHSV",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoRGB",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoCMYK",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoHEX",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoHSL",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoRGB",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoCMYK",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHEX",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHSL",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHSV",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorInterpolater",
            "id": "class-ColorInterpolater-228e0d10ef589b0e3dbf2d84b33a01eea1a44f3637883a59405f1c8b095008fb0817e93449ab2fbcf8022b902f51a84e80d120865c3f0f864535b75147e908d0",
            "file": "src/app/class/color-interpolater.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Shade} from \"../models/shade.model\";\nimport {Color} from \"../models/color.model\";\n\nexport class ColorInterpolater {\n\n  /**\n   * Regenerate every shade but the fixed ones\n   * @param color\n   */\n  public static regenerateShades(color: Color) {\n    const size = 10\n    let shades = [...color.shades]\n\n    // clear and sort shades\n    shades = shades.filter(shade => shade.fixed)\n    shades.sort((a, b) => b.luminosity - a.luminosity)\n\n    // set new indices\n    // ToDo: Adjust generation for optimal keys when using other sizes than 10\n    let indices = [...Array(size).keys()].map(index => 20 + index * 80)\n    indices[0] = 50\n    for (const shade of shades) {\n      const index = indices.reduce((prev, curr) =>\n        (Math.abs(curr - (100 - shade.brightness) * 10) < Math.abs(prev - (100 - shade.brightness) * 10) ? curr : prev))\n      shade.setIndex(index)\n      indices = indices.filter(i => i !== index)\n    }\n\n    // add white and black to shades\n    shades.push(new Shade(0, true,\n      (shades[0].hue + 5) % 360,\n      Math.min(shades[0].saturation + 10, 100),\n      100)\n    )\n    shades.push(new Shade(1000, true,\n      (shades[shades.length-1].hue + 355) % 360,\n      Math.max(shades[shades.length-1].saturation - 10, 0),\n      0)\n    )\n\n    shades.sort((a, b) => a.index - b.index)\n\n    // generate missing shades\n    for (const index of indices) {\n      const smaller = [...shades].reverse().find(shade => shade.index < index) || shades[0]\n      const bigger = shades.find(shade => shade.index > index) || shades[shades.length-1]\n\n      const hue = this.mapNumbers(\n        index,\n        smaller.index,\n        bigger.index,\n        bigger.hue - smaller.hue > 180 ? (smaller.hue + 360) : smaller.hue,\n        smaller.hue - bigger.hue > 180 ? (bigger.hue + 360) : bigger.hue\n      ) % 360\n\n      const saturation = this.mapNumbers(index, smaller.index, bigger.index, smaller.saturation, bigger.saturation)\n      const luminosity = this.mapNumbers(index, smaller.index, bigger.index, smaller.luminosity, bigger.luminosity)\n\n      shades.push(new Shade(index, false, hue, saturation, luminosity))\n    }\n\n    // remove white and black and set shades to color\n    shades = shades.filter(shade => shade.index !== 0 && shade.index !== 1000)\n\n    // repair broken orders\n    shades.sort((a, b) => b.luminosity - a.luminosity)\n    indices = [...Array(size).keys()].map(index => index * 100)\n    indices[0] = 50\n    for (let i = 0; i < shades.length; i++) {\n      shades[i].setIndex(indices[i])\n    }\n\n    color.shades = shades\n  }\n\n  /**\n   * Translate x in [in_min to in_max] to y in [out_min to out_max]\n   * @param x\n   * @param in_min\n   * @param in_max\n   * @param out_min\n   * @param out_max\n   * @private\n   */\n  private static mapNumbers(x: number, in_min: number, in_max: number, out_min: number, out_max: number): number {\n    return Math.round((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "mapNumbers",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "in_min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "in_max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "out_min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "out_max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTranslate x in [in_min to in_max] to y in [out_min to out_max]\n",
                    "description": "<p>Translate x in [in_min to in_max] to y in [out_min to out_max]</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2632,
                                "end": 2633,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "x"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2626,
                                "end": 2631,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2646,
                                "end": 2652,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "in_min"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2640,
                                "end": 2645,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2665,
                                "end": 2671,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "in_max"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2659,
                                "end": 2664,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2684,
                                "end": 2691,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "out_min"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2678,
                                "end": 2683,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2704,
                                "end": 2711,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "out_max"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2698,
                                "end": 2703,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 2718,
                                "end": 2725,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "regenerateShades",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegenerate every shade but the fixed ones\n",
                    "description": "<p>Regenerate every shade but the fixed ones</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 190,
                                "end": 195,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 184,
                                "end": 189,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssCopyDialog",
            "id": "class-CssCopyDialog-1eed6e558adef6f5a342ab7b47cb03f7f96eeca69971a9532a96c95264711530a1e53362f3343c83f6d662acb38c8482613b6cbddaab6c724097cf3283fada3b",
            "file": "src/app/dialogs/css-copy.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class CssCopyDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#using_the_root_pseudo-class', '_blank')\r\n    })\r\n\r\n    return {\r\n      message: 'The palette has been copied to your clipboard. ' +\r\n        `To use the colors as CSS properties copy the contents of the clipboard to the ${ToUnicodeVariantUtil.toUnicodeVariant(':root', 'm')} of your css file. ` +\r\n        'Now you can use them by referencing them like:\\n' +\r\n        ToUnicodeVariantUtil.toUnicodeVariant('color: var(--color-100);', 'm'),\r\n      actions: [{\r\n        text: 'Read more',\r\n        title: 'Open MDN Web Docs',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssDialog",
            "id": "class-CssDialog-9a118dd96b7113432917bce1cedfac311b878826d2bf688191c5c80825a77911a5d05748b627e81779f059c4e9590c906b7ff6dcded71b740e678f2b07de2783",
            "file": "src/app/dialogs/css.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {PaletteExporter} from \"../class/palette-exporter\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {CssCopyDialog} from \"./css-copy.dialog\";\r\nimport {CssFileDialog} from \"./css-file.dialog\";\r\n\r\nexport class CssDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) { }\r\n\r\n  getNotification() {\r\n    const cssCopyEmitter = new EventEmitter()\r\n    cssCopyEmitter.subscribe(() => {\r\n      const css = PaletteExporter.exportPaletteToCSS(this.palette)\r\n      navigator.clipboard.writeText(css).then(() => {\r\n        this.notification.emit(new CssCopyDialog(\r\n          this.notification\r\n        ).getNotification())\r\n      }).catch(e => {\r\n        this.notification.emit({\r\n          message: `An error occurred while copying to the clipboard\\n\\n${e}`,\r\n          actions: []\r\n        })\r\n      })\r\n    })\r\n\r\n    const cssFileEmitter = new EventEmitter()\r\n    cssFileEmitter.subscribe(() => {\r\n      const css = PaletteExporter.exportCssFile(this.palette)\r\n      const blob = new Blob([css], {type: 'text/css'})\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = 'colors.css'\r\n      a.click()\r\n\r\n      this.notification.emit(new CssFileDialog(\r\n        this.notification\r\n      ).getNotification())\r\n    })\r\n\r\n    return {\r\n      message: 'Do you want to copy the CSS properties into your own files or create a new one?',\r\n      actions: [{\r\n        text: 'Copy',\r\n        title: 'Copy content in own CSS file',\r\n        action: cssCopyEmitter\r\n      }, {\r\n        text: 'File',\r\n        title: 'Download a new file',\r\n        action: cssFileEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "{ message: string; actions: {}; }",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssFileDialog",
            "id": "class-CssFileDialog-08c2433cff2f41bba2288c1441ba2ca48a1adfa3afdab2ebb645ec4ba0ed910d39c3e822c3eed041dd9ef93c54ff8fc4fb6a699ae2a059beb4a278e949c5c02a",
            "file": "src/app/dialogs/css-file.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class CssFileDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#using_the_root_pseudo-class', '_blank')\r\n    })\r\n\r\n    return {\r\n      message: 'Move the downloaded colors.css file to the root of your webserver. ' +\r\n        'Then link it in the head of your html file like:\\n' +\r\n        ToUnicodeVariantUtil.toUnicodeVariant('<link rel=\"stylesheet\" href=\"/colors.css\">', 'm') + '\\n\\n' +\r\n        'Now you can use them by referencing them like:\\n' +\r\n        ToUnicodeVariantUtil.toUnicodeVariant('color: var(--color-100);', 'm'),\r\n      actions: [{\r\n        text: 'Read more',\r\n        title: 'Open MDN Web Docs',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExportDialog",
            "id": "class-ExportDialog-88b4d7d8a455f702185781a5ebda77ecc8760747d19f2e5f86282404d0fdc774aa75cb1e8aab628c78102fbaa3a6d85667e2ed4ffe71bda0faf6211377a794a0",
            "file": "src/app/dialogs/export.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {CssDialog} from \"./css.dialog\";\r\nimport {TailwindDialog} from \"./tailwind.dialog\";\r\n\r\nexport class ExportDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) { }\r\n\r\n  getNotification() {\r\n    const cssEmitter = new EventEmitter()\r\n    cssEmitter.subscribe(() => {\r\n      this.notification\r\n        .emit(new CssDialog(\r\n          this.notification,\r\n          this.palette\r\n        ).getNotification())\r\n    })\r\n\r\n    const tailwindEmitter = new EventEmitter()\r\n    tailwindEmitter.subscribe(() => {\r\n      this.notification\r\n        .emit(new TailwindDialog(\r\n          this.notification,\r\n          this.palette\r\n        ).getNotification())\r\n    })\r\n\r\n    return {\r\n      message: 'How do you want to use the palette?',\r\n      actions: [{\r\n        text: 'CSS',\r\n        title: 'CSS Properties',\r\n        action: cssEmitter\r\n      }, {\r\n        text: 'TailwindCSS',\r\n        title: 'TailwindCSS custom colors',\r\n        action: tailwindEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "{ message: string; actions: {}; }",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockColorService",
            "id": "class-MockColorService-b63ef483a3b14fc3911f6b73475690d816368912b3ff6c167dfccf2c6efe1a4dd63284c81db4bff016c201ecaf2bc781aaff5894b797c5de1eb918ad7e22d61b",
            "file": "src/app/components/color-editor/color-editor.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorEditorComponent} from \"./color-editor.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {ColorService} from \"../../services/color.service\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\n\r\nexport default {\r\n  title: 'Components/Color Editor',\r\n  component: ColorEditorComponent\r\n} as Meta\r\n\r\nclass MockColorService implements Partial<ColorService> {\r\n\r\n  private colorService: ColorService = new ColorService()\r\n\r\n  getColor() {\r\n    console.log('getColor()')\r\n    return this.colorService.getColor()\r\n  }\r\n\r\n  getColorChangeEmitter() {\r\n    console.log('getColorChangeEmitter()')\r\n    return this.colorService.getColorChangeEmitter()\r\n  }\r\n\r\n  adjustColor(color: Color) {\r\n    console.log(`adjustColor(${color.name})`)\r\n    return this.colorService.adjustShade()\r\n  }\r\n\r\n  updateColorName(name: string) {\r\n    console.log(`updateColorName(${name})`)\r\n    return this.colorService.updateColorName(name)\r\n  }\r\n\r\n  randomColor() {\r\n    console.log('randomColor()')\r\n    return this.colorService.randomColor()\r\n  }\r\n\r\n}\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  notification: EventEmitter<string | undefined> = new EventEmitter<string | undefined>()\r\n\r\n  constructor() {\r\n    this.notification.subscribe(message => {\r\n      if (message) {\r\n        console.log('Show notification\\n', message)\r\n      } else {\r\n        console.log('Close notification')\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "properties": [
                {
                    "name": "colorService",
                    "defaultValue": "new ColorService()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adjustColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColorChangeEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "randomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateColorName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        },
        {
            "name": "MockColorService",
            "id": "class-MockColorService-de3fc8f10e8ccf13884e53e134e2a85ee4e5277a51507049d75375727e6adc357c74ae3f899a9fe9a40e0d40c8cfe8babdf20fdcdf0711fd353b482e49ed0891-1",
            "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorViewerComponent} from \"./color-viewer.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {ColorService} from \"../../services/color.service\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\n\r\nexport default {\r\n  title: 'Components/Color',\r\n  component: ColorViewerComponent\r\n} as Meta\r\n\r\nclass MockColorService implements Partial<ColorService> {\r\n\r\n  loadColor(color: Color) {\r\n    console.log(`loadColor(${color.name})`)\r\n  }\r\n\r\n}\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  notification: EventEmitter<string | undefined> = new EventEmitter<string | undefined>()\r\n\r\n  constructor() {\r\n    this.notification.subscribe(message => {\r\n      if (message) {\r\n        console.log('Show notification\\n', message)\r\n      } else {\r\n        console.log('Close notification')\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService,\r\n      useClass: MockColorService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const PawcodeBlue = Template.bind({})\r\n\r\nPawcodeBlue.args = {\r\n  dark: false,\r\n  color: new Color('pawcode Blue', '#4472c4')\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "loadColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MockColorService-1"
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-b63ef483a3b14fc3911f6b73475690d816368912b3ff6c167dfccf2c6efe1a4dd63284c81db4bff016c201ecaf2bc781aaff5894b797c5de1eb918ad7e22d61b",
            "file": "src/app/components/color-editor/color-editor.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorEditorComponent} from \"./color-editor.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {ColorService} from \"../../services/color.service\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\n\r\nexport default {\r\n  title: 'Components/Color Editor',\r\n  component: ColorEditorComponent\r\n} as Meta\r\n\r\nclass MockColorService implements Partial<ColorService> {\r\n\r\n  private colorService: ColorService = new ColorService()\r\n\r\n  getColor() {\r\n    console.log('getColor()')\r\n    return this.colorService.getColor()\r\n  }\r\n\r\n  getColorChangeEmitter() {\r\n    console.log('getColorChangeEmitter()')\r\n    return this.colorService.getColorChangeEmitter()\r\n  }\r\n\r\n  adjustColor(color: Color) {\r\n    console.log(`adjustColor(${color.name})`)\r\n    return this.colorService.adjustShade()\r\n  }\r\n\r\n  updateColorName(name: string) {\r\n    console.log(`updateColorName(${name})`)\r\n    return this.colorService.updateColorName(name)\r\n  }\r\n\r\n  randomColor() {\r\n    console.log('randomColor()')\r\n    return this.colorService.randomColor()\r\n  }\r\n\r\n}\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  notification: EventEmitter<string | undefined> = new EventEmitter<string | undefined>()\r\n\r\n  constructor() {\r\n    this.notification.subscribe(message => {\r\n      if (message) {\r\n        console.log('Show notification\\n', message)\r\n      } else {\r\n        console.log('Close notification')\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 46
            },
            "properties": [
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-de3fc8f10e8ccf13884e53e134e2a85ee4e5277a51507049d75375727e6adc357c74ae3f899a9fe9a40e0d40c8cfe8babdf20fdcdf0711fd353b482e49ed0891-1",
            "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorViewerComponent} from \"./color-viewer.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {ColorService} from \"../../services/color.service\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\n\r\nexport default {\r\n  title: 'Components/Color',\r\n  component: ColorViewerComponent\r\n} as Meta\r\n\r\nclass MockColorService implements Partial<ColorService> {\r\n\r\n  loadColor(color: Color) {\r\n    console.log(`loadColor(${color.name})`)\r\n  }\r\n\r\n}\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  notification: EventEmitter<string | undefined> = new EventEmitter<string | undefined>()\r\n\r\n  constructor() {\r\n    this.notification.subscribe(message => {\r\n      if (message) {\r\n        console.log('Show notification\\n', message)\r\n      } else {\r\n        console.log('Close notification')\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService,\r\n      useClass: MockColorService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const PawcodeBlue = Template.bind({})\r\n\r\nPawcodeBlue.args = {\r\n  dark: false,\r\n  color: new Color('pawcode Blue', '#4472c4')\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "properties": [
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MockNotificationService-1"
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-afef1f286cc03f2e136f08900addf366e1340e70b084abc6e25cc41f19d614df63c540eb0c25d85556506717c10f9f14d734d600e32d74239ac4ec7e59c648a9-2",
            "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {PaletteViewerComponent} from \"./palette-viewer.component\";\r\nimport {Meta, moduleMetadata, Story} from \"@storybook/angular\";\r\nimport {Palette} from \"../../models/palette.model\";\r\nimport {ColorViewerComponent} from \"../color-viewer/color-viewer.component\";\r\n// @ts-ignore\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {StorageService} from \"../../services/storage.service\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../../interfaces/dialog.interface\";\r\nimport {PaletteGenerator, PaletteScheme} from \"../../class/palette-generator\";\r\nimport {Shade} from \"../../models/shade.model\";\r\n\r\nexport default {\r\n  title: 'Components/Palette',\r\n  component: PaletteViewerComponent,\r\n  subcomponents: {ColorViewerComponent},\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [ColorViewerComponent]\r\n    })\r\n  ]\r\n} as Meta\r\n\r\nclass MockStorageService implements Partial<StorageService> {\r\n\r\n  savePalette(palette: Palette) {\r\n    console.log(`savePalette(${palette.title})`)\r\n  }\r\n\r\n}\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  dialog: EventEmitter<Dialog | undefined> = new EventEmitter<Dialog | undefined>()\r\n\r\n  notification: EventEmitter<string | undefined> = new EventEmitter<string | undefined>()\r\n\r\n  constructor() {\r\n    this.dialog.subscribe(dialogContent => {\r\n      if (dialogContent) {\r\n        console.log('Show dialog\\n', dialogContent.message)\r\n      } else {\r\n        console.log('Close dialog')\r\n      }\r\n    })\r\n\r\n    this.notification.subscribe(message => {\r\n      if (message) {\r\n        console.log('Show notification\\n', message)\r\n      } else {\r\n        console.log('Close notification')\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService,\r\n      useClass: MockStorageService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\n\r\nexport const Rainbow = Template.bind({})\r\n\r\nconst rainbowPalette = new Palette('Rainbow', uuidv4())\r\nrainbowPalette.addColor(new Color('Slate', ['#f8fafc', '#f1f5f9', '#e2e8f0', '#cbd5e1', '#94a3b8', '#64748b', '#475569', '#334155', '#1e293b', '#0f172a']))\r\nrainbowPalette.addColor(new Color('Gray', ['#f9fafb', '#f3f4f6', '#e5e7eb', '#d1d5db', '#9ca3af', '#6b7280', '#4b5563', '#374151', '#1f2937', '#111827']))\r\nrainbowPalette.addColor(new Color('Zinc', ['#fafafa', '#f4f4f5', '#e4e4e7', '#d4d4d8', '#a1a1aa', '#71717a', '#52525b', '#3f3f46', '#27272a', '#18181b']))\r\nrainbowPalette.addColor(new Color('Neutral', ['#fafafa', '#f5f5f5', '#e5e5e5', '#d4d4d4', '#a3a3a3', '#737373', '#525252', '#404040', '#262626', '#171717']))\r\nrainbowPalette.addColor(new Color('Stone', ['#fafaf9', '#f5f5f4', '#e7e5e4', '#d6d3d1', '#a8a29e', '#78716c', '#57534e', '#44403c', '#292524', '#1c1917']))\r\nrainbowPalette.addColor(new Color('Red', ['#fef2f2', '#fee2e2', '#fecaca', '#fca5a5', '#f87171', '#ef4444', '#dc2626', '#b91c1c', '#991b1b', '#7f1d1d']))\r\nrainbowPalette.addColor(new Color('Orange', ['#fff7ed', '#ffedd5', '#fed7aa', '#fdba74', '#fb923c', '#f97316', '#ea580c', '#c2410c', '#9a3412', '#7c2d12']))\r\nrainbowPalette.addColor(new Color('Amber', ['#fffbeb', '#fef3c7', '#fde68a', '#fcd34d', '#fbbf24', '#f59e0b', '#d97706', '#b45309', '#92400e', '#78350f']))\r\nrainbowPalette.addColor(new Color('Yellow', ['#fefce8', '#fef9c3', '#fef08a', '#fde047', '#facc15', '#eab308', '#ca8a04', '#a16207', '#854d0e', '#713f12']))\r\nrainbowPalette.addColor(new Color('Lime', ['#f7fee7', '#ecfccb', '#d9f99d', '#bef264', '#a3e635', '#84cc16', '#65a30d', '#4d7c0f', '#3f6212', '#365314']))\r\nrainbowPalette.addColor(new Color('Green', ['#f0fdf4', '#dcfce7', '#bbf7d0', '#86efac', '#4ade80', '#22c55e', '#16a34a', '#15803d', '#166534', '#14532d']))\r\nrainbowPalette.addColor(new Color('Emerald', ['#ecfdf5', '#d1fae5', '#a7f3d0', '#6ee7b7', '#34d399', '#10b981', '#059669', '#047857', '#065f46', '#064e3b']))\r\nrainbowPalette.addColor(new Color('Teal', ['#f0fdfa', '#ccfbf1', '#99f6e4', '#5eead4', '#2dd4bf', '#14b8a6', '#0d9488', '#0f766e', '#115e59', '#134e4a']))\r\nrainbowPalette.addColor(new Color('Cyan', ['#ecfeff', '#cffafe', '#a5f3fc', '#67e8f9', '#22d3ee', '#06b6d4', '#0891b2', '#0e7490', '#155e75', '#164e63']))\r\nrainbowPalette.addColor(new Color('Sky', ['#f0f9ff', '#e0f2fe', '#bae6fd', '#7dd3fc', '#38bdf8', '#0ea5e9', '#0284c7', '#0369a1', '#075985', '#0c4a6e']))\r\nrainbowPalette.addColor(new Color('Blue', ['#eff6ff', '#dbeafe', '#bfdbfe', '#93c5fd', '#60a5fa', '#3b82f6', '#2563eb', '#1d4ed8', '#1e40af', '#1e3a8a']))\r\nrainbowPalette.addColor(new Color('Indigo', ['#eef2ff', '#e0e7ff', '#c7d2fe', '#a5b4fc', '#818cf8', '#6366f1', '#4f46e5', '#4338ca', '#3730a3', '#312e81']))\r\nrainbowPalette.addColor(new Color('Violet', ['#f5f3ff', '#ede9fe', '#ddd6fe', '#c4b5fd', '#a78bfa', '#8b5cf6', '#7c3aed', '#6d28d9', '#5b21b6', '#4c1d95']))\r\nrainbowPalette.addColor(new Color('Purple', ['#faf5ff', '#f3e8ff', '#e9d5ff', '#d8b4fe', '#c084fc', '#a855f7', '#9333ea', '#7e22ce', '#6b21a8', '#581c87']))\r\nrainbowPalette.addColor(new Color('Fuchsia', ['#fdf4ff', '#fae8ff', '#f5d0fe', '#f0abfc', '#e879f9', '#d946ef', '#c026d3', '#a21caf', '#86198f', '#701a75']))\r\nrainbowPalette.addColor(new Color('Pink', ['#fdf2f8', '#fce7f3', '#fbcfe8', '#f9a8d4', '#f472b6', '#ec4899', '#db2777', '#be185d', '#9d174d', '#831843']))\r\nrainbowPalette.addColor(new Color('Rose', ['#fff1f2', '#ffe4e6', '#fecdd3', '#fda4af', '#fb7185', '#f43f5e', '#e11d48', '#be123c', '#9f1239', '#881337']))\r\n\r\nRainbow.args = {\r\n  dark: false,\r\n  palette: rainbowPalette\r\n}\r\n\r\n\r\nexport const Pawcode = Template.bind({})\r\n\r\nconst pawcodePalette = new Palette('pawcode', uuidv4())\r\npawcodePalette.addColor(new Color('Blue', ['#edf1f9', '#dae3f3', '#b5c7e7', '#8fabdb', '#6a8ed0', '#4472c4', '#365b9d', '#294476', '#1c2e4f', '#0e1727']))\r\npawcodePalette.addColor(new Color('Gray', ['#eeeeee', '#dcdcdc', '#bababa', '#999999', '#777777', '#555555', '#444444', '#333333', '#222222', '#111111']))\r\n\r\nPawcode.args = {\r\n  dark: false,\r\n  palette: pawcodePalette\r\n}\r\n\r\n\r\nexport const MediaScope = Template.bind({})\r\n\r\nconst mediaScopePalette = new Palette('media-scope', uuidv4())\r\nmediaScopePalette.addColor(new Color('Blue', ['#eff8fe', '#dff1fc', '#bfe4e9', '#9fd7f6', '#77bde9', '#4ea3db', '#4385c5', '#3967af', '#2e4998', '#17254c']))\r\nmediaScopePalette.addColor(new Color('Red', ['#fbe0e5', '#f7c1cb', '#f08498', '#e94765', '#da3e5b', '#cb3552', '#bc2c48', '#a2213e', '#871534', '#440b1a']))\r\nmediaScopePalette.addColor(new Color('Yellow', ['#fff3db', '#fee7b7', '#fdd06f', '#fbb827', '#f8ab30', '#f59e39', '#d87d2d', '#bc5d22', '#9f3c16', '#501e0b']))\r\nmediaScopePalette.addColor(new Color('Zinc', ['#fafafa', '#f4f4f5', '#e4e4e7', '#d4d4d8', '#a1a1aa', '#71717a', '#52525b', '#3f3f46', '#27272a', '#18181b']))\r\n\r\nMediaScope.args = {\r\n  dark: false,\r\n  palette: mediaScopePalette\r\n}\r\n\r\n\r\nexport const Random = Template.bind({})\r\n\r\nRandom.args = {\r\n  dark: false,\r\n  palette: Palette.generateRandomPalette(5)\r\n}\r\n\r\n\r\nexport const Monochromatic = Template.bind({})\r\n\r\nMonochromatic.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#da4e44'),\r\n    PaletteScheme.MONOCHROMATIC\r\n  )\r\n}\r\n\r\n\r\nexport const Analogous = Template.bind({})\r\n\r\nAnalogous.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#77cf97'),\r\n    PaletteScheme.ANALOGOUS\r\n  )\r\n}\r\n\r\n\r\nexport const Complementary = Template.bind({})\r\n\r\nComplementary.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#ff7231'),\r\n    PaletteScheme.COMPLEMENTARY\r\n  )\r\n}\r\n\r\n\r\nexport const Split = Template.bind({})\r\n\r\nSplit.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#29cddc'),\r\n    PaletteScheme.SPLIT\r\n  )\r\n}\r\n\r\n\r\nexport const Triadic = Template.bind({})\r\n\r\nTriadic.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#00ad64'),\r\n    PaletteScheme.TRIADIC\r\n  )\r\n}\r\n\r\n\r\nexport const Compound = Template.bind({})\r\n\r\nCompound.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#66b032'),\r\n    PaletteScheme.COMPOUND\r\n  )\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "properties": [
                {
                    "name": "dialog",
                    "defaultValue": "new EventEmitter<Dialog | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<Dialog | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "MockNotificationService-2"
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-6f0e2e8ec45c6852344b5992ee33129e86d8cb2eb13d5aac2d92c8df9024bc734e2ec1ddb965614dda324596f2afb0109d672e3e918a3cb8bcda31345360afb5-3",
            "file": "src/app/components/dialog/dialog.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DialogComponent} from \"./dialog.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../../interfaces/dialog.interface\";\r\n\r\nexport default {\r\n  title: 'Components/Dialog',\r\n  component: DialogComponent\r\n} as Meta\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  dialog = new EventEmitter<Dialog | undefined>()\r\n\r\n  constructor() {\r\n    const wait = new EventEmitter()\r\n    const next = new EventEmitter()\r\n\r\n    let content = {\r\n      message: 'This is a test message for storybook.\\n\\n' +\r\n        'You can use \\\\n to create new lines in here.',\r\n      actions: [{\r\n        text: 'Wait',\r\n        title: 'Wait 2 seconds for next dialog',\r\n        action: wait\r\n      }, {\r\n        text: 'Next',\r\n        title: 'Show next dialog',\r\n        action: next\r\n      }]\r\n    }\r\n\r\n    wait.subscribe(() => {\r\n      this.dialog.emit(undefined)\r\n      setTimeout(() => {\r\n        this.dialog.emit(content)\r\n      }, 2000)\r\n    })\r\n    next.subscribe(() => {\r\n      this.dialog.emit(content)\r\n    })\r\n\r\n    setTimeout(() => {\r\n      this.dialog.emit(content)\r\n    }, 0)\r\n\r\n    this.dialog.subscribe(notification => {\r\n      if (notification)\r\n        console.log('Show dialog\\n', notification.message)\r\n      else\r\n        console.log('Close dialog')\r\n    })\r\n  }\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "properties": [
                {
                    "name": "dialog",
                    "defaultValue": "new EventEmitter<Dialog | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "MockNotificationService-3"
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-793eede438ce98e6950a58230a078efdcf6b20e1da97aced415c19bfdb02b6bc64c2c08145309647e51e54f9f21c9619e1ae72926554eefc2fa4610e2de371d4-4",
            "file": "src/app/components/notification/notification.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {NotificationComponent} from \"./notification.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\n\r\nexport default {\r\n  title: 'Components/Notification',\r\n  component: NotificationComponent\r\n} as Meta\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  notification = new EventEmitter<string | undefined>()\r\n\r\n  constructor() {\r\n    const message = 'This is short notification.'\r\n\r\n    setTimeout(() => {\r\n      this.notification.emit(message)\r\n    }, 0)\r\n\r\n    this.notification.subscribe(nextMessage => {\r\n      if (nextMessage) {\r\n        console.log('Show Notification\\n', nextMessage)\r\n      } else {\r\n        console.log('Close Notification')\r\n        setTimeout(() => {\r\n          this.notification.emit(message)\r\n        }, 1000)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "properties": [
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "MockNotificationService-4"
        },
        {
            "name": "MockStorageService",
            "id": "class-MockStorageService-724272b81818f7cff2e8cce0f1ae8474d317eb92ad6f74b34af9d6d169ff285a1cab04fc6ad13d820a18321b1b25f1afab27b202e69dba00b254477818c1bbc1",
            "file": "src/app/components/light-switch/light-switch.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Meta, Story} from \"@storybook/angular\";\r\nimport {LightSwitchComponent} from \"./light-switch.component\";\r\nimport {StorageService} from \"../../services/storage.service\";\r\n\r\nexport default {\r\n  title: 'Components/Light Switch',\r\n  component: LightSwitchComponent,\r\n} as Meta\r\n\r\nclass MockStorageService implements Partial<StorageService> {\r\n\r\n  toggleTheme(dark: boolean | undefined) {\r\n    console.log(`toggleTheme(${dark === undefined ? 'toggle' : (dark ? 'dark' : 'light')})`)\r\n    return dark || false\r\n  }\r\n\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService,\r\n      useClass: MockStorageService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false,\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "toggleTheme",
                    "args": [
                        {
                            "name": "dark",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dark",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        },
        {
            "name": "MockStorageService",
            "id": "class-MockStorageService-afef1f286cc03f2e136f08900addf366e1340e70b084abc6e25cc41f19d614df63c540eb0c25d85556506717c10f9f14d734d600e32d74239ac4ec7e59c648a9-1",
            "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {PaletteViewerComponent} from \"./palette-viewer.component\";\r\nimport {Meta, moduleMetadata, Story} from \"@storybook/angular\";\r\nimport {Palette} from \"../../models/palette.model\";\r\nimport {ColorViewerComponent} from \"../color-viewer/color-viewer.component\";\r\n// @ts-ignore\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {StorageService} from \"../../services/storage.service\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../../interfaces/dialog.interface\";\r\nimport {PaletteGenerator, PaletteScheme} from \"../../class/palette-generator\";\r\nimport {Shade} from \"../../models/shade.model\";\r\n\r\nexport default {\r\n  title: 'Components/Palette',\r\n  component: PaletteViewerComponent,\r\n  subcomponents: {ColorViewerComponent},\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [ColorViewerComponent]\r\n    })\r\n  ]\r\n} as Meta\r\n\r\nclass MockStorageService implements Partial<StorageService> {\r\n\r\n  savePalette(palette: Palette) {\r\n    console.log(`savePalette(${palette.title})`)\r\n  }\r\n\r\n}\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  dialog: EventEmitter<Dialog | undefined> = new EventEmitter<Dialog | undefined>()\r\n\r\n  notification: EventEmitter<string | undefined> = new EventEmitter<string | undefined>()\r\n\r\n  constructor() {\r\n    this.dialog.subscribe(dialogContent => {\r\n      if (dialogContent) {\r\n        console.log('Show dialog\\n', dialogContent.message)\r\n      } else {\r\n        console.log('Close dialog')\r\n      }\r\n    })\r\n\r\n    this.notification.subscribe(message => {\r\n      if (message) {\r\n        console.log('Show notification\\n', message)\r\n      } else {\r\n        console.log('Close notification')\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService,\r\n      useClass: MockStorageService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\n\r\nexport const Rainbow = Template.bind({})\r\n\r\nconst rainbowPalette = new Palette('Rainbow', uuidv4())\r\nrainbowPalette.addColor(new Color('Slate', ['#f8fafc', '#f1f5f9', '#e2e8f0', '#cbd5e1', '#94a3b8', '#64748b', '#475569', '#334155', '#1e293b', '#0f172a']))\r\nrainbowPalette.addColor(new Color('Gray', ['#f9fafb', '#f3f4f6', '#e5e7eb', '#d1d5db', '#9ca3af', '#6b7280', '#4b5563', '#374151', '#1f2937', '#111827']))\r\nrainbowPalette.addColor(new Color('Zinc', ['#fafafa', '#f4f4f5', '#e4e4e7', '#d4d4d8', '#a1a1aa', '#71717a', '#52525b', '#3f3f46', '#27272a', '#18181b']))\r\nrainbowPalette.addColor(new Color('Neutral', ['#fafafa', '#f5f5f5', '#e5e5e5', '#d4d4d4', '#a3a3a3', '#737373', '#525252', '#404040', '#262626', '#171717']))\r\nrainbowPalette.addColor(new Color('Stone', ['#fafaf9', '#f5f5f4', '#e7e5e4', '#d6d3d1', '#a8a29e', '#78716c', '#57534e', '#44403c', '#292524', '#1c1917']))\r\nrainbowPalette.addColor(new Color('Red', ['#fef2f2', '#fee2e2', '#fecaca', '#fca5a5', '#f87171', '#ef4444', '#dc2626', '#b91c1c', '#991b1b', '#7f1d1d']))\r\nrainbowPalette.addColor(new Color('Orange', ['#fff7ed', '#ffedd5', '#fed7aa', '#fdba74', '#fb923c', '#f97316', '#ea580c', '#c2410c', '#9a3412', '#7c2d12']))\r\nrainbowPalette.addColor(new Color('Amber', ['#fffbeb', '#fef3c7', '#fde68a', '#fcd34d', '#fbbf24', '#f59e0b', '#d97706', '#b45309', '#92400e', '#78350f']))\r\nrainbowPalette.addColor(new Color('Yellow', ['#fefce8', '#fef9c3', '#fef08a', '#fde047', '#facc15', '#eab308', '#ca8a04', '#a16207', '#854d0e', '#713f12']))\r\nrainbowPalette.addColor(new Color('Lime', ['#f7fee7', '#ecfccb', '#d9f99d', '#bef264', '#a3e635', '#84cc16', '#65a30d', '#4d7c0f', '#3f6212', '#365314']))\r\nrainbowPalette.addColor(new Color('Green', ['#f0fdf4', '#dcfce7', '#bbf7d0', '#86efac', '#4ade80', '#22c55e', '#16a34a', '#15803d', '#166534', '#14532d']))\r\nrainbowPalette.addColor(new Color('Emerald', ['#ecfdf5', '#d1fae5', '#a7f3d0', '#6ee7b7', '#34d399', '#10b981', '#059669', '#047857', '#065f46', '#064e3b']))\r\nrainbowPalette.addColor(new Color('Teal', ['#f0fdfa', '#ccfbf1', '#99f6e4', '#5eead4', '#2dd4bf', '#14b8a6', '#0d9488', '#0f766e', '#115e59', '#134e4a']))\r\nrainbowPalette.addColor(new Color('Cyan', ['#ecfeff', '#cffafe', '#a5f3fc', '#67e8f9', '#22d3ee', '#06b6d4', '#0891b2', '#0e7490', '#155e75', '#164e63']))\r\nrainbowPalette.addColor(new Color('Sky', ['#f0f9ff', '#e0f2fe', '#bae6fd', '#7dd3fc', '#38bdf8', '#0ea5e9', '#0284c7', '#0369a1', '#075985', '#0c4a6e']))\r\nrainbowPalette.addColor(new Color('Blue', ['#eff6ff', '#dbeafe', '#bfdbfe', '#93c5fd', '#60a5fa', '#3b82f6', '#2563eb', '#1d4ed8', '#1e40af', '#1e3a8a']))\r\nrainbowPalette.addColor(new Color('Indigo', ['#eef2ff', '#e0e7ff', '#c7d2fe', '#a5b4fc', '#818cf8', '#6366f1', '#4f46e5', '#4338ca', '#3730a3', '#312e81']))\r\nrainbowPalette.addColor(new Color('Violet', ['#f5f3ff', '#ede9fe', '#ddd6fe', '#c4b5fd', '#a78bfa', '#8b5cf6', '#7c3aed', '#6d28d9', '#5b21b6', '#4c1d95']))\r\nrainbowPalette.addColor(new Color('Purple', ['#faf5ff', '#f3e8ff', '#e9d5ff', '#d8b4fe', '#c084fc', '#a855f7', '#9333ea', '#7e22ce', '#6b21a8', '#581c87']))\r\nrainbowPalette.addColor(new Color('Fuchsia', ['#fdf4ff', '#fae8ff', '#f5d0fe', '#f0abfc', '#e879f9', '#d946ef', '#c026d3', '#a21caf', '#86198f', '#701a75']))\r\nrainbowPalette.addColor(new Color('Pink', ['#fdf2f8', '#fce7f3', '#fbcfe8', '#f9a8d4', '#f472b6', '#ec4899', '#db2777', '#be185d', '#9d174d', '#831843']))\r\nrainbowPalette.addColor(new Color('Rose', ['#fff1f2', '#ffe4e6', '#fecdd3', '#fda4af', '#fb7185', '#f43f5e', '#e11d48', '#be123c', '#9f1239', '#881337']))\r\n\r\nRainbow.args = {\r\n  dark: false,\r\n  palette: rainbowPalette\r\n}\r\n\r\n\r\nexport const Pawcode = Template.bind({})\r\n\r\nconst pawcodePalette = new Palette('pawcode', uuidv4())\r\npawcodePalette.addColor(new Color('Blue', ['#edf1f9', '#dae3f3', '#b5c7e7', '#8fabdb', '#6a8ed0', '#4472c4', '#365b9d', '#294476', '#1c2e4f', '#0e1727']))\r\npawcodePalette.addColor(new Color('Gray', ['#eeeeee', '#dcdcdc', '#bababa', '#999999', '#777777', '#555555', '#444444', '#333333', '#222222', '#111111']))\r\n\r\nPawcode.args = {\r\n  dark: false,\r\n  palette: pawcodePalette\r\n}\r\n\r\n\r\nexport const MediaScope = Template.bind({})\r\n\r\nconst mediaScopePalette = new Palette('media-scope', uuidv4())\r\nmediaScopePalette.addColor(new Color('Blue', ['#eff8fe', '#dff1fc', '#bfe4e9', '#9fd7f6', '#77bde9', '#4ea3db', '#4385c5', '#3967af', '#2e4998', '#17254c']))\r\nmediaScopePalette.addColor(new Color('Red', ['#fbe0e5', '#f7c1cb', '#f08498', '#e94765', '#da3e5b', '#cb3552', '#bc2c48', '#a2213e', '#871534', '#440b1a']))\r\nmediaScopePalette.addColor(new Color('Yellow', ['#fff3db', '#fee7b7', '#fdd06f', '#fbb827', '#f8ab30', '#f59e39', '#d87d2d', '#bc5d22', '#9f3c16', '#501e0b']))\r\nmediaScopePalette.addColor(new Color('Zinc', ['#fafafa', '#f4f4f5', '#e4e4e7', '#d4d4d8', '#a1a1aa', '#71717a', '#52525b', '#3f3f46', '#27272a', '#18181b']))\r\n\r\nMediaScope.args = {\r\n  dark: false,\r\n  palette: mediaScopePalette\r\n}\r\n\r\n\r\nexport const Random = Template.bind({})\r\n\r\nRandom.args = {\r\n  dark: false,\r\n  palette: Palette.generateRandomPalette(5)\r\n}\r\n\r\n\r\nexport const Monochromatic = Template.bind({})\r\n\r\nMonochromatic.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#da4e44'),\r\n    PaletteScheme.MONOCHROMATIC\r\n  )\r\n}\r\n\r\n\r\nexport const Analogous = Template.bind({})\r\n\r\nAnalogous.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#77cf97'),\r\n    PaletteScheme.ANALOGOUS\r\n  )\r\n}\r\n\r\n\r\nexport const Complementary = Template.bind({})\r\n\r\nComplementary.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#ff7231'),\r\n    PaletteScheme.COMPLEMENTARY\r\n  )\r\n}\r\n\r\n\r\nexport const Split = Template.bind({})\r\n\r\nSplit.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#29cddc'),\r\n    PaletteScheme.SPLIT\r\n  )\r\n}\r\n\r\n\r\nexport const Triadic = Template.bind({})\r\n\r\nTriadic.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#00ad64'),\r\n    PaletteScheme.TRIADIC\r\n  )\r\n}\r\n\r\n\r\nexport const Compound = Template.bind({})\r\n\r\nCompound.args = {\r\n  dark: false,\r\n  palette: PaletteGenerator.generatePalette(\r\n    new Shade(-1, true, '#66b032'),\r\n    PaletteScheme.COMPOUND\r\n  )\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "savePalette",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MockStorageService-1"
        },
        {
            "name": "Palette",
            "id": "class-Palette-653dd14f75c7010c3d8a10f73cfc005d507e3e6ac8570efee5edb62bbc2b864e2e3cbcc782d44866ccce8e38c0b87ed69fab45c0701ef6fbb5445acddb4ed9f8",
            "file": "src/app/models/palette.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Color} from \"./color.model\";\r\n// @ts-ignore\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nexport class Palette {\r\n\r\n  title: string\r\n  id: string\r\n  colors: Color[] = []\r\n  order = false\r\n\r\n  constructor(title: string, id?: string) {\r\n    this.title = title\r\n    this.id = id || uuidv4()\r\n  }\r\n\r\n  /**\r\n   * Add a color to the beginning of the palette.\r\n   * @param color\r\n   * @param front\r\n   */\r\n  public addColor(color: Color, front = true) {\r\n    if (this.colors.find(c => c.name === color.name)) {\r\n      this.colors[this.colors.findIndex(c => c.name === color.name)] = color\r\n    } else {\r\n      if (front)\r\n        this.colors.unshift(color)\r\n      else\r\n        this.colors.push(color)\r\n    }\r\n\r\n    this.order = false\r\n  }\r\n\r\n  /**\r\n   * Remove the color from the palette\r\n   * @param color\r\n   */\r\n  public removeColor(color: Color) {\r\n    const index = this.colors.indexOf(color)\r\n    if (index > -1) {\r\n      this.colors.splice(index, 1)\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sort all colors of the palette by hue\r\n   */\r\n  public sortColors() {\r\n    this.colors.sort((a, b) => {\r\n      if (this.order)\r\n        return a.getShade(500).hue - b.getShade(500).hue\r\n      else\r\n        return b.getShade(500).hue - a.getShade(500).hue\r\n    })\r\n    this.order = !this.order\r\n  }\r\n\r\n  /**\r\n   * Generate a new random palette with 'size' colors.\r\n   * @param size\r\n   */\r\n  public static generateRandomPalette(size: number): Palette {\r\n    if (size < 1)\r\n      throw `Size was ${size} but must be positive.`\r\n\r\n    const palette = new Palette('Random')\r\n    for (let i = 0; i < size; i++) {\r\n      const color = Color.generateRandomColor()\r\n      palette.addColor(new Color(color.name, color.getShade(500).hex))\r\n    }\r\n\r\n    palette.colors.sort((a, b) => a.getShade(500).hue - b.getShade(500).hue)\r\n\r\n    return palette;\r\n  }\r\n\r\n  /**\r\n   * Stringify the palette.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      id: this.id,\r\n      title: this.title,\r\n      colors: this.colors\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a palette.\r\n   * Throws exception if not all values are given.\r\n   * @param json\r\n   */\r\n  public static parsePalette(json: any): Palette {\r\n    if (!json.title)\r\n      throw 'Palette has no title'\r\n    if (!json.id)\r\n      throw 'Palette has no id'\r\n    if (!json.colors)\r\n      throw 'Palette has no colors'\r\n\r\n    const palette = new Palette(json.title, json.id)\r\n\r\n    for (const color of json.colors) {\r\n      palette.addColor(Color.parseColor(color))\r\n    }\r\n    palette.colors.reverse()\r\n\r\n    return palette\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "order",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "addColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "front",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a color to the beginning of the palette.\n",
                    "description": "<p>Add a color to the beginning of the palette.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 367,
                                "end": 372,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 361,
                                "end": 366,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 386,
                                "end": 391,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "front"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 380,
                                "end": 385,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "generateRandomPalette",
                    "args": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a new random palette with 'size' colors.\n",
                    "description": "<p>Generate a new random palette with &#39;size&#39; colors.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1408,
                                "end": 1412,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "size"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1402,
                                "end": 1407,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "parsePalette",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a palette.\nThrows exception if not all values are given.\n",
                    "description": "<p>Parse the json object to a palette.\nThrows exception if not all values are given.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2175,
                                "end": 2179,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2169,
                                "end": 2174,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove the color from the palette\n",
                    "description": "<p>Remove the color from the palette</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 796,
                                "end": 801,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 790,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "sortColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSort all colors of the palette by hue\n",
                    "description": "<p>Sort all colors of the palette by hue</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStringify the palette.\n",
                    "description": "<p>Stringify the palette.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaletteExporter",
            "id": "class-PaletteExporter-5560634ce866d3c8562c36fe731fd77e5620c8b305a94804d0ec687d302dae4144908d8f9ccb8e1e0c2a679f3f21975044d0d1a5579555af3cb8c6330663c496",
            "file": "src/app/class/palette-exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Palette} from \"../models/palette.model\";\r\nimport {Color} from \"../models/color.model\";\r\nimport {Shade} from \"../models/shade.model\";\r\n\r\nexport class PaletteExporter {\r\n\r\n  /**\r\n   * Export a palette for usage in a separate colors.css file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportCssFile(palette: Palette) {\r\n    return `:root {\\n\\t${this.exportPaletteToCSS(palette).replace(/\\n/g, '\\n\\t')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in plain CSS as CSS properties.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToCSS(palette: Palette) {\r\n    return `/* Color palette generated by ${window.location.href} */\\n\\n${palette.colors.map(c => this.exportColorToCSS(c)).join('\\n\\n')}`\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in plain CSS as CSS properties.\r\n   * @param color Color to export\r\n   * @private\r\n   */\r\n  private static exportColorToCSS(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return color.shades.map(s => this.exportShadeToCSS(s, name)).join('\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in plain CSS as CSS property.\r\n   * @param shade Shade to export\r\n   * @param name Name of the color\r\n   * @private\r\n   */\r\n  private static exportShadeToCSS(shade: Shade, name: string) {\r\n    return `--${name}-${shade.index}:${shade.index < 100 ? ' ' : ''} ${shade.hex};`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in a separate tailwind.colors.js file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportTailwindFile(palette: Palette) {\r\n    return `module.exports = {\\n\\t${this.exportPaletteToTailwind(palette).replace(/\\n/g, '\\n\\t')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in TailwindCSS.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToTailwind(palette: Palette) {\r\n    return palette.colors.map(c => this.exportColorToTailwind(c)).join(',\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in TailwindCSS.\r\n   * @param color Color to export\r\n   * @private\r\n   */\r\n  private static exportColorToTailwind(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return `'${name}': {\\n${color.shades.map(s => this.exportShadeToTailwind(s)).join(',\\n')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in TailwindCSS.\r\n   * @param shade Shade to export\r\n   * @private\r\n   */\r\n  private static exportShadeToTailwind(shade: Shade) {\r\n    return `\\t${shade.index}:${shade.index < 100 ? ' ' : ''} '${shade.hex}'`\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "exportColorToCSS",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a color for usage in plain CSS as CSS properties.\n",
                    "description": "<p>Export a color for usage in plain CSS as CSS properties.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 829,
                                "end": 834,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 823,
                                "end": 828,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 858,
                                "end": 865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportColorToTailwind",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a color for usage in TailwindCSS.\n",
                    "description": "<p>Export a color for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1983,
                                "end": 1988,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1977,
                                "end": 1982,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2012,
                                "end": 2019,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportCssFile",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in a separate colors.css file.\n",
                    "description": "<p>Export a palette for usage in a separate colors.css file.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 261,
                                "end": 268,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 255,
                                "end": 260,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportPaletteToCSS",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in plain CSS as CSS properties.\n",
                    "description": "<p>Export a palette for usage in plain CSS as CSS properties.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 517,
                                "end": 524,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 511,
                                "end": 516,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportPaletteToTailwind",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in TailwindCSS.\n",
                    "description": "<p>Export a palette for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1743,
                                "end": 1750,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1737,
                                "end": 1742,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportShadeToCSS",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a shade for usage in plain CSS as CSS property.\n",
                    "description": "<p>Export a shade for usage in plain CSS as CSS property.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1153,
                                "end": 1158,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1147,
                                "end": 1152,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Shade to export</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1188,
                                "end": 1192,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1182,
                                "end": 1187,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Name of the color</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1218,
                                "end": 1225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportShadeToTailwind",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a shade for usage in TailwindCSS.\n",
                    "description": "<p>Export a shade for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2320,
                                "end": 2325,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2314,
                                "end": 2319,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Shade to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2349,
                                "end": 2356,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportTailwindFile",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in a separate tailwind.colors.js file.\n",
                    "description": "<p>Export a palette for usage in a separate tailwind.colors.js file.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1482,
                                "end": 1489,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1476,
                                "end": 1481,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaletteGenerator",
            "id": "class-PaletteGenerator-d2a1be561a587a2b2e3a9b0f51f8c4a2a0487175dfc10ea9a25588af32697cdd9ff52bc903996a6a3d0ea16ed214ea2f175c6cbbb3fd8cc3469591f31fbcd5dd",
            "file": "src/app/class/palette-generator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Shade} from \"../models/shade.model\";\nimport {Palette} from \"../models/palette.model\";\nimport {Color} from \"../models/color.model\";\n\nexport class PaletteGenerator {\n\n  static generatePalette(shade: Shade, scheme: PaletteScheme): Palette {\n    switch (scheme) {\n      case PaletteScheme.MONOCHROMATIC:\n        return this.generateMonochromaticPalette(shade)\n      case PaletteScheme.ANALOGOUS:\n        return this.generateAnalogousPalette(shade)\n      case PaletteScheme.COMPLEMENTARY:\n        return this.generateComplementaryPalette(shade)\n      case PaletteScheme.SPLIT:\n        return this.generateSplitPalette(shade)\n      case PaletteScheme.TRIADIC:\n        return this.generateTriadicPalette(shade)\n      case PaletteScheme.COMPOUND:\n        return this.generateCompoundPalette(shade)\n      case PaletteScheme.SURPRISE:\n        const schemes = Object.keys(PaletteScheme)\n        const index = schemes[Math.floor(Math.random() * schemes.length)]\n        // @ts-ignore\n        return this.generatePalette(shade, PaletteScheme[index])\n      default:\n        return Palette.generateRandomPalette(5)\n    }\n  }\n\n  private static generateMonochromaticPalette(shade: Shade) {\n    const monochromatic = new Palette('Monochrom')\n\n    monochromatic.addColor(new Color('primary', [shade]))\n    monochromatic.addColor(new Color('muted', [\n      new Shade(-1, true, shade.hue, 30, 50)\n    ]), false)\n    monochromatic.addColor(new Color('gray', [\n      new Shade(-1, true, shade.hue, 2, 50)\n    ]), false)\n\n    return monochromatic\n  }\n\n  private static generateAnalogousPalette(shade: Shade) {\n    const analogous = new Palette('Analogous')\n\n    analogous.addColor(new Color('primary', [shade]))\n\n    analogous.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 315), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    analogous.addColor(new Color('secondary muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 270), 25, 20)\n    ]), false)\n\n    analogous.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 45), shade.saturation, 50)\n    ]), false)\n    analogous.addColor(new Color('accent muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 90) % 360, 25, 20)\n    ]), false)\n\n    return analogous\n  }\n\n  private static generateComplementaryPalette(shade: Shade) {\n    const complementary = new Palette('Complementary')\n\n    complementary.addColor(new Color('primary', [shade]))\n\n    complementary.addColor(new Color('gray', [\n      new Shade(-1, true, shade.hue, 3, 50)\n    ]), false)\n\n    complementary.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 180), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n\n    return complementary\n  }\n\n  private static generateSplitPalette(shade: Shade) {\n    const split = new Palette('Split')\n\n    split.addColor(new Color('primary', [shade]))\n\n    split.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 20), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    split.addColor(new Color('gray', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 20), 3, 50)\n    ]), false)\n\n    split.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 180), shade.saturation, 80)\n    ]), false)\n\n    return split\n  }\n\n  private static generateTriadicPalette(shade: Shade) {\n    const triadic = new Palette('Triadic')\n\n    triadic.addColor(new Color('primary', [shade]))\n\n    triadic.addColor(new Color('primary muted', [\n      new Shade(-1, true, shade.hue, 20, 30)\n    ]), false)\n\n    triadic.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 120), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    triadic.addColor(new Color('secondary muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 120), 20, 30)\n    ]), false)\n\n    triadic.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 240), shade.saturation, 20)\n    ]), false)\n\n    return triadic\n  }\n\n  private static generateCompoundPalette(shade: Shade) {\n    const compound = new Palette('Compound')\n\n    compound.addColor(new Color('primary', [shade]))\n\n    compound.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 210), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n\n    compound.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 150), shade.saturation, 50)\n    ]), false)\n\n    return compound\n  }\n\n  private static changeHueOnWheel(hue: number, change: number) {\n    let wheel\n    if (hue < 60)\n      wheel = 2 * hue\n    else if (hue < 120)\n      wheel = hue + 60\n    else if (hue < 240)\n      wheel = .5 * hue + 120\n    else\n      wheel = hue\n\n    wheel += change\n    wheel %= 360\n\n    let newHue\n    if (wheel < 120)\n      newHue = .5 * wheel\n    else if (wheel < 180)\n      newHue = wheel + 300\n    else if (wheel < 240)\n      newHue = 2 * wheel + 120\n    else\n      newHue = wheel\n\n    return newHue % 360\n  }\n\n}\n\nexport enum PaletteScheme {\n  MONOCHROMATIC,\n  ANALOGOUS,\n  COMPLEMENTARY,\n  SPLIT,\n  TRIADIC,\n  COMPOUND,\n  SURPRISE,\n  RANDOM\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "changeHueOnWheel",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "change",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "change",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateAnalogousPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateComplementaryPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCompoundPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateMonochromaticPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateSplitPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateTriadicPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Shade",
            "id": "class-Shade-6f021a29facb7b30d2ad6b672fe7b96fdef75c869630de2c08fc7389eadf8bb5cf8535c697d06bfe75d768234343d46a6b1c67f6aa61748923cc1637ca7d68a4",
            "file": "src/app/models/shade.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorConverter} from \"../class/color-converter\";\r\n\r\nexport class Shade {\r\n\r\n  index: number\r\n  hex: string\r\n  hue: number\r\n  saturation: number\r\n  luminosity: number\r\n  brightness: number = 0\r\n  fixed: boolean\r\n\r\n  public constructor(index: number, fixed: boolean, hex: string)\r\n  public constructor(index: number, fixed: boolean, hue: number, saturation: number, luminosity: number)\r\n  public constructor(index: number, fixed: boolean, hex: string, hue: number, saturation: number, luminosity: number)\r\n\r\n  constructor(...args: any[]) {\r\n    this.index = args[0]\r\n    this.fixed = args[1]\r\n\r\n    if (args.length === 3) {\r\n      this.hex = args[2]\r\n      const hsl = ColorConverter.HEXtoHSL(this.hex)\r\n      this.hue = hsl.hue\r\n      this.saturation = hsl.saturation\r\n      this.luminosity = hsl.luminosity\r\n      this.updateBrightness()\r\n    } else if (args.length === 5) {\r\n      this.hue = args[2]\r\n      this.saturation = args[3]\r\n      this.luminosity = args[4]\r\n      this.hex = ColorConverter.HSLtoHEX(this.hue, this.saturation, this.luminosity)\r\n      this.updateBrightness()\r\n    } else {\r\n      this.hex = args[2]\r\n      this.hue = args[3]\r\n      this.saturation = args[4]\r\n      this.luminosity = args[5]\r\n      this.updateBrightness()\r\n    }\r\n  }\r\n\r\n  public setIndex(index: number) {\r\n    this.index = index\r\n  }\r\n\r\n  public setHEX(hex: string, fixed = false) {\r\n    this.fixed = fixed\r\n    this.hex = hex\r\n    const hsl = ColorConverter.HEXtoHSL(this.hex)\r\n    this.hue = hsl.hue\r\n    this.saturation = hsl.saturation\r\n    this.luminosity = hsl.luminosity\r\n    this.updateBrightness()\r\n  }\r\n\r\n  public setHSL(hue: number, saturation: number, luminosity: number, fixed = false) {\r\n    this.fixed = fixed\r\n    this.hue = hue\r\n    this.saturation = saturation\r\n    this.luminosity = luminosity\r\n    this.hex = ColorConverter.HSLtoHEX(this.hue, this.saturation, this.luminosity)\r\n    this.updateBrightness()\r\n  }\r\n\r\n  private updateBrightness() {\r\n    const rgb = ColorConverter.HEXtoRGB(this.hex)\r\n    this.brightness = Math.round(\r\n      Math.sqrt(\r\n        .299 * rgb.red * rgb.red +\r\n        .587 * rgb.green * rgb.green +\r\n        .114 * rgb.blue * rgb.blue\r\n      ) / 2.55\r\n    )\r\n\r\n    /*let x = 360 - this.hue\r\n\r\n    let adjustment\r\n    if (x < 120)\r\n      adjustment = -0.0007 * x * x + 0.17 * x - 0.3\r\n    else if (x > 260)\r\n      adjustment = 0.001 * x * x - 0.52 * x + 57.6\r\n    else\r\n      adjustment = ((-20) / (1 + Math.pow(243.21, - x / 70) * 2640162)) + 10\r\n\r\n    this.brightness = this.luminosity - Math.round(adjustment)*/\r\n  }\r\n\r\n  /**\r\n   * Generate a random shade.\r\n   */\r\n  public static generateRandomShade(): Shade {\r\n    return new Shade(\r\n      0,\r\n      true,\r\n      Math.floor(Math.random() * 360),\r\n      30 + Math.floor(Math.random() * 60),\r\n      25 + Math.floor(Math.random() * 50)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a shade.\r\n   * Throws exception if json object is no valid shade object.\r\n   * @param json\r\n   */\r\n  public static parseShade(json: any): Shade {\r\n    if ((!json.index && json.index !== 0)\r\n        || !json.hex\r\n        || (!json.hue && json.hue !== 0)\r\n        || (!json.saturation && json.saturation !== 0)\r\n        || (!json.luminosity && json.luminosity !== 0))\r\n      throw 'Not all parameters for shade are set'\r\n\r\n    return new Shade(json.index, json.fixed, json.hex, json.hue, json.saturation, json.luminosity)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "brightness",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "fixed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "hex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "luminosity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "generateRandomShade",
                    "args": [],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a random shade.\n",
                    "description": "<p>Generate a random shade.</p>\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "parseShade",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a shade.\nThrows exception if json object is no valid shade object.\n",
                    "description": "<p>Parse the json object to a shade.\nThrows exception if json object is no valid shade object.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2971,
                                "end": 2975,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2965,
                                "end": 2970,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setHEX",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fixed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHSL",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fixed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBrightness",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindCopyDialog",
            "id": "class-TailwindCopyDialog-4f124c61a5d0e40e1329de4be31d483215d225bb37235df686a2c9dd66d4f3245bc93c3ecf2bf81e09009e593f4ce1cb5488cae9cbb7c179e2f419a5302f9a34",
            "file": "src/app/dialogs/tailwind-copy.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindCopyDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://tailwindcss.com/docs/customizing-colors#color-object-syntax', '_blank')\r\n    })\r\n\r\n    return {\r\n      message: 'The palette has been copied to your clipboard. ' +\r\n        `To use the colors copy the contents of the clipboard to the ${ToUnicodeVariantUtil.toUnicodeVariant('tailwind.config.js', 'm')} file.\\n\\n` +\r\n        'Check TailwindsCSS\\'s documentation for further instructions.',\r\n      actions: [{\r\n        text: 'Read more',\r\n        title: 'Open documentation',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindDialog",
            "id": "class-TailwindDialog-7e16cdd61e04225c0bf45b017a95332ee6e79f7bfc016d12ac62f947e7a532dd9ee50ea936f4178ca56e803aea2d165a01271585d28e24d0069e476b2a8ab9cf",
            "file": "src/app/dialogs/tailwind.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {PaletteExporter} from \"../class/palette-exporter\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {TailwindCopyDialog} from \"./tailwind-copy.dialog\";\r\nimport {TailwindFileDialog} from \"./tailwind-file.dialog\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) { }\r\n\r\n  getNotification() {\r\n    const tailwindCopyEmitter = new EventEmitter()\r\n    tailwindCopyEmitter.subscribe(() => {\r\n      const tailwind = PaletteExporter.exportPaletteToTailwind(this.palette)\r\n      navigator.clipboard.writeText(tailwind).then(() => {\r\n        this.notification.emit(new TailwindCopyDialog(\r\n          this.notification\r\n        ).getNotification())\r\n      }).catch(e => {\r\n        this.notification.emit({\r\n          message: `An error occurred while copying to the clipboard\\n\\n${e}`,\r\n          actions: []\r\n        })\r\n      })\r\n    })\r\n\r\n    const tailwindFileEmitter = new EventEmitter()\r\n    tailwindFileEmitter.subscribe(() => {\r\n      const tailwind = PaletteExporter.exportTailwindFile(this.palette)\r\n      const blob = new Blob([tailwind], {type: 'text/javascript'})\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = 'tailwind.colors.js'\r\n      a.click()\r\n\r\n      this.notification.emit(new TailwindFileDialog(\r\n        this.notification\r\n      ).getNotification())\r\n    })\r\n\r\n    return {\r\n      message: `Do you want to copy the colors to your existing ${ToUnicodeVariantUtil.toUnicodeVariant('tailwind.config.js', 'm')} or create an extra file only for your palette?`,\r\n      actions: [{\r\n        text: 'Copy',\r\n        title: 'Copy content in existing file',\r\n        action: tailwindCopyEmitter\r\n      }, {\r\n        text: 'File',\r\n        title: 'Download a new file',\r\n        action: tailwindFileEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "{ message: string; actions: {}; }",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindFileDialog",
            "id": "class-TailwindFileDialog-b7f8a98b9543a9864fcb1d0a32cc6ebf6eb936d0a53d840640116918f37c19190680b4417886b300e6950249b71ae15c72a4f3562532543690531c382b6a018e",
            "file": "src/app/dialogs/tailwind-file.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindFileDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://tailwindcss.com/docs/customizing-colors#using-the-default-colors', '_blank')\r\n    })\r\n\r\n    return {\r\n      message: 'Move the downloaded tailwind.colors.js file to the root of your project. ' +\r\n        `Then import the colors in your ${ToUnicodeVariantUtil.toUnicodeVariant('tailwind.config.js', 'm')} file like:\\n` +\r\n        ToUnicodeVariantUtil.toUnicodeVariant('colors: require(\\'./tailwind.colors\\'),', 'm') + '\\n\\n' +\r\n        'Check TailwindsCSS\\'s documentation for further instructions.',\r\n      actions: [{\r\n        text: 'Read more',\r\n        title: 'Open documentation',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToUnicodeVariantUtil",
            "id": "class-ToUnicodeVariantUtil-1a4ba72ff6ec128b8a996fd92500851885286f3ac1c8c259da7992dd4a6be92447eb62e61443f273036d21c085ccff04a58ddb3039ce03eec81f81097e753c37",
            "file": "src/app/utils/to-unicode-variant.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ToUnicodeVariantUtil {\r\n\r\n  static offsets: any = {\r\n    m: [0x1d670, 0x1d7f6],\r\n    b: [0x1d400, 0x1d7ce],\r\n    i: [0x1d434, 0x00030],\r\n    bi: [0x1d468, 0x00030],\r\n    c: [0x0001d49c, 0x00030],\r\n    bc: [0x1d4d0, 0x00030],\r\n    g: [0x1d504, 0x00030],\r\n    d: [0x1d538, 0x1d7d8],\r\n    bg: [0x1d56c, 0x00030],\r\n    s: [0x1d5a0, 0x1d7e2],\r\n    bs: [0x1d5d4, 0x1d7ec],\r\n    is: [0x1d608, 0x00030],\r\n    bis: [0x1d63c, 0x00030],\r\n    o: [0x24B6, 0x2460],\r\n    on: [0x0001f150, 0x2460],\r\n    p: [0x249c, 0x2474],\r\n    q: [0x1f130, 0x00030],\r\n    qn: [0x0001F170, 0x00030],\r\n    w: [0xff21, 0xff10],\r\n    u: [0x2090, 0xff10]\r\n  }\r\n\r\n  static variantOffsets: any = {\r\n    'monospace': 'm',\r\n    'bold' : 'b',\r\n    'italic' : 'i',\r\n    'bold italic' : 'bi',\r\n    'script': 'c',\r\n    'bold script': 'bc',\r\n    'gothic': 'g',\r\n    'gothic bold': 'bg',\r\n    'doublestruck': 'd',\r\n    'sans': 's',\r\n    'bold sans' : 'bs',\r\n    'italic sans': 'is',\r\n    'bold italic sans': 'bis',\r\n    'parenthesis': 'p',\r\n    'circled': 'o',\r\n    'circled negative': 'on',\r\n    'squared': 'q',\r\n    'squared negative': 'qn',\r\n    'fullwidth': 'w'\r\n  }\r\n\r\n  //special characters (absolute values)\r\n  static special: any = {\r\n    m: {\r\n      ' ': 0x2000,\r\n      '-': 0x2013\r\n    },\r\n    i: {\r\n      'h': 0x210e\r\n    },\r\n    g: {\r\n      'C': 0x212d,\r\n      'H': 0x210c,\r\n      'I': 0x2111,\r\n      'R': 0x211c,\r\n      'Z': 0x2128\r\n    },\r\n    d: {\r\n      'C': 0x2102,\r\n      'H': 0x210D,\r\n      'N': 0x2115,\r\n      'P': 0x2119,\r\n      'Q': 0x211A,\r\n      'R': 0x211D,\r\n      'Z': 0x2124\r\n    },\r\n    o: {\r\n      '0': 0x24EA,\r\n      '1': 0x2460,\r\n      '2': 0x2461,\r\n      '3': 0x2462,\r\n      '4': 0x2463,\r\n      '5': 0x2464,\r\n      '6': 0x2465,\r\n      '7': 0x2466,\r\n      '8': 0x2467,\r\n      '9': 0x2468,\r\n    },\r\n    on: {},\r\n    p: {},\r\n    q: {},\r\n    qn: {},\r\n    w: {}\r\n  }\r\n\r\n  static chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\r\n\r\n  static numbers = '0123456789'\r\n\r\n\r\n  public static toUnicodeVariant(str: string, variant: string, flags?: string) {\r\n    if (Object.keys(this.special.p).length === 0) {\r\n      //support for parenthesized latin letters small cases\r\n      //support for full width latin letters small cases\r\n      //support for circled negative letters small cases\r\n      //support for squared letters small cases\r\n      //support for squared letters negative small cases\r\n      ['p', 'w', 'on', 'q', 'qn'].forEach(t => {\r\n        for (let i = 97; i <= 122; i++) {\r\n          this.special[t][String.fromCharCode(i)] = this.offsets[t][0] + (i-97)\r\n        }\r\n      })\r\n    }\r\n\r\n    const type = this.getType(variant)\r\n    const underline = this.getFlag('underline|u', flags)\r\n    const strike = this.getFlag('strike|s', flags)\r\n    let result = ''\r\n\r\n    for (let c of str) {\r\n      let index\r\n      if (this.special[type] && this.special[type][c]) c = String.fromCodePoint(this.special[type][c])\r\n      if (type && (index = this.chars.indexOf(c)) > -1) {\r\n        result += String.fromCodePoint(index + this.offsets[type][0])\r\n      } else if (type && (index = this.numbers.indexOf(c)) > -1) {\r\n        result += String.fromCodePoint(index + this.offsets[type][1])\r\n      } else {\r\n        result += c\r\n      }\r\n      if (underline) result += '\\u0332' // add combining underline\r\n      if (strike) result += '\\u0336' // add combining strike\r\n    }\r\n    return result\r\n  }\r\n\r\n  private static getType(variant: string) {\r\n    if (this.variantOffsets[variant])\r\n      return this.variantOffsets[variant]\r\n    if (this.offsets[variant])\r\n      return variant\r\n    return 'm' //monospace as default\r\n  }\r\n\r\n  private static getFlag(flag: string, flags?: string) {\r\n    if (!flags)\r\n      return false\r\n    return flag.split('|').some(f => flags.split(',').indexOf(f) > -1)\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "chars",
                    "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "numbers",
                    "defaultValue": "'0123456789'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "offsets",
                    "defaultValue": "{\r\n    m: [0x1d670, 0x1d7f6],\r\n    b: [0x1d400, 0x1d7ce],\r\n    i: [0x1d434, 0x00030],\r\n    bi: [0x1d468, 0x00030],\r\n    c: [0x0001d49c, 0x00030],\r\n    bc: [0x1d4d0, 0x00030],\r\n    g: [0x1d504, 0x00030],\r\n    d: [0x1d538, 0x1d7d8],\r\n    bg: [0x1d56c, 0x00030],\r\n    s: [0x1d5a0, 0x1d7e2],\r\n    bs: [0x1d5d4, 0x1d7ec],\r\n    is: [0x1d608, 0x00030],\r\n    bis: [0x1d63c, 0x00030],\r\n    o: [0x24B6, 0x2460],\r\n    on: [0x0001f150, 0x2460],\r\n    p: [0x249c, 0x2474],\r\n    q: [0x1f130, 0x00030],\r\n    qn: [0x0001F170, 0x00030],\r\n    w: [0xff21, 0xff10],\r\n    u: [0x2090, 0xff10]\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "special",
                    "defaultValue": "{\r\n    m: {\r\n      ' ': 0x2000,\r\n      '-': 0x2013\r\n    },\r\n    i: {\r\n      'h': 0x210e\r\n    },\r\n    g: {\r\n      'C': 0x212d,\r\n      'H': 0x210c,\r\n      'I': 0x2111,\r\n      'R': 0x211c,\r\n      'Z': 0x2128\r\n    },\r\n    d: {\r\n      'C': 0x2102,\r\n      'H': 0x210D,\r\n      'N': 0x2115,\r\n      'P': 0x2119,\r\n      'Q': 0x211A,\r\n      'R': 0x211D,\r\n      'Z': 0x2124\r\n    },\r\n    o: {\r\n      '0': 0x24EA,\r\n      '1': 0x2460,\r\n      '2': 0x2461,\r\n      '3': 0x2462,\r\n      '4': 0x2463,\r\n      '5': 0x2464,\r\n      '6': 0x2465,\r\n      '7': 0x2466,\r\n      '8': 0x2467,\r\n      '9': 0x2468,\r\n    },\r\n    on: {},\r\n    p: {},\r\n    q: {},\r\n    qn: {},\r\n    w: {}\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "variantOffsets",
                    "defaultValue": "{\r\n    'monospace': 'm',\r\n    'bold' : 'b',\r\n    'italic' : 'i',\r\n    'bold italic' : 'bi',\r\n    'script': 'c',\r\n    'bold script': 'bc',\r\n    'gothic': 'g',\r\n    'gothic bold': 'bg',\r\n    'doublestruck': 'd',\r\n    'sans': 's',\r\n    'bold sans' : 'bs',\r\n    'italic sans': 'is',\r\n    'bold italic sans': 'bis',\r\n    'parenthesis': 'p',\r\n    'circled': 'o',\r\n    'circled negative': 'on',\r\n    'squared': 'q',\r\n    'squared negative': 'qn',\r\n    'fullwidth': 'w'\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFlag",
                    "args": [
                        {
                            "name": "flag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "flag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getType",
                    "args": [
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toUnicodeVariant",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9c387bf6b95880168851fbf53b82a4f42255e47592ffa3268264c166a54864a8968a4c7f08cafa5d32eefb29cbf50725d4a16e63cbbf7e2bd90568d0e5fd3637",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "editColor",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Palette",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "shade",
                    "defaultValue": "Shade.generateRandomShade()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "defaultValue": "'tailwind-color-generator'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "version",
                    "defaultValue": "environment.version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd color to the current palette.\nIf no palette exists, a new one is created.\n",
                    "description": "<p>Add color to the current palette.\nIf no palette exists, a new one is created.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1928,
                                "end": 1933,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1922,
                                "end": 1927,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "randomPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet and display a new random palette with 5 - 10 colors.\n",
                    "description": "<p>Set and display a new random palette with 5 - 10 colors.</p>\n"
                },
                {
                    "name": "removePalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove the current palette from logic.\nThe palette can be restored if it was saved in local storage.\n",
                    "description": "<p>Remove the current palette from logic.\nThe palette can be restored if it was saved in local storage.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter} from '@angular/core';\r\nimport {Palette} from \"./models/palette.model\";\r\nimport {Shade} from \"./models/shade.model\";\r\nimport {Color} from \"./models/color.model\";\r\nimport {environment} from \"../environments/environment\";\r\nimport {StorageService} from \"./services/storage.service\";\r\n// @ts-ignore\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {ColorService} from \"./services/color.service\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n\r\n  title = 'tailwind-color-generator'\r\n  version = environment.version\r\n  dark\r\n\r\n  shade: Shade = Shade.generateRandomShade()\r\n  color: Color\r\n  palette: Palette\r\n\r\n  editColor = new EventEmitter<Color>()\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    public colorService: ColorService\r\n  ) {\r\n    // Redirect to https if server served / browser fetched with http\r\n    if (environment.production && window.location.href.startsWith('http://'))\r\n      window.location.href = 'https://' + window.location.href.substring(6)\r\n\r\n    // Load theme from local storage and subscribe to changes\r\n    this.dark = storage.loadTheme()\r\n    storage.darkEmitter.subscribe(d => this.dark = d.valueOf())\r\n\r\n    // Load palette if saved in local storage\r\n    this.palette = storage.loadPalette()\r\n\r\n    // Load random color for editor\r\n    this.color = Color.generateRandomColor()\r\n  }\r\n\r\n  /**\r\n   * Set and display a new random palette with 5 - 10 colors.\r\n   */\r\n  randomPalette() {\r\n    this.palette = Palette.generateRandomPalette(Math.floor(5 + Math.random() * 5))\r\n  }\r\n\r\n  /**\r\n   * Remove the current palette from logic.\r\n   * The palette can be restored if it was saved in local storage.\r\n   */\r\n  removePalette() {\r\n    this.palette = new Palette('Palette', uuidv4())\r\n  }\r\n\r\n  /**\r\n   * Add color to the current palette.\r\n   * If no palette exists, a new one is created.\r\n   * @param color\r\n   */\r\n  addColor(color: Color | undefined) {\r\n    if (color) {\r\n      if (!this.palette)\r\n        this.palette = new Palette('Palette', uuidv4())\r\n      this.palette.addColor(color)\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\r\n  class=\"min-h-screen grid grid-rows-site content-between py-6\r\n         text-gray-900 bg-gray-50 dark:text-gray-100 dark:bg-gray-900 transition-colors duration-200\"\r\n>\r\n  <header class=\"w-full flex gap-4 px-8 items-center\">\r\n    <h1>Color Palette Generator</h1>\r\n\r\n    <nav class=\"grow\">\r\n      <div class=\"mx-auto w-fit\">\r\n        <ul class=\"flex flex-wrap gap-4\r\n                   font-medium text-gray-700 dark:text-gray-200\">\r\n          <li>\r\n            <a class=\"inline-block py-2 px-4\r\n                      text-primary-600 bg-primary-200 dark:text-primary-200 dark:bg-primary-800 rounded\r\n                      cursor-pointer transition-colors duration-400\">\r\n              Edit\r\n            </a>\r\n          </li>\r\n\r\n          <li>\r\n            <a class=\"inline-block py-2 px-4\r\n                      hover:text-gray-900 hover:bg-gray-100 dark:hover:text-gray-50 dark:hover:bg-gray-800 rounded\r\n                      cursor-pointer transition-colors duration-400\">\r\n              Preview\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n\r\n    <light-switch\r\n      [dark]=\"dark\"\r\n    >\r\n    </light-switch>\r\n  </header>\r\n\r\n\r\n  <main>\r\n    <palette-viewer\r\n      [palette]=\"palette\" [dark]=\"dark\"\r\n    >\r\n    </palette-viewer>\r\n  </main>\r\n\r\n\r\n  <footer\r\n    class=\"flex gap-4 flex-col sm:flex-row px-8 items-center justify-between\r\n           text-center w-full mt-10\"\r\n  >\r\n    <a\r\n      href=\"https://github.com/pawcoding/tailwind-color-generator\"\r\n      rel=\"noreferrer noopener\"\r\n      target=\"_blank\"\r\n      title=\"View source code on GitHub\"\r\n    >\r\n      View on GitHub\r\n    </a>\r\n\r\n    <span\r\n      class=\"cursor-default\"\r\n    >\r\n      Version {{version}}\r\n    </span>\r\n\r\n    <a\r\n      href=\"https://pawcode.de\"\r\n      target=\"_blank\"\r\n      title=\"Created by pawcode Development\"\r\n    >\r\n      <img\r\n        class=\"inline h-8\"\r\n        alt=\"pawcode&nbsp;Development\"\r\n        [src]=\"'assets/pawcode-' + (dark ? 'light' : 'dark') + '.svg'\"\r\n      >\r\n    </a>\r\n  </footer>\r\n\r\n  <!--main class=\"px-10\">\r\n    <!- Color Editor ->\r\n    <color-editor\r\n      (addColor)=\"addColor($event)\"\r\n    ></color-editor>\r\n\r\n    <!- Display color palette ->\r\n    <palette-viewer\r\n      *ngIf=\"palette\" (onRemove)=\"removePalette()\"\r\n      [palette]=\"palette\" [dark]=\"dark\"\r\n    ></palette-viewer>\r\n  </main>\r\n\r\n  <custom-dialog\r\n    class=\"fixed top-0 left-0\"\r\n  ></custom-dialog>\r\n\r\n  <notification\r\n    class=\"fixed bottom-0 right-0\"\r\n  ></notification-->\r\n</div>\r\n"
        },
        {
            "name": "ColorEditorComponent",
            "id": "component-ColorEditorComponent-98054211550f85caa9c32677e086f466d061909b9a657e1e44e86c860381560121bd384a0946aab66d51109d054c17532fb330468b235c204bc7b2306b18b954",
            "file": "src/app/components/color-editor/color-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-editor",
            "styleUrls": [
                "./color-editor.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./color-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addColor",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "state",
                    "defaultValue": "EditorState.ADD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EditorState",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "changeShade",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copyToClipboard",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCopy a shades hex to clipboard.\n",
                    "description": "<p>Copy a shades hex to clipboard.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3270,
                                "end": 3275,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3264,
                                "end": 3269,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hueToWheel",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "releaseShade",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateColor",
                    "args": [
                        {
                            "name": "type",
                            "type": "UpdateType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate current shade. The property with type is changed to the new value.\n",
                    "description": "<p>Update current shade. The property with type is changed to the new value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1494,
                                "end": 1498,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "UpdateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1488,
                                "end": 1493,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Property to change</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1531,
                                "end": 1536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1525,
                                "end": 1530,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Value to change to</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the name of the current color.\n",
                    "description": "<p>Update the name of the current color.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2802,
                                "end": 2806,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2796,
                                "end": 2801,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate all css properties to the values of the current selected shade.\n",
                    "description": "<p>Update all css properties to the values of the current selected shade.</p>\n"
                },
                {
                    "name": "wheelToHue",
                    "args": [
                        {
                            "name": "wheel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "wheel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {Color} from \"../../models/color.model\";\r\nimport {Shade} from \"../../models/shade.model\";\r\nimport {ChangeType, ColorService} from \"../../services/color.service\";\r\nimport {ToUnicodeVariantUtil} from \"../../utils/to-unicode-variant.util\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\n\r\n@Component({\r\n  selector: 'color-editor',\r\n  templateUrl: './color-editor.component.html',\r\n  styleUrls: ['./color-editor.component.css']\r\n})\r\nexport class ColorEditorComponent implements OnInit {\r\n\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  addColor = new EventEmitter<Color>()\r\n\r\n  shade: Shade\r\n  color: Color\r\n  state: EditorState = EditorState.ADD\r\n\r\n  constructor(\r\n    public colorService: ColorService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    this.color = this.colorService.getColor()\r\n    this.shade = this.color.getShade(500)\r\n\r\n    this.colorService.getColorChangeEmitter().subscribe(changeType => {\r\n      if (changeType !== ChangeType.ADJUST) {\r\n        this.color = this.colorService.getColor()\r\n        this.shade = this.color.getShade(500)\r\n        this.state = (changeType === ChangeType.RANDOM) ? EditorState.ADD : EditorState.EDIT\r\n      }\r\n\r\n      this.updateProperties()\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.updateProperties()\r\n  }\r\n\r\n  /**\r\n   * Update current shade. The property with type is changed to the new value.\r\n   * @param type Property to change\r\n   * @param value Value to change to\r\n   */\r\n  updateColor(type: UpdateType, value: string | number) {\r\n    if (type === UpdateType.HEX && isNaN(+value)) {\r\n      this.shade.setHEX(`${value}`, true)\r\n    } else if (!isNaN(+value)) {\r\n      value = parseInt(`${value}`)\r\n      if (type === UpdateType.HUE)\r\n        this.shade.setHSL(this.wheelToHue(value), this.shade.saturation, this.shade.luminosity, true)\r\n      else if (type === UpdateType.SATURATION)\r\n        this.shade.setHSL(this.shade.hue, value, this.shade.luminosity, true)\r\n      else if (type === UpdateType.LUMINOSITY)\r\n        this.shade.setHSL(this.shade.hue, this.shade.saturation, 100 - value, true)\r\n    }\r\n\r\n    this.colorService.adjustShade()\r\n  }\r\n\r\n  /**\r\n   * Update all css properties to the values of the current selected shade.\r\n   */\r\n  updateProperties() {\r\n    document.documentElement.style.setProperty('--selected-hex', this.shade.hex)\r\n    document.documentElement.style.setProperty('--selected-hue', String(this.shade.hue))\r\n    document.documentElement.style.setProperty('--selected-saturation', this.shade.saturation + \"%\")\r\n    document.documentElement.style.setProperty('--selected-luminosity', this.shade.luminosity + \"%\")\r\n  }\r\n\r\n  /**\r\n   * Update the name of the current color.\r\n   * @param name\r\n   */\r\n  updateName(name: string) {\r\n    this.colorService.updateColorName(name)\r\n  }\r\n\r\n  changeShade(shade: Shade) {\r\n    this.shade = shade\r\n    this.updateProperties()\r\n  }\r\n\r\n  releaseShade(shade: Shade, $event: MouseEvent) {\r\n    $event.preventDefault()\r\n\r\n    if (this.color.shades.filter(s => s.fixed).length > 1) {\r\n      shade.fixed = false\r\n      this.colorService.adjustShade()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy a shades hex to clipboard.\r\n   * @param shade\r\n   */\r\n  copyToClipboard(shade: Shade) {\r\n    navigator.clipboard.writeText(shade.hex).then(() => {\r\n      this.notificationService.notification.emit(`Copied \"${ToUnicodeVariantUtil.toUnicodeVariant(shade.hex, 'm')}\" to your clipboard`)\r\n    }).catch(e => {\r\n      console.error('Error while copying to clipboard', e)\r\n    })\r\n  }\r\n\r\n  wheelToHue(wheel: number) {\r\n    let newHue\r\n    if (wheel < 120)\r\n      newHue = .5 * wheel\r\n    else if (wheel < 180)\r\n      newHue = wheel + 300\r\n    else if (wheel < 240)\r\n      newHue = 2 * wheel + 120\r\n    else\r\n      newHue = wheel\r\n\r\n    return newHue % 360\r\n  }\r\n\r\n  hueToWheel(hue: number) {\r\n    let wheel\r\n    if (hue < 60)\r\n      wheel = 2 * hue\r\n    else if (hue < 120)\r\n      wheel = hue + 60\r\n    else if (hue < 240)\r\n      wheel = .5 * hue + 120\r\n    else\r\n      wheel = hue\r\n\r\n    return wheel % 360\r\n  }\r\n\r\n}\r\n\r\nenum UpdateType {\r\n  HEX, HUE, SATURATION, LUMINOSITY\r\n}\r\n\r\nenum EditorState {\r\n  ADD, EDIT\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\r\n  @apply block w-full;\r\n}\r\n\r\ninput[type=range], input[type=color] {\r\n  @apply w-full outline-none appearance-none cursor-pointer;\r\n  -webkit-appearance: none;\r\n}\r\n\r\ninput[type=range] {\r\n  @apply h-1/2;\r\n}\r\n\r\ninput[type=range]::-webkit-slider-thumb {\r\n  @apply w-6 h-5/6 min-h-10 cursor-grab appearance-none outline-none rounded shadow hover:shadow-md transition-shadow duration-200;\r\n  background-color: var(--selected-hex);\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n}\r\n\r\ninput[type=range]::-moz-range-thumb {\r\n  @apply w-6 h-5/6 min-h-10 cursor-grab outline-none border-none rounded shadow hover:shadow-md transition-shadow duration-200;\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\ninput[type=color]::-webkit-color-swatch-wrapper {\r\n  @apply p-0;\r\n}\r\n\r\ninput[type=color]::-webkit-color-swatch {\r\n  @apply border-none h-full;\r\n}\r\n\r\n#hexInput {\r\n  @apply h-full max-h-8 sm:max-h-full;\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\n#hueInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(0, var(--selected-saturation), var(--selected-luminosity)) 0%,\r\n  hsl(60, var(--selected-saturation), var(--selected-luminosity)) 33.3%,\r\n  hsl(120, var(--selected-saturation), var(--selected-luminosity)) 50%,\r\n  hsl(240, var(--selected-saturation), var(--selected-luminosity)) 66.6%,\r\n  hsl(360, var(--selected-saturation), var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#saturationInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), 0%, var(--selected-luminosity)) 0%,\r\n  hsl(var(--selected-hue), 100%, var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#luminosityInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 100%) 0%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 50%) 50%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 0%) 100%);\r\n}\r\n",
                    "styleUrl": "./color-editor.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\" class=\"max-w-5xl mx-auto mb-8\">\r\n  <article\r\n    class=\"flex gap-4 p-4 rounded-xl shadow bg-neutral-300 dark:bg-neutral-700 text-neutral-900 dark:text-neutral-100 transition-colors duration-200\"\r\n  >\r\n\r\n    <!-- Edit Color -->\r\n    <section class=\"grow-2 grid grid-rows-7 sm:grid-rows-5 gap-2 items-center\">\r\n\r\n      <!-- Edit Hex -->\r\n      <input\r\n        type=\"color\"\r\n        title=\"Select a shade\"\r\n        id=\"hexInput\" #hexInput\r\n        class=\"overflow-clip rounded-xl shadow hover:shadow-md transition-shadow duration-200\"\r\n        [value]=\"shade.hex\"\r\n        (input)=\"updateColor(0, hexInput.value)\"\r\n      >\r\n\r\n      <!-- Edit Hue -->\r\n      <input\r\n        type=\"range\"\r\n        title=\"Adjust the hue\"\r\n        id=\"hueInput\" #hueInput\r\n        min=0 max=360\r\n        [value]=\"hueToWheel(shade.hue)\"\r\n        (input)=\"updateColor(1, hueInput.value)\"\r\n      >\r\n\r\n      <!-- Edit Saturation -->\r\n      <input\r\n        type=\"range\"\r\n        title=\"Adjust the saturation\"\r\n        id=\"saturationInput\" #saturationInput\r\n        min=0 max=100\r\n        [value]=\"shade.saturation\"\r\n        (input)=\"updateColor(2, saturationInput.value)\"\r\n      >\r\n\r\n      <!-- Edit Luminosity -->\r\n      <input\r\n        type=\"range\"\r\n        title=\"Adjust the luminosity\"\r\n        id=\"luminosityInput\" #luminosityInput\r\n        min=0 max=100\r\n        [value]=\"100 - shade.luminosity\"\r\n        (input)=\"updateColor(3, luminosityInput.value)\"\r\n      >\r\n\r\n      <div class=\"flex gap-2 flex-col sm:flex-row row-span-3 sm:row-span-1 h-full\">\r\n        <!-- Edit Name -->\r\n        <input\r\n          type=\"text\"\r\n          title=\"Give your color a name\"\r\n          id=\"nameInput\" #nameInput\r\n          class=\"text-black bg-neutral-200 dark:bg-neutral-500 overflow-clip rounded-xl shadow hover:shadow-md focus:ring-0 focus:border-none transition-all duration-200\"\r\n          placeholder=\"Color Name\"\r\n          [value]=\"color.name\"\r\n          (change)=\"updateName(nameInput.value)\"\r\n        >\r\n\r\n        <!-- Add Color to Palette -->\r\n        <input\r\n          type=\"button\"\r\n          class=\"cursor-pointer p-2 overflow-clip rounded-xl shadow hover:shadow-md font-medium bg-neutral-400 dark:bg-neutral-600 transition-all duration-200\"\r\n          [title]=\"state === 0 ? 'Add current color to palette' : 'Replace existing color in palette'\"\r\n          [value]=\"state === 0 ? 'Add to palette' : 'Replace existing color'\"\r\n          (click)=\"addColor.emit(color)\"\r\n        >\r\n\r\n        <!-- Generate new random color -->\r\n        <input\r\n          type=\"button\"\r\n          title=\"Generate new random color\"\r\n          value=\"Random Color\"\r\n          class=\"cursor-pointer p-2 overflow-clip rounded-xl shadow hover:shadow-md font-medium bg-neutral-400 dark:bg-neutral-600 transition-all duration-200 \"\r\n          (click)=\"colorService.randomColor()\"\r\n        >\r\n      </div>\r\n    </section>\r\n\r\n    <!-- Preview Color -->\r\n    <section class=\"grow grid grid-cols-1 sm:grid-cols-2 text-center overflow-clip rounded-xl shadow cursor-default\">\r\n      <span\r\n        *ngFor=\"let shadeToShow of color.shades\"\r\n        [ngStyle]=\"{\r\n          'background-color': shadeToShow.hex,\r\n          'color': color.shades[shadeToShow.brightness > 51 ? 9 : 0].hex,\r\n          'font-weight': shadeToShow.fixed ? 'bold' : 'inherit',\r\n          'text-decoration': shadeToShow === shade ? 'underline' : 'inherit'\r\n        }\"\r\n        class=\"block w-full text-center text-sm md:text-base lg:text-xl py-2 sm:py-4 px-2 cursor-pointer\"\r\n        title=\"Edit this shade&#10;Rightclick: Release this shade\"\r\n        (click)=\"changeShade(shadeToShow)\"\r\n        (contextmenu)=\"releaseShade(shadeToShow, $event)\"\r\n      >\r\n        {{shadeToShow.hex}}\r\n      </span>\r\n    </section>\r\n  </article>\r\n</div>\r\n"
        },
        {
            "name": "ColorViewerComponent",
            "id": "component-ColorViewerComponent-87143b063b4578394656ff6e3eedd085fe6357f19e16925ffc6d252c3e8e04acbf37677e0cac0d83d8f2b15562796e3672351d0a8e1413e1502718739e532412",
            "file": "src/app/components/color-viewer/color-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./color-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Color",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "copyToClipboard",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCopy a shades hex to clipboard.\n",
                    "description": "<p>Copy a shades hex to clipboard.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 910,
                                "end": 915,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 904,
                                "end": 909,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {Color} from \"../../models/color.model\";\r\nimport {ColorService} from \"../../services/color.service\";\r\nimport {Shade} from \"../../models/shade.model\";\r\nimport {ToUnicodeVariantUtil} from \"../../utils/to-unicode-variant.util\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\n\r\n@Component({\r\n  selector: 'color-viewer',\r\n  templateUrl: './color-viewer.component.html',\r\n})\r\nexport class ColorViewerComponent implements OnInit {\r\n\r\n  @Input()\r\n  color: Color\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Color>()\r\n\r\n  constructor(\r\n    public colorService: ColorService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    this.color = Color.generateRandomColor()\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Copy a shades hex to clipboard.\r\n   * @param shade\r\n   */\r\n  copyToClipboard(shade: Shade) {\r\n    navigator.clipboard.writeText(shade.hex).then(() => {\r\n      this.notificationService.notification.emit(`Copied \"${ToUnicodeVariantUtil.toUnicodeVariant(shade.hex, 'm')}\" to your clipboard`)\r\n    }).catch(e => {\r\n      console.error('Error while copying to clipboard', e)\r\n    })\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\">\r\n  <article\r\n    class=\"overflow-clip my-8 items-center cursor-default\r\n           grid grid-cols-2 sm:grid-cols-5 lg:grid-cols-10 grid-areas-color-square sm:grid-areas-color-semi lg:grid-areas-color-wide\"\r\n  >\r\n    <!-- Name of the color -->\r\n    <h3 class=\"grid-in-name py-4\">\r\n      {{color.name}}\r\n    </h3>\r\n\r\n    <!-- Action Buttons -->\r\n    <span\r\n      class=\"grid-in-button flex gap-4 h-full justify-end items-center\"\r\n    >\r\n      <img\r\n        class=\"icon\"\r\n        src=\"/assets/icons/edit.svg\"\r\n        alt=\"Edit color\"\r\n        title=\"Edit color\"\r\n        (click)=\"colorService.loadColor(color)\"\r\n      >\r\n\r\n      <img\r\n        class=\"icon\"\r\n        src=\"/assets/icons/delete.svg\"\r\n        alt=\"Remove from palette\"\r\n        title=\"Remove color from palette\"\r\n        (click)=\"onRemove.emit(color)\"\r\n      >\r\n    </span>\r\n\r\n    <!-- Display all shades -->\r\n    <span\r\n      *ngFor=\"let shade of color.shades; index as i\"\r\n      title=\"Copy hex to clipboard\"\r\n      class=\"block w-full p-4\r\n             text-lg font-semibold cursor-pointer\"\r\n      [class]=\"(i === 0 ? 'rounded-l' : (i === color.shades.length - 1 ? 'rounded-r' : ''))\"\r\n      [ngStyle]=\"{\r\n        'background-color': shade.hex,\r\n        'color': color.shades[shade.brightness > 51 ? 9 : 0].hex\r\n      }\"\r\n      (click)=\"copyToClipboard(shade)\"\r\n    >\r\n      {{shade.index}}:\r\n      {{shade.hex.toUpperCase()}}\r\n    </span>\r\n  </article>\r\n</div>\r\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-23931b761aaf29f8b66d95c39906748df3b3e1ee9ca2a8b9ba4e8fa208331546c0822b04bd55a7cb1068b24675c16000e82c7dc35522987d7ad1108377bad123",
            "file": "src/app/components/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dialog | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport { NotificationService} from \"../../services/notification.service\";\nimport {Dialog} from \"../../interfaces/dialog.interface\";\n\n@Component({\n  selector: 'custom-dialog',\n  templateUrl: './dialog.component.html',\n})\nexport class DialogComponent implements OnInit {\n\n  @Input()\n  dark = false\n\n  content: Dialog | undefined\n\n  constructor(\n    private notificationService: NotificationService\n  ) {\n    notificationService.dialog\n      .subscribe(dialogContent => this.content = dialogContent)\n  }\n\n  ngOnInit(): void {\n  }\n\n  closeNotification() {\n    this.notificationService.dialog.emit(undefined)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div tabindex=\"-1\" *ngIf=\"content\" (click)=\"closeNotification()\"\n     class=\"flex overflow-y-auto overflow-x-hidden z-40 h-modal h-screen w-screen justify-center items-center bg-black/50\" [class]=\"dark ? 'dark' : ''\" aria-hidden=\"true\"\n>\n  <div class=\"relative p-4 w-full max-w-2xl\" (click)=\"$event.stopPropagation()\">\n    <article class=\"relative bg-neutral-300 text-neutral-900 rounded-xl shadow dark:bg-neutral-600 dark:text-neutral-200 p-6\">\n\n      <button type=\"button\" (click)=\"closeNotification()\"\n              title=\"Close dialog\"\n              class=\"absolute top-3 right-2.5 bg-transparent hover:bg-neutral-200 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-neutral-700 transition-colors duration-200\">\n        <svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path>\n        </svg>\n        <span class=\"sr-only\">Close dialog</span>\n      </button>\n\n      <div class=\"mt-4 text-center\">\n        <p class=\"text-lg font-normal py-2 lg:py-3\"\n            [innerText]=\"content.message\">\n        </p>\n\n        <button\n          *ngFor=\"let action of content.actions\"\n          type=\"button\"\n          class=\"mt-2 mx-2 bg-neutral-400 focus:ring-0 focus:outline-none rounded-lg shadow hover:shadow-lg text-sm font-medium px-5 py-2.5 focus:z-10 dark:bg-neutral-700 transition-all duration-200\"\n          [title]=\"action.title\"\n          (click)=\"action.action.emit(undefined)\"\n        >\n          {{action.text}}\n        </button>\n      </div>\n    </article>\n  </div>\n</div>\n"
        },
        {
            "name": "LightSwitchComponent",
            "id": "component-LightSwitchComponent-821e07e65171b849b3d7c9458c3a2f7bc12d4f3c86759f37bc6ec3dfdb3f8ec9ac237520d29c666d37dde420242de10f0a797ba1b8ad13e49d257fdec30c357b",
            "file": "src/app/components/light-switch/light-switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "light-switch",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./light-switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle between light and dark theme.\n",
                    "description": "<p>Toggle between light and dark theme.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {StorageService} from \"../../services/storage.service\";\r\n\r\n@Component({\r\n  selector: 'light-switch',\r\n  templateUrl: './light-switch.component.html',\r\n})\r\nexport class LightSwitchComponent implements OnInit {\r\n\r\n  @Input()\r\n  dark: boolean | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Toggle between light and dark theme.\r\n   */\r\n  toggleTheme(): void {\r\n    this.dark = this.storage.toggleTheme(!this.dark)\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label\r\n  for=\"light-switch\"\r\n  class=\"inline-flex relative items-center cursor-pointer\"\r\n  title=\"Toggle the lights\"\r\n>\r\n  <input\r\n    type=\"checkbox\"\r\n    id=\"light-switch\"\r\n    class=\"sr-only peer\"\r\n    [checked]=\"dark\"\r\n    (change)=\"toggleTheme()\"\r\n  >\r\n\r\n  <div class=\"w-14 h-7 rounded-full\r\n              bg-gray-100 peer-checked:bg-gray-800 transition-all duration-200\r\n              peer-focus:outline-none peer peer-checked:after:translate-x-full\r\n              after:content-[url('/assets/icons/sun.svg')] peer-checked:after:content-[url('/assets/icons/moon.svg')]\r\n              after:absolute after:top-0.5 after:left-[4px]\r\n              after:rounded-full after:h-6 after:w-6\r\n              after:transition-all after:duration-200\"\r\n  ></div>\r\n</label>\r\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-d4b2656dfcfac0b0cfc9efa846c5ff6b90b2b57180123ed63de4b7c8013e5f503e9dad80feca2d58de2483e2db6959e122f140b925487ab938c61211f87b56ad",
            "file": "src/app/components/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "notification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {NotificationService} from \"../../services/notification.service\";\n\n@Component({\n  selector: 'notification',\n  templateUrl: './notification.component.html',\n})\nexport class NotificationComponent implements OnInit {\n\n  @Input()\n  dark = false\n\n  message: string | undefined\n  timeout: number | undefined\n\n  constructor(\n    private notificationService: NotificationService\n  ) {\n    notificationService.notification\n      .subscribe(notification => {\n        this.message = notification\n\n        if (notification) {\n          clearTimeout(this.timeout)\n          this.timeout = setTimeout(() => {\n            this.closeNotification()\n          }, 5000)\n        } else {\n          clearTimeout(this.timeout)\n          this.timeout = undefined\n        }\n      })\n  }\n\n  ngOnInit(): void {\n  }\n\n  closeNotification() {\n    this.notificationService.notification.emit(undefined)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"message\" [class]=\"dark ? 'dark' : ''\" class=\"mb-6 mr-6 z-50\">\n  <article class=\"flex items-center p-4 w-full max-w-xs bg-neutral-200 rounded-lg shadow dark:bg-neutral-500 text-neutral-600 dark:text-neutral-100\" role=\"alert\">\n    <p class=\"mr-4 text-sm cursor-default\">\n      {{message}}\n    </p>\n\n    <button type=\"button\" (click)=\"closeNotification()\"\n            title=\"Close Notification\"\n            class=\"ml-auto -mx-1.5 -my-1.5 bg-transparent rounded-lg p-1.5 hover:bg-neutral-100 inline-flex h-8 w-8 dark:hover:bg-neutral-600 transition-all duration-200\" aria-label=\"Close\">\n      <span class=\"sr-only\">Close</span>\n      <svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg>\n    </button>\n  </article>\n</div>\n"
        },
        {
            "name": "PaletteViewerComponent",
            "id": "component-PaletteViewerComponent-f990bebbf46b9860dd5189bde35cdc6a9e47101dbe039bec42f5d9f17f72c36de83273d1df494d33cde34edbabbf5cd3725bf9b6d8dee206bca1ce9639beac53",
            "file": "src/app/components/palette-viewer/palette-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "palette-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./palette-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Palette",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "editingState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "editTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editTitle'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a random color to the palette.\n",
                    "description": "<p>Add a random color to the palette.</p>\n"
                },
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose editor for palette name and save the palette to local storage.\n",
                    "description": "<p>Close editor for palette name and save the palette to local storage.</p>\n"
                },
                {
                    "name": "exportPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for download and usage as plain CSS or Tailwind config.\n",
                    "description": "<p>Export a palette for download and usage as plain CSS or Tailwind config.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen editor for palette name.\n",
                    "description": "<p>Open editor for palette name.</p>\n"
                },
                {
                    "name": "removeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.\n",
                    "description": "<p>Remove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2122,
                                "end": 2127,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2116,
                                "end": 2121,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to remove from palette</p>\n"
                        }
                    ]
                },
                {
                    "name": "removePalette",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAsk user for confirmation an trigger onRemove event handler.\n",
                    "description": "<p>Ask user for confirmation an trigger onRemove event handler.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1156,
                                "end": 1162,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1150,
                                "end": 1155,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>MouseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "savePalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave current palette to local storage.\n",
                    "description": "<p>Save current palette to local storage.</p>\n"
                },
                {
                    "name": "sortPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrigger palette sorting.\n",
                    "description": "<p>Trigger palette sorting.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Palette} from \"../../models/palette.model\";\r\nimport {ToUnicodeVariantUtil} from \"../../utils/to-unicode-variant.util\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {StorageService} from \"../../services/storage.service\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {ExportDialog} from \"../../dialogs/export.dialog\";\r\n\r\n@Component({\r\n  selector: 'palette-viewer',\r\n  templateUrl: './palette-viewer.component.html',\r\n})\r\nexport class PaletteViewerComponent implements OnInit {\r\n\r\n  @Input()\r\n  palette: Palette\r\n\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Event>()\r\n\r\n  editingState = false\r\n\r\n  @ViewChild('editTitle')\r\n  editTitle: ElementRef<HTMLInputElement> | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    this.palette = Palette.generateRandomPalette(5)\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Ask user for confirmation an trigger onRemove event handler.\r\n   * @param $event MouseEvent\r\n   */\r\n  removePalette($event: MouseEvent) {\r\n    const removeEmitter = new EventEmitter()\r\n    removeEmitter.subscribe(() => {\r\n      this.notificationService.dialog.emit(undefined)\r\n      this.onRemove.emit($event)\r\n    })\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notificationService.dialog.emit(undefined)\r\n    })\r\n\r\n    this.notificationService.dialog.emit({\r\n      message: `Are you sure you want to delete the palette?\\nIt can ${ToUnicodeVariantUtil.toUnicodeVariant('not', 'bs')} be restored.`,\r\n      actions: [{\r\n        text: 'Cancel',\r\n        title: 'Cancel deletion',\r\n        action: closeEmitter\r\n      }, {\r\n        text: 'Delete',\r\n        title: 'Delete palette',\r\n        action: removeEmitter\r\n      }]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove color from palette and save the current palette to local storage.\r\n   * If color is not present in palette nothing happens.\r\n   * @param color Color to remove from palette\r\n   */\r\n  removeColor(color: Color) {\r\n    if (this.palette.removeColor(color))\r\n      this.savePalette()\r\n  }\r\n\r\n  /**\r\n   * Add a random color to the palette.\r\n   */\r\n  addRandomColor() {\r\n    this.palette.addColor(Color.generateRandomColor(), false)\r\n  }\r\n\r\n  /**\r\n   * Save current palette to local storage.\r\n   */\r\n  savePalette() {\r\n    this.storage.savePalette(this.palette)\r\n    this.notificationService.notification.emit('Palette saved')\r\n  }\r\n\r\n  /**\r\n   * Open editor for palette name.\r\n   */\r\n  openEditor() {\r\n    this.editingState = true\r\n    setTimeout(() => {\r\n      this.editTitle?.nativeElement.focus()\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Close editor for palette name and save the palette to local storage.\r\n   */\r\n  closeEditor() {\r\n    this.editingState = false\r\n    this.palette.title = this.editTitle?.nativeElement.value || 'Random'\r\n    this.savePalette()\r\n  }\r\n\r\n  /**\r\n   * Trigger palette sorting.\r\n   */\r\n  sortPalette() {\r\n    this.palette.sortColors()\r\n    this.notificationService.notification.emit('Palette sorted')\r\n  }\r\n\r\n  /**\r\n   * Export a palette for download and usage as plain CSS or Tailwind config.\r\n   */\r\n  exportPalette() {\r\n    this.notificationService.dialog\r\n      .emit(new ExportDialog(\r\n        this.notificationService.dialog,\r\n        this.palette\r\n      ).getNotification())\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\" class=\"max-w-5xl mx-auto\">\r\n  <section\r\n    class=\"p-4\"\r\n  >\r\n    <div class=\"grid grid-cols-3 items-center mb-6\">\r\n      <!-- Palette name -->\r\n      <h2 *ngIf=\"!editingState\" (click)=\"openEditor()\">{{palette.title}}</h2>\r\n\r\n      <!-- Palette name input -->\r\n      <input *ngIf=\"editingState\" type=\"text\"\r\n             [value]=\"palette.title\" #editTitle\r\n             placeholder=\"Palette title\"\r\n             (focusout)=\"closeEditor()\" (keydown.enter)=\"closeEditor()\"\r\n             class=\"bg-transparent p-0 text-xl font-bold\r\n              border-0 focus:border-b-neutral-700 dark:focus:border-b-neutral-200 border-b-2 focus:ring-0 transition-all duration-200\">\r\n\r\n      <!-- Action Buttons -->\r\n      <div class=\"flex gap-6 pr-6 justify-end col-span-2\">\r\n        <span title=\"Export palette\" (click)=\"exportPalette()\">\r\n          <img src=\"/assets/icons/download.svg\" alt=\"Export\" class=\"icon\">\r\n        </span>\r\n\r\n        <span title=\"Sort palette by hue\" (click)=\"sortPalette()\">\r\n          <img src=\"/assets/icons/sort.svg\" alt=\"Sort\" class=\"icon\">\r\n        </span>\r\n\r\n        <span title=\"Edit palette\" (click)=\"openEditor()\">\r\n          <img src=\"/assets/icons/edit.svg\" alt=\"Edit\" class=\"icon\">\r\n        </span>\r\n\r\n        <span title=\"Remove palette\" (click)=\"removePalette($event)\">\r\n          <img src=\"/assets/icons/delete.svg\" alt=\"Remove\" class=\"icon\">\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Display all colors -->\r\n    <color-viewer\r\n      *ngFor=\"let color of palette.colors\"\r\n      [color]=\"color\"\r\n      [dark]=\"dark\"\r\n      (onRemove)=\"removeColor(color)\"\r\n    ></color-viewer>\r\n\r\n    <!-- Add random color to palette -->\r\n    <button\r\n      (click)=\"addRandomColor()\"\r\n      class=\"\r\n          rounded-xl px-4 py-2 block mx-auto mt-4\r\n          bg-neutral-400 dark:bg-neutral-600 shadow hover:shadow-lg font-medium transition-all duration-200\"\r\n    >\r\n      Add random color\r\n    </button>\r\n  </section>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-8e1360d838ac9f30f127c726a7e6de0a5971b615ec68c0782a647b8ce2bd2ec910a887570496a76a39dff7d6f38ca1ac07159e269fabdf5c70ab5136944b6a25",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ColorViewerComponent } from './components/color-viewer/color-viewer.component';\r\nimport { PaletteViewerComponent } from './components/palette-viewer/palette-viewer.component';\r\nimport { StorageService } from \"./services/storage.service\";\r\nimport { LightSwitchComponent } from './components/light-switch/light-switch.component';\r\nimport { ColorEditorComponent } from './components/color-editor/color-editor.component';\r\nimport { ColorService } from \"./services/color.service\";\r\nimport { DialogComponent } from './components/dialog/dialog.component';\r\nimport { NotificationComponent } from './components/notification/notification.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ColorViewerComponent,\r\n    PaletteViewerComponent,\r\n    LightSwitchComponent,\r\n    ColorEditorComponent,\r\n    DialogComponent,\r\n    NotificationComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule\r\n  ],\r\n  providers: [\r\n    StorageService,\r\n    ColorService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ColorService"
                        },
                        {
                            "name": "StorageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ColorEditorComponent"
                        },
                        {
                            "name": "ColorViewerComponent"
                        },
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "LightSwitchComponent"
                        },
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "PaletteViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Analogous",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Complementary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Compound",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  version: packageJson.version\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  version: packageJson.version\n}"
            },
            {
                "name": "MediaScope",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mediaScopePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('media-scope', uuidv4())"
            },
            {
                "name": "Monochromatic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Pawcode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PawcodeBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pawcodePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('pawcode', uuidv4())"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Rainbow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "rainbowPalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('Rainbow', uuidv4())"
            },
            {
                "name": "Random",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Split",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService,\r\n      useClass: MockColorService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService,\r\n      useClass: MockStorageService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService,\r\n      useClass: MockStorageService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Triadic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ChangeType",
                "childs": [
                    {
                        "name": "LOAD",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ADJUST",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RANDOM",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/color.service.ts"
            },
            {
                "name": "EditorState",
                "childs": [
                    {
                        "name": "ADD",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EDIT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/color-editor/color-editor.component.ts"
            },
            {
                "name": "PaletteScheme",
                "childs": [
                    {
                        "name": "MONOCHROMATIC",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ANALOGOUS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "COMPLEMENTARY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SPLIT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TRIADIC",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "COMPOUND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SURPRISE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RANDOM",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/class/palette-generator.ts"
            },
            {
                "name": "UpdateType",
                "childs": [
                    {
                        "name": "HEX",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "HUE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SATURATION",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LUMINOSITY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/color-editor/color-editor.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/palette-viewer/palette-viewer.component.stories.ts": [
                {
                    "name": "Analogous",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Complementary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Compound",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MediaScope",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mediaScopePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('media-scope', uuidv4())"
                },
                {
                    "name": "Monochromatic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Pawcode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "pawcodePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('pawcode', uuidv4())"
                },
                {
                    "name": "Rainbow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "rainbowPalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('Rainbow', uuidv4())"
                },
                {
                    "name": "Random",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Split",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService,\r\n      useClass: MockStorageService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
                },
                {
                    "name": "Triadic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  version: packageJson.version\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  version: packageJson.version\n}"
                }
            ],
            "src/app/components/color-viewer/color-viewer.component.stories.ts": [
                {
                    "name": "PawcodeBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService,\r\n      useClass: MockColorService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
                }
            ],
            "src/app/components/color-editor/color-editor.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
                }
            ],
            "src/app/components/light-switch/light-switch.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService,\r\n      useClass: MockStorageService\r\n    }]\r\n  }\r\n})"
                }
            ],
            "src/app/components/dialog/dialog.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
                }
            ],
            "src/app/components/notification/notification.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/services/color.service.ts": [
                {
                    "name": "ChangeType",
                    "childs": [
                        {
                            "name": "LOAD",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ADJUST",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RANDOM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/color.service.ts"
                }
            ],
            "src/app/components/color-editor/color-editor.component.ts": [
                {
                    "name": "EditorState",
                    "childs": [
                        {
                            "name": "ADD",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EDIT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/color-editor/color-editor.component.ts"
                },
                {
                    "name": "UpdateType",
                    "childs": [
                        {
                            "name": "HEX",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "HUE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SATURATION",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LUMINOSITY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/color-editor/color-editor.component.ts"
                }
            ],
            "src/app/class/palette-generator.ts": [
                {
                    "name": "PaletteScheme",
                    "childs": [
                        {
                            "name": "MONOCHROMATIC",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ANALOGOUS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "COMPLEMENTARY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SPLIT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TRIADIC",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "COMPOUND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SURPRISE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RANDOM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/class/palette-generator.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 7,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 23,
                "coverageCount": "3/13",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-converter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorConverter",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-interpolater.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorInterpolater",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/class/palette-exporter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaletteExporter",
                "coveragePercent": 88,
                "coverageCount": "8/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/class/palette-generator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaletteGenerator",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockColorService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorEditorComponent",
                "coveragePercent": 23,
                "coverageCount": "4/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockColorService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PawcodeBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorViewerComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LightSwitchComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Analogous",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Complementary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Compound",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MediaScope",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediaScopePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Monochromatic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pawcode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pawcodePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rainbow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rainbowPalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Random",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Split",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Triadic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaletteViewerComponent",
                "coveragePercent": 50,
                "coverageCount": "8/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/dialogs/css-copy.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssCopyDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/css-file.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssFileDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/css.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/export.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExportDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind-copy.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindCopyDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind-file.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindFileDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/dialog.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Action",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/dialog.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/color.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Color",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/palette.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Palette",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/shade.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Shade",
                "coveragePercent": 13,
                "coverageCount": "2/15",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToUnicodeVariantUtil",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}