{
    "pipes": [
        {
            "name": "SafeHtmlPipeline",
            "id": "pipe-SafeHtmlPipeline-9d9bd20a125752f6184654bc7665587c5014c53b3ab74ae9ece9b1b2c8319f298059e4dfee06c3a4f5eaf2c62fe0cc57e3e8dd9685f53b7dc7fb5ada0c3004f8",
            "file": "src/app/pipelines/safe-html.pipeline.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import {Pipe, PipeTransform} from \"@angular/core\";\r\nimport {DomSanitizer} from \"@angular/platform-browser\";\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipeline implements PipeTransform {\r\n\r\n  constructor(\r\n    private sanitized: DomSanitizer\r\n  ) { }\r\n\r\n  transform(value: any): any {\r\n    return this.sanitized.bypassSecurityTrustHtml(value)\r\n  }\r\n\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Action",
            "id": "interface-Action-cb708bf653aabfa0b971fc85cc506a89617cbc9515087220223202d023ac08f32ab41ad9ff17df1f6062c84477ea2428b1ba18a70a9539cb796293bcab04126f",
            "file": "src/app/interfaces/dialog.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\n\r\nexport interface Dialog {\r\n\r\n  message: string\r\n  actions: Action[]\r\n\r\n}\r\n\r\nexport interface Action {\r\n\r\n  text: string\r\n  title: string\r\n  action: EventEmitter<any>\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Dialog",
            "id": "interface-Dialog-cb708bf653aabfa0b971fc85cc506a89617cbc9515087220223202d023ac08f32ab41ad9ff17df1f6062c84477ea2428b1ba18a70a9539cb796293bcab04126f",
            "file": "src/app/interfaces/dialog.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\n\r\nexport interface Dialog {\r\n\r\n  message: string\r\n  actions: Action[]\r\n\r\n}\r\n\r\nexport interface Action {\r\n\r\n  text: string\r\n  title: string\r\n  action: EventEmitter<any>\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Action[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ColorService",
            "id": "injectable-ColorService-518d5208841e427ec8bc4499df698d0dfb5fa99c1d171a27e6df5d153aaca750709862f9d2cd75dab5c03310ca19f20395f9e9d277afdaa19385014c0924dcea",
            "file": "src/app/services/color.service.ts",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color | undefined",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "colorChangeEmitter",
                    "defaultValue": "new EventEmitter<ChangeType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<ChangeType>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adjustShades",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdjust the shades of a color\n",
                    "description": "<p>Adjust the shades of a color</p>\n"
                },
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose the color editor\n",
                    "description": "<p>Close the color editor</p>\n"
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the current color\n",
                    "description": "<p>Return the current color</p>\n"
                },
                {
                    "name": "getColorChangeEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "EventEmitter<ChangeType>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the color change event emitter\n",
                    "description": "<p>Return the color change event emitter</p>\n"
                },
                {
                    "name": "getShade",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the current shade\n",
                    "description": "<p>Return the current shade</p>\n"
                },
                {
                    "name": "loadColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shadeIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen the editor with a copy of the color and optional a specific shade.\n",
                    "description": "<p>Open the editor with a copy of the color and optional a specific shade.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 669,
                                "end": 674,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 663,
                                "end": 668,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 688,
                                "end": 698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shadeIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 682,
                                "end": 687,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "saveColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave all changes made to the color\n",
                    "description": "<p>Save all changes made to the color</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Color} from \"../models/color.model\";\r\nimport {ColorInterpolater} from \"../class/color-interpolater\";\r\nimport {Shade} from \"../models/shade.model\";\r\nimport {PaletteService} from \"./palette.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ColorService {\r\n\r\n  private color: Color | undefined\r\n  private shade: Shade | undefined\r\n  private colorChangeEmitter: EventEmitter<ChangeType> = new EventEmitter<ChangeType>()\r\n\r\n  constructor(\r\n    private paletteService: PaletteService\r\n  ) { }\r\n\r\n  /**\r\n   * Open the editor with a copy of the color and optional a specific shade.\r\n   * @param color\r\n   * @param shadeIndex\r\n   */\r\n  loadColor(color: Color, shadeIndex?: number) {\r\n    this.color = Color.parseColor(color)\r\n    if (shadeIndex)\r\n      this.shade = this.color.getShade(shadeIndex)\r\n    else\r\n      this.shade = this.color.shades.find(s => s.fixed)\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  /**\r\n   * Close the color editor\r\n   */\r\n  closeEditor() {\r\n    this.color = undefined\r\n    this.shade = undefined\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  /**\r\n   * Adjust the shades of a color\r\n   */\r\n  adjustShades() {\r\n    if (this.color) {\r\n      ColorInterpolater.regenerateShades(this.color)\r\n      this.colorChangeEmitter.emit(ChangeType.ADJUST)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save all changes made to the color\r\n   */\r\n  saveColor() {\r\n    if (this.color) {\r\n      this.paletteService.getPalette()?.replaceColor(this.color)\r\n      this.closeEditor()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the current color\r\n   */\r\n  getColor() {\r\n    return this.color\r\n  }\r\n\r\n  /**\r\n   * Return the current shade\r\n   */\r\n  getShade() {\r\n    return this.shade\r\n  }\r\n\r\n  /**\r\n   * Return the color change event emitter\r\n   */\r\n  getColorChangeEmitter() {\r\n    return this.colorChangeEmitter\r\n  }\r\n\r\n}\r\n\r\nexport enum ChangeType {\r\n  LOAD, ADJUST\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-4ac37530659a8d7965c9bb0fececff3a818935746fbdcbaa09e85d84cc808667f460b2a021e538b3b7052f730ae16a1aa77ce596cd68812110b48a098cc2cf4b",
            "file": "src/app/services/notification.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "defaultValue": "new EventEmitter<Dialog | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<Dialog | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\nimport {Dialog} from \"../interfaces/dialog.interface\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  dialog: EventEmitter<Dialog | undefined> = new EventEmitter<Dialog | undefined>()\n\n  notification: EventEmitter<string | undefined> = new EventEmitter<string | undefined>()\n\n  constructor() { }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "PaletteService",
            "id": "injectable-PaletteService-e01eb10ec7cc9275f89edf06639005eb7a96fe66ce750349aee9850b32c97393b88d1d3c0752a35cf87469d8b330f58da07f72b857c84a908f86d5470bd75e30",
            "file": "src/app/services/palette.service.ts",
            "properties": [
                {
                    "name": "hex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Palette | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "paletteChangeEmitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<Palette | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scheme",
                    "defaultValue": "PaletteScheme.SURPRISE_ME",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaletteScheme",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "clearPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnload the current palette\n",
                    "description": "<p>Unload the current palette</p>\n"
                },
                {
                    "name": "generatePalette",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a new color palette with a specific color and scheme\n",
                    "description": "<p>Generate a new color palette with a specific color and scheme</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 793,
                                "end": 796,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 787,
                                "end": 792,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 809,
                                "end": 815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scheme"
                            },
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 803,
                                "end": 808,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the current palette\n",
                    "description": "<p>Return the current palette</p>\n"
                },
                {
                    "name": "getPaletteChangeEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "EventEmitter<any>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the palette change event emitter\n",
                    "description": "<p>Return the palette change event emitter</p>\n"
                },
                {
                    "name": "hasPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if a palette is present\n",
                    "description": "<p>Check if a palette is present</p>\n"
                },
                {
                    "name": "loadPalette",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad an existing palette\n",
                    "description": "<p>Load an existing palette</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1242,
                                "end": 1249,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1236,
                                "end": 1241,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\nimport {Palette} from \"../models/palette.model\";\nimport {PaletteGenerator, PaletteScheme} from \"../class/palette-generator\";\nimport {StorageService} from \"./storage.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaletteService {\n\n  hex: string | undefined\n  scheme: PaletteScheme = PaletteScheme.SURPRISE_ME\n  private palette: Palette | undefined\n  private paletteChangeEmitter: EventEmitter<Palette | undefined> = new EventEmitter()\n\n  constructor(\n    private storageService: StorageService\n  ) {\n    const palette = storageService.loadPalette()\n    if (palette)\n      this.loadPalette(palette)\n    else\n      this.clearPalette()\n  }\n\n  /**\n   * Generate a new color palette with a specific color and scheme\n   * @param hex\n   * @param scheme\n   */\n  generatePalette(hex: string, scheme: PaletteScheme) {\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\n      throw 'Hex must be a 6-digit hex code.'\n\n    this.hex = hex\n    this.scheme = Object.values(PaletteScheme).indexOf(scheme) % 8\n    const palette = PaletteGenerator.generatePalette(hex, scheme)\n    this.palette = palette\n    this.paletteChangeEmitter.emit(palette)\n  }\n\n  /**\n   * Load an existing palette\n   * @param palette\n   */\n  loadPalette(palette: Palette) {\n    this.hex = palette.colors[0].getShade(500).hex\n    this.palette = palette\n    this.paletteChangeEmitter.emit(palette)\n  }\n\n  /**\n   * Unload the current palette\n   */\n  clearPalette() {\n    this.palette = undefined\n    this.paletteChangeEmitter.emit(undefined)\n  }\n\n  /**\n   * Return the current palette\n   */\n  getPalette() {\n    return this.palette\n  }\n\n  /**\n   * Check if a palette is present\n   */\n  hasPalette() {\n    return !!this.palette\n  }\n\n  /**\n   * Return the palette change event emitter\n   */\n  getPaletteChangeEmitter() {\n    return this.paletteChangeEmitter\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-9d81402d7bade205605b97fb11d01bb63a4389b96f640f9ba307b5286b4af67a3e0172a1857d5a75cef863879e5a3a54d9ce8d1385c120bcecad1f3b8cfa136a",
            "file": "src/app/services/storage.service.ts",
            "properties": [
                {
                    "name": "darkEmitter",
                    "defaultValue": "new EventEmitter<Boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "loadPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "Palette | undefined",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.\n",
                    "description": "<p>Load the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.</p>\n"
                },
                {
                    "name": "loadTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.\n",
                    "description": "<p>Load the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.</p>\n"
                },
                {
                    "name": "savePalette",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave palette in local storage.\n",
                    "description": "<p>Save palette in local storage.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1580,
                                "end": 1587,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1574,
                                "end": 1579,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [
                        {
                            "name": "dark",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle between dark and light theme.\nForce dark or light mode with parameter.\n",
                    "description": "<p>Toggle between dark and light theme.\nForce dark or light mode with parameter.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 839,
                                "end": 843,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dark"
                            },
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 833,
                                "end": 838,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Palette} from \"../models/palette.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n\r\n  darkEmitter = new EventEmitter<Boolean>()\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Load the theme if it is stored in local storage.\r\n   * If no theme was saved, the browser default theme is used.\r\n   */\r\n  loadTheme() {\r\n    if (!localStorage.getItem('theme')) {\r\n      if (window.matchMedia('(prefers-color-scheme: dark)'))\r\n        return this.toggleTheme(true)\r\n      else {\r\n        this.darkEmitter.emit(true)\r\n        return false\r\n      }\r\n    } else {\r\n      return this.toggleTheme(localStorage.getItem('theme') === 'dark')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle between dark and light theme.\r\n   * Force dark or light mode with parameter.\r\n   * @param dark\r\n   */\r\n  toggleTheme(dark: boolean | undefined) {\r\n    document.body.classList.toggle('dark', dark)\r\n\r\n    dark = document.body.classList.contains('dark')\r\n    localStorage.setItem('theme', dark ? 'dark' : 'light')\r\n\r\n    this.darkEmitter.emit(dark)\r\n\r\n    return dark\r\n  }\r\n\r\n  /**\r\n   * Load the palette saved in local storage.\r\n   * If no palette is saved a random one is going to be generated.\r\n   */\r\n  loadPalette(): Palette | undefined {\r\n    const stored = localStorage.getItem('palette')\r\n    if (stored) {\r\n      try {\r\n        return Palette.parsePalette(JSON.parse(stored))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Save palette in local storage.\r\n   * @param palette\r\n   */\r\n  savePalette(palette: Palette) {\r\n    localStorage.setItem('palette', palette.toString())\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "PaletteGuard",
            "id": "injectable-PaletteGuard-2aac1e89b0bdda4948e79d931f09ee43fe2d601d69a41ca5f33d943e73c408f247837d70228873e926631c9f098aff13f46bea3e4b97443a0b46fdbf46f48959",
            "file": "src/app/guards/palette.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {PaletteService} from \"../services/palette.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaletteGuard implements CanActivate {\n  constructor(\n    private paletteService: PaletteService,\n    private router: Router\n  ) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.paletteService.hasPalette()) {\n      return true\n    } else {\n      this.router.navigate([''])\n      return false\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "Color",
            "id": "class-Color-a32ed79869e7aa636eee9c3156f95a4cfea705c3a31d70ba6a183b1c8f4cc149e19a47bc1119128881f6f5d02a1b5813280998a07199552fbf2e134b403476bf",
            "file": "src/app/models/color.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorInterpolater} from \"../class/color-interpolater\";\r\nimport {Shade} from \"./shade.model\";\r\n\r\nexport class Color {\r\n\r\n  name: string\r\n\r\n  shades: Shade[]\r\n\r\n  public constructor(name: string, hex: string)\r\n  public constructor(name: string, hexes: string[])\r\n  public constructor(name: string, shades: Shade[])\r\n\r\n  constructor(...args: any[]) {\r\n    this.name = args[0].startsWith('#') ? args[0].substring(1) : args[0]\r\n\r\n    if (typeof args[1] === 'string') {\r\n      this.shades = []\r\n      const shade = new Shade(-1, true, args[1])\r\n      this.shades.push(shade)\r\n    } else if (typeof args[1][0] === 'string') {\r\n      this.shades = []\r\n\r\n      for (const hex of args[1]) {\r\n        this.shades.push(new Shade(-1, true, hex))\r\n      }\r\n    } else {\r\n      this.shades = args[1]\r\n    }\r\n\r\n    ColorInterpolater.regenerateShades(this)\r\n  }\r\n\r\n  /**\r\n   * Get shade by index (50, 100, 200, ..., 900)\r\n   * @param index\r\n   */\r\n  public getShade(index: number): Shade {\r\n    return this.shades.find(s => s.index === index) || this.shades[0]\r\n  }\r\n\r\n  /**\r\n   * Generate a random color with all shades.\r\n   */\r\n  public static generateRandomColor(): Color {\r\n    const shade = Shade.generateRandomShade()\r\n    return new Color(\r\n      shade.hex,\r\n      shade.hex\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Stringify the color.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      name: this.name,\r\n      shades: this.shades\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a color.\r\n   * Throws exception if json object is no valid color object.\r\n   * @param json\r\n   */\r\n  public static parseColor(json: any): Color {\r\n    if (!json.name)\r\n      throw 'Color has no name'\r\n    if (!json.shades || json.shades.length < 1)\r\n      throw 'Color has not enough shades'\r\n\r\n    const shades: Shade[] = []\r\n    for (const shade of json.shades) {\r\n      shades.push(Shade.parseShade(shade))\r\n    }\r\n\r\n    return new Color(json.name, shades)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "shades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "generateRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a random color with all shades.\n",
                    "description": "<p>Generate a random color with all shades.</p>\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getShade",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet shade by index (50, 100, 200, ..., 900)\n",
                    "description": "<p>Get shade by index (50, 100, 200, ..., 900)</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 925,
                                "end": 930,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 919,
                                "end": 924,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "parseColor",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a color.\nThrows exception if json object is no valid color object.\n",
                    "description": "<p>Parse the json object to a color.\nThrows exception if json object is no valid color object.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1570,
                                "end": 1574,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1564,
                                "end": 1569,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStringify the color.\n",
                    "description": "<p>Stringify the color.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorConverter",
            "id": "class-ColorConverter-cba2355ca97f911a114c3cdba93aa10c96cec91898eb6ffa88655c52de44663d1fe14041e832ba824dbf41a397ba8a00a0af408b3b919cf09d7782ef9c95f231",
            "file": "src/app/class/color-converter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ColorConverter {\n\n  static HEXtoRGB(hex: string) {\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\n      throw `Color ${hex} is not in form #RRGGBB.`\n\n    return {\n      red: parseInt(hex.substring(1, 3), 16),\n      green: parseInt(hex.substring(3, 5), 16),\n      blue: parseInt(hex.substring(5, 7), 16)\n    }\n  }\n\n  static HEXtoHSL(hex: string) {\n    const rgb = this.HEXtoRGB(hex)\n    return this.RGBtoHSL(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HEXtoHSV(hex: string) {\n    const hsl = this.HEXtoHSL(hex)\n    return this.HSLtoHSV(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static HEXtoCMYK(hex: string) {\n    const rgb = this.HEXtoRGB(hex)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static RGBtoHEX(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    return `#${\n      (red < 16 ? 0 : '') + red.toString(16).toUpperCase()\n    }${\n      (green < 16 ? 0 : '') + green.toString(16).toUpperCase()\n    }${\n      (blue < 16 ? 0 : '') + blue.toString(16).toUpperCase()\n    }`\n  }\n\n  static RGBtoHSL(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    const r = red / 255\n    const g = green / 255\n    const b = blue / 255\n\n    const cMax = Math.max(r, g, b)\n    const cMin = Math.min(r, g, b)\n    const delta = cMax - cMin\n\n    const luminosity = (cMax + cMin) * 50\n    const saturation = (delta === 0) ? 0 : (100 * delta / (1 - Math.abs(2 * (luminosity / 100) - 1)))\n\n    let hue\n    if (delta === 0)\n      hue = 0\n    else if (cMax === r)\n      hue = 60 * ( ( (g - b) / delta) % 6)\n    else if (cMax === g)\n      hue = 60 * ( ( (b - r) / delta) + 2)\n    else\n      hue = 60 * ( ( (r - g) / delta) + 4)\n\n    if (hue < 0)\n      hue += 360\n\n    return {\n      hue: Math.round(hue),\n      saturation: Math.round(saturation),\n      luminosity: Math.round(luminosity)\n    }\n  }\n\n  static RGBtoHSV(red: number, green: number, blue: number) {\n    const hsl = this.RGBtoHSL(red, green, blue)\n    return this.HSLtoHSV(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static RGBtoCMYK(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    const r = red / 255\n    const g = green / 255\n    const b = blue / 255\n\n    const k = 1 - Math.max(r, g, b)\n    const c = (1 - r - k) / (1 - k)\n    const m = (1 - g - k) / (1 - k)\n    const y = (1 - b - k) / (1 - k)\n\n    return {\n      cyan: Math.round(c * 100),\n      magenta: Math.round(m * 100),\n      yellow: Math.round(y * 100),\n      key: Math.round(k * 100)\n    }\n  }\n\n\n  static HSLtoHEX(hue: number, saturation: number, luminosity: number): string {\n    const rgb = this.HSLtoRGB(hue, saturation, luminosity)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HSLtoRGB(hue: number, saturation: number, luminosity: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || luminosity < 0 || luminosity > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${luminosity}%] are not in valid ranges.`\n\n    const h = hue\n    const s = saturation / 100\n    const l = luminosity / 100\n\n    const c = (1 - Math.abs(2 * l - 1)) * s\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1))\n    const m = l - c / 2\n\n    const r = (h < 60 || h >= 300) ? c : (h < 120 || h >= 240) ? x : 0\n    const g = (h >= 240) ? 0 : (h < 60 || h >= 180) ? x : c\n    const b = (h < 120) ? 0 : (h < 180 || h >= 300) ? x : c\n\n    return {\n      red: Math.round((r + m) * 255),\n      green: Math.round((g + m) * 255),\n      blue: Math.round((b + m) * 255)\n    }\n  }\n\n  static HSLtoHSV(hue: number, saturation: number, luminosity: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || luminosity < 0 || luminosity > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${luminosity}%] are not in valid ranges.`\n\n    const v = luminosity + saturation * Math.min(luminosity, 1 - luminosity)\n\n    const s = (v === 0) ? 0 :\n      (2 * (1 - (luminosity / v)))\n\n    return {\n      hue: hue,\n      saturation: Math.round(s),\n      value: Math.round(v)\n    }\n  }\n\n  static HSLtoCMYK(hue: number, saturation: number, luminosity: number) {\n    const rgb = this.HSLtoRGB(hue, saturation, luminosity)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static HSVtoHEX(hue: number, saturation: number, value: number) {\n    const rgb = this.HSVtoRGB(hue, saturation, value)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HSVtoRGB(hue: number, saturation: number, value: number) {\n    const hsl = this.HSVtoHSL(hue, saturation, value)\n    return this.HSLtoRGB(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static HSVtoHSL(hue: number, saturation: number, value: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || value < 0 || value > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${value}%] are not in valid ranges.`\n\n    const l = value * (1 - (saturation / 2))\n\n    const s = (l === 0 || l === 1) ? 0 :\n      ((value - l) / Math.min(l, 1 - l))\n\n    return {\n      hue: hue,\n      saturation: Math.round(s),\n      luminosity: Math.round(l)\n    }\n  }\n\n  static HSVtoCMYK(hue: number, saturation: number, value: number) {\n    const rgb = this.HSVtoRGB(hue, saturation, value)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static CMYKtoHEX(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static CMYKtoRGB(cyan: number, magenta: number, yellow: number, key: number) {\n    if (cyan < 0 || cyan > 100 || magenta < 0 || magenta > 100 || yellow < 0 || yellow > 100 || key < 0 || key > 100)\n      throw `[${cyan}, ${magenta}, ${yellow}, ${key}] is not in valid format.`\n\n    const c = cyan / 100\n    const m = magenta / 100\n    const y = yellow / 100\n    const k = key / 100\n\n    const r = (1 - c) * (1 - k)\n    const g = (1 - m) * (1 - k)\n    const b = (1 - y) * (1 - k)\n\n    return {\n      red: Math.round(255 * r),\n      green: Math.round(255 * g),\n      blue: Math.round(255 * b),\n    }\n  }\n\n  static CMYKtoHSL(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHSL(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static CMYKtoHSV(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHSV(rgb.red, rgb.green, rgb.blue)\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "CMYKtoHEX",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoHSL",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoHSV",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoRGB",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoCMYK",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoHSL",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoHSV",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoRGB",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoCMYK",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoHEX",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoHSV",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoRGB",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoCMYK",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoHEX",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoHSL",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoRGB",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoCMYK",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHEX",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHSL",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHSV",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorInterpolater",
            "id": "class-ColorInterpolater-c84b1e33b82727eda069b3c2c11dcda2267e0c4b970be163aa27c8953610b2ba29e56fad66d99a793cb4df2f4e0b7435dfb0f3f1fc28af8893f04cc55ccfd6e6",
            "file": "src/app/class/color-interpolater.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Shade} from \"../models/shade.model\";\nimport {Color} from \"../models/color.model\";\n\nexport class ColorInterpolater {\n\n  /**\n   * Regenerate every shade but the fixed ones\n   * @param color\n   */\n  public static regenerateShades(color: Color) {\n    let shades = [...color.shades]\n\n    // clear and sort shades\n    shades = shades.filter(shade => shade.fixed)\n    shades.sort((a, b) => b.luminosity - a.luminosity)\n\n    // set new indices\n    let indices = [...Array(10).keys()].map(index => 20 + index * 80)\n    indices[0] = 50\n    for (const shade of shades) {\n      const index = indices.reduce((prev, curr) =>\n        (Math.abs(curr - (100 - shade.brightness) * 10) < Math.abs(prev - (100 - shade.brightness) * 10) ? curr : prev))\n      shade.setIndex(index)\n      indices = indices.filter(i => i !== index)\n    }\n\n    // add white and black to shades\n    shades.push(new Shade(1000, true,\n      shades[shades.length-1].hue,\n      Math.max(shades[shades.length-1].saturation - 10, 0),\n      0)\n    )\n    shades.push(new Shade(0, true,\n      shades[0].hue,\n      Math.min(shades[0].saturation + 10, 100),\n      100)\n    )\n    shades.sort((a, b) => a.index - b.index)\n\n    // generate missing shades\n    for (const index of indices) {\n      const smaller = [...shades].reverse().find(shade => shade.index < index && shade.fixed) || shades[0]\n      const bigger = shades.find(shade => shade.index > index && shade.fixed) || shades[shades.length-1]\n\n      const hue = this.mapNumbers(index, smaller.index, bigger.index,\n        bigger.hue - smaller.hue > 180 ? (smaller.hue + 360) : smaller.hue,\n        smaller.hue - bigger.hue > 180 ? (bigger.hue + 360) : bigger.hue\n      ) % 360\n      const saturation = this.mapNumbers(index, smaller.index, bigger.index, smaller.saturation, bigger.saturation)\n      const luminosity = this.mapNumbers(index, smaller.index, bigger.index, smaller.luminosity, bigger.luminosity)\n\n      shades.push(new Shade(index, false, hue, saturation, luminosity))\n    }\n\n    // remove white and black and set shades to color\n    shades = shades.filter(shade => shade.index !== 0 && shade.index !== 1000)\n\n    // repair broken orders\n    shades.sort((a, b) => b.luminosity - a.luminosity)\n    indices = [...Array(10).keys()].map(index => index * 100)\n    indices[0] = 50\n    for (let i = 0; i < shades.length; i++) {\n      shades[i].setIndex(indices[i])\n    }\n\n    color.shades = shades\n  }\n\n  /**\n   * Translate x in [in_min to in_max] to y in [out_min to out_max]\n   * @param x\n   * @param in_min\n   * @param in_max\n   * @param out_min\n   * @param out_max\n   * @private\n   */\n  private static mapNumbers(x: number, in_min: number, in_max: number, out_min: number, out_max: number): number {\n    return Math.round((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "mapNumbers",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "in_min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "in_max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "out_min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "out_max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTranslate x in [in_min to in_max] to y in [out_min to out_max]\n",
                    "description": "<p>Translate x in [in_min to in_max] to y in [out_min to out_max]</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2506,
                                "end": 2507,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "x"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2500,
                                "end": 2505,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2520,
                                "end": 2526,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "in_min"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2514,
                                "end": 2519,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2539,
                                "end": 2545,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "in_max"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2533,
                                "end": 2538,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2558,
                                "end": 2565,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "out_min"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2552,
                                "end": 2557,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2578,
                                "end": 2585,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "out_max"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2572,
                                "end": 2577,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 2592,
                                "end": 2599,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "regenerateShades",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegenerate every shade but the fixed ones\n",
                    "description": "<p>Regenerate every shade but the fixed ones</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 190,
                                "end": 195,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 184,
                                "end": 189,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssCopyDialog",
            "id": "class-CssCopyDialog-1eed6e558adef6f5a342ab7b47cb03f7f96eeca69971a9532a96c95264711530a1e53362f3343c83f6d662acb38c8482613b6cbddaab6c724097cf3283fada3b",
            "file": "src/app/dialogs/css-copy.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class CssCopyDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#using_the_root_pseudo-class', '_blank')\r\n    })\r\n\r\n    return {\r\n      message: 'The palette has been copied to your clipboard. ' +\r\n        `To use the colors as CSS properties copy the contents of the clipboard to the ${ToUnicodeVariantUtil.toUnicodeVariant(':root', 'm')} of your css file. ` +\r\n        'Now you can use them by referencing them like:\\n' +\r\n        ToUnicodeVariantUtil.toUnicodeVariant('color: var(--color-100);', 'm'),\r\n      actions: [{\r\n        text: 'Read more',\r\n        title: 'Open MDN Web Docs',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssDialog",
            "id": "class-CssDialog-9a118dd96b7113432917bce1cedfac311b878826d2bf688191c5c80825a77911a5d05748b627e81779f059c4e9590c906b7ff6dcded71b740e678f2b07de2783",
            "file": "src/app/dialogs/css.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {PaletteExporter} from \"../class/palette-exporter\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {CssCopyDialog} from \"./css-copy.dialog\";\r\nimport {CssFileDialog} from \"./css-file.dialog\";\r\n\r\nexport class CssDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) { }\r\n\r\n  getNotification() {\r\n    const cssCopyEmitter = new EventEmitter()\r\n    cssCopyEmitter.subscribe(() => {\r\n      const css = PaletteExporter.exportPaletteToCSS(this.palette)\r\n      navigator.clipboard.writeText(css).then(() => {\r\n        this.notification.emit(new CssCopyDialog(\r\n          this.notification\r\n        ).getNotification())\r\n      }).catch(e => {\r\n        this.notification.emit({\r\n          message: `An error occurred while copying to the clipboard\\n\\n${e}`,\r\n          actions: []\r\n        })\r\n      })\r\n    })\r\n\r\n    const cssFileEmitter = new EventEmitter()\r\n    cssFileEmitter.subscribe(() => {\r\n      const css = PaletteExporter.exportCssFile(this.palette)\r\n      const blob = new Blob([css], {type: 'text/css'})\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = 'colors.css'\r\n      a.click()\r\n\r\n      this.notification.emit(new CssFileDialog(\r\n        this.notification\r\n      ).getNotification())\r\n    })\r\n\r\n    return {\r\n      message: 'Do you want to copy the CSS properties into your own files or create a new one?',\r\n      actions: [{\r\n        text: 'Copy',\r\n        title: 'Copy content in own CSS file',\r\n        action: cssCopyEmitter\r\n      }, {\r\n        text: 'File',\r\n        title: 'Download a new file',\r\n        action: cssFileEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "{ message: string; actions: {}; }",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssFileDialog",
            "id": "class-CssFileDialog-08c2433cff2f41bba2288c1441ba2ca48a1adfa3afdab2ebb645ec4ba0ed910d39c3e822c3eed041dd9ef93c54ff8fc4fb6a699ae2a059beb4a278e949c5c02a",
            "file": "src/app/dialogs/css-file.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class CssFileDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#using_the_root_pseudo-class', '_blank')\r\n    })\r\n\r\n    return {\r\n      message: 'Move the downloaded colors.css file to the root of your webserver. ' +\r\n        'Then link it in the head of your html file like:\\n' +\r\n        ToUnicodeVariantUtil.toUnicodeVariant('<link rel=\"stylesheet\" href=\"/colors.css\">', 'm') + '\\n\\n' +\r\n        'Now you can use them by referencing them like:\\n' +\r\n        ToUnicodeVariantUtil.toUnicodeVariant('color: var(--color-100);', 'm'),\r\n      actions: [{\r\n        text: 'Read more',\r\n        title: 'Open MDN Web Docs',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExportDialog",
            "id": "class-ExportDialog-88b4d7d8a455f702185781a5ebda77ecc8760747d19f2e5f86282404d0fdc774aa75cb1e8aab628c78102fbaa3a6d85667e2ed4ffe71bda0faf6211377a794a0",
            "file": "src/app/dialogs/export.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {CssDialog} from \"./css.dialog\";\r\nimport {TailwindDialog} from \"./tailwind.dialog\";\r\n\r\nexport class ExportDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) { }\r\n\r\n  getNotification() {\r\n    const cssEmitter = new EventEmitter()\r\n    cssEmitter.subscribe(() => {\r\n      this.notification\r\n        .emit(new CssDialog(\r\n          this.notification,\r\n          this.palette\r\n        ).getNotification())\r\n    })\r\n\r\n    const tailwindEmitter = new EventEmitter()\r\n    tailwindEmitter.subscribe(() => {\r\n      this.notification\r\n        .emit(new TailwindDialog(\r\n          this.notification,\r\n          this.palette\r\n        ).getNotification())\r\n    })\r\n\r\n    return {\r\n      message: 'How do you want to use the palette?',\r\n      actions: [{\r\n        text: 'CSS',\r\n        title: 'CSS Properties',\r\n        action: cssEmitter\r\n      }, {\r\n        text: 'TailwindCSS',\r\n        title: 'TailwindCSS custom colors',\r\n        action: tailwindEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "{ message: string; actions: {}; }",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-6f0e2e8ec45c6852344b5992ee33129e86d8cb2eb13d5aac2d92c8df9024bc734e2ec1ddb965614dda324596f2afb0109d672e3e918a3cb8bcda31345360afb5",
            "file": "src/app/components/dialog/dialog.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DialogComponent} from \"./dialog.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../../interfaces/dialog.interface\";\r\n\r\nexport default {\r\n  title: 'Components/Dialog',\r\n  component: DialogComponent\r\n} as Meta\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  dialog = new EventEmitter<Dialog | undefined>()\r\n\r\n  constructor() {\r\n    const wait = new EventEmitter()\r\n    const next = new EventEmitter()\r\n\r\n    let content = {\r\n      message: 'This is a test message for storybook.\\n\\n' +\r\n        'You can use \\\\n to create new lines in here.',\r\n      actions: [{\r\n        text: 'Wait',\r\n        title: 'Wait 2 seconds for next dialog',\r\n        action: wait\r\n      }, {\r\n        text: 'Next',\r\n        title: 'Show next dialog',\r\n        action: next\r\n      }]\r\n    }\r\n\r\n    wait.subscribe(() => {\r\n      this.dialog.emit(undefined)\r\n      setTimeout(() => {\r\n        this.dialog.emit(content)\r\n      }, 2000)\r\n    })\r\n    next.subscribe(() => {\r\n      this.dialog.emit(content)\r\n    })\r\n\r\n    setTimeout(() => {\r\n      this.dialog.emit(content)\r\n    }, 0)\r\n\r\n    this.dialog.subscribe(notification => {\r\n      if (notification)\r\n        console.log('Show dialog\\n', notification.message)\r\n      else\r\n        console.log('Close dialog')\r\n    })\r\n  }\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "properties": [
                {
                    "name": "dialog",
                    "defaultValue": "new EventEmitter<Dialog | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-793eede438ce98e6950a58230a078efdcf6b20e1da97aced415c19bfdb02b6bc64c2c08145309647e51e54f9f21c9619e1ae72926554eefc2fa4610e2de371d4-1",
            "file": "src/app/components/notification/notification.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {NotificationComponent} from \"./notification.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\n\r\nexport default {\r\n  title: 'Components/Notification',\r\n  component: NotificationComponent\r\n} as Meta\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  notification = new EventEmitter<string | undefined>()\r\n\r\n  constructor() {\r\n    const message = 'This is short notification.'\r\n\r\n    setTimeout(() => {\r\n      this.notification.emit(message)\r\n    }, 0)\r\n\r\n    this.notification.subscribe(nextMessage => {\r\n      if (nextMessage) {\r\n        console.log('Show Notification\\n', nextMessage)\r\n      } else {\r\n        console.log('Close Notification')\r\n        setTimeout(() => {\r\n          this.notification.emit(message)\r\n        }, 1000)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "properties": [
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MockNotificationService-1"
        },
        {
            "name": "Palette",
            "id": "class-Palette-d2eca6418c529ef108ad8847916a402b673967461c2326bd9f8d5bafd868e21222b0166792995bb7a361e899b19243a5b67b997dca632e1958fad357bf2efde6",
            "file": "src/app/models/palette.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Color} from \"./color.model\";\r\n// @ts-ignore\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nexport class Palette {\r\n\r\n  title: string\r\n  id: string\r\n  colors: Color[] = []\r\n  order = false\r\n\r\n  constructor(title: string, id?: string) {\r\n    this.title = title\r\n    this.id = id || uuidv4()\r\n  }\r\n\r\n  /**\r\n   * Add a color to the beginning of the palette.\r\n   * @param color\r\n   * @param front\r\n   */\r\n  public addColor(color: Color, front = true) {\r\n    if (this.colors.find(c => c.name === color.name)) {\r\n      this.colors[this.colors.findIndex(c => c.name === color.name)] = color\r\n    } else {\r\n      if (front)\r\n        this.colors.unshift(color)\r\n      else\r\n        this.colors.push(color)\r\n    }\r\n\r\n    this.order = false\r\n  }\r\n\r\n  /**\r\n   * Remove the color from the palette\r\n   * @param color\r\n   */\r\n  public removeColor(color: Color) {\r\n    const index = this.colors.indexOf(color)\r\n    if (index > -1) {\r\n      this.colors.splice(index, 1)\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace color with same name\r\n   * @param color\r\n   */\r\n  replaceColor(color: Color) {\r\n    let index = this.colors.findIndex(c => c.name === color.name)\r\n    if (index < 0)\r\n      this.addColor(color, false)\r\n    else\r\n      this.colors[index] = color\r\n  }\r\n\r\n  /**\r\n   * Sort all colors of the palette by hue\r\n   */\r\n  public sortColors() {\r\n    this.colors.sort((a, b) => {\r\n      if (this.order)\r\n        return a.getShade(500).hue - b.getShade(500).hue\r\n      else\r\n        return b.getShade(500).hue - a.getShade(500).hue\r\n    })\r\n    this.order = !this.order\r\n  }\r\n\r\n  /**\r\n   * Generate a new random palette with 'size' colors.\r\n   * @param size\r\n   */\r\n  public static generateRandomPalette(size: number): Palette {\r\n    if (size < 1)\r\n      throw `Size was ${size} but must be positive.`\r\n\r\n    const palette = new Palette('Random')\r\n    for (let i = 0; i < size; i++) {\r\n      const color = Color.generateRandomColor()\r\n      palette.addColor(new Color(color.name, color.getShade(500).hex))\r\n    }\r\n\r\n    palette.colors.sort((a, b) => a.getShade(500).hue - b.getShade(500).hue)\r\n\r\n    return palette;\r\n  }\r\n\r\n  /**\r\n   * Stringify the palette.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      id: this.id,\r\n      title: this.title,\r\n      colors: this.colors\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a palette.\r\n   * Throws exception if not all values are given.\r\n   * @param json\r\n   */\r\n  public static parsePalette(json: any): Palette {\r\n    if (!json.title)\r\n      throw 'Palette has no title'\r\n    if (!json.id)\r\n      throw 'Palette has no id'\r\n    if (!json.colors)\r\n      throw 'Palette has no colors'\r\n\r\n    const palette = new Palette(json.title, json.id)\r\n\r\n    for (const color of json.colors) {\r\n      palette.addColor(Color.parseColor(color))\r\n    }\r\n    palette.colors.reverse()\r\n\r\n    return palette\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "order",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "addColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "front",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a color to the beginning of the palette.\n",
                    "description": "<p>Add a color to the beginning of the palette.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 367,
                                "end": 372,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 361,
                                "end": 366,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 386,
                                "end": 391,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "front"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 380,
                                "end": 385,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "generateRandomPalette",
                    "args": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a new random palette with 'size' colors.\n",
                    "description": "<p>Generate a new random palette with &#39;size&#39; colors.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1681,
                                "end": 1685,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "size"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1675,
                                "end": 1680,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "parsePalette",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a palette.\nThrows exception if not all values are given.\n",
                    "description": "<p>Parse the json object to a palette.\nThrows exception if not all values are given.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2448,
                                "end": 2452,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2442,
                                "end": 2447,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove the color from the palette\n",
                    "description": "<p>Remove the color from the palette</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 796,
                                "end": 801,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 790,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "replaceColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReplace color with same name\n",
                    "description": "<p>Replace color with same name</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1074,
                                "end": 1079,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1068,
                                "end": 1073,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "sortColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSort all colors of the palette by hue\n",
                    "description": "<p>Sort all colors of the palette by hue</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStringify the palette.\n",
                    "description": "<p>Stringify the palette.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaletteExporter",
            "id": "class-PaletteExporter-5560634ce866d3c8562c36fe731fd77e5620c8b305a94804d0ec687d302dae4144908d8f9ccb8e1e0c2a679f3f21975044d0d1a5579555af3cb8c6330663c496",
            "file": "src/app/class/palette-exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Palette} from \"../models/palette.model\";\r\nimport {Color} from \"../models/color.model\";\r\nimport {Shade} from \"../models/shade.model\";\r\n\r\nexport class PaletteExporter {\r\n\r\n  /**\r\n   * Export a palette for usage in a separate colors.css file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportCssFile(palette: Palette) {\r\n    return `:root {\\n\\t${this.exportPaletteToCSS(palette).replace(/\\n/g, '\\n\\t')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in plain CSS as CSS properties.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToCSS(palette: Palette) {\r\n    return `/* Color palette generated by ${window.location.href} */\\n\\n${palette.colors.map(c => this.exportColorToCSS(c)).join('\\n\\n')}`\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in plain CSS as CSS properties.\r\n   * @param color Color to export\r\n   * @private\r\n   */\r\n  private static exportColorToCSS(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return color.shades.map(s => this.exportShadeToCSS(s, name)).join('\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in plain CSS as CSS property.\r\n   * @param shade Shade to export\r\n   * @param name Name of the color\r\n   * @private\r\n   */\r\n  private static exportShadeToCSS(shade: Shade, name: string) {\r\n    return `--${name}-${shade.index}:${shade.index < 100 ? ' ' : ''} ${shade.hex};`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in a separate tailwind.colors.js file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportTailwindFile(palette: Palette) {\r\n    return `module.exports = {\\n\\t${this.exportPaletteToTailwind(palette).replace(/\\n/g, '\\n\\t')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in TailwindCSS.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToTailwind(palette: Palette) {\r\n    return palette.colors.map(c => this.exportColorToTailwind(c)).join(',\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in TailwindCSS.\r\n   * @param color Color to export\r\n   * @private\r\n   */\r\n  private static exportColorToTailwind(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return `'${name}': {\\n${color.shades.map(s => this.exportShadeToTailwind(s)).join(',\\n')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in TailwindCSS.\r\n   * @param shade Shade to export\r\n   * @private\r\n   */\r\n  private static exportShadeToTailwind(shade: Shade) {\r\n    return `\\t${shade.index}:${shade.index < 100 ? ' ' : ''} '${shade.hex}'`\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "exportColorToCSS",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a color for usage in plain CSS as CSS properties.\n",
                    "description": "<p>Export a color for usage in plain CSS as CSS properties.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 829,
                                "end": 834,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 823,
                                "end": 828,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 858,
                                "end": 865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportColorToTailwind",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a color for usage in TailwindCSS.\n",
                    "description": "<p>Export a color for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1983,
                                "end": 1988,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1977,
                                "end": 1982,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2012,
                                "end": 2019,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportCssFile",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in a separate colors.css file.\n",
                    "description": "<p>Export a palette for usage in a separate colors.css file.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 261,
                                "end": 268,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 255,
                                "end": 260,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportPaletteToCSS",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in plain CSS as CSS properties.\n",
                    "description": "<p>Export a palette for usage in plain CSS as CSS properties.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 517,
                                "end": 524,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 511,
                                "end": 516,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportPaletteToTailwind",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in TailwindCSS.\n",
                    "description": "<p>Export a palette for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1743,
                                "end": 1750,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1737,
                                "end": 1742,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportShadeToCSS",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a shade for usage in plain CSS as CSS property.\n",
                    "description": "<p>Export a shade for usage in plain CSS as CSS property.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1153,
                                "end": 1158,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1147,
                                "end": 1152,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Shade to export</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1188,
                                "end": 1192,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1182,
                                "end": 1187,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Name of the color</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1218,
                                "end": 1225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportShadeToTailwind",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a shade for usage in TailwindCSS.\n",
                    "description": "<p>Export a shade for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2320,
                                "end": 2325,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2314,
                                "end": 2319,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Shade to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2349,
                                "end": 2356,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportTailwindFile",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in a separate tailwind.colors.js file.\n",
                    "description": "<p>Export a palette for usage in a separate tailwind.colors.js file.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1482,
                                "end": 1489,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1476,
                                "end": 1481,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaletteGenerator",
            "id": "class-PaletteGenerator-a83688844d045d7a055ea4f204a520b4d545f842b4c20962952d861494c0e192e899ffee9705989ea1a6f42c64cab6e1b1b9a03bfa304ecdb47b96dc6adc1ad8",
            "file": "src/app/class/palette-generator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Shade} from \"../models/shade.model\";\nimport {Palette} from \"../models/palette.model\";\nimport {Color} from \"../models/color.model\";\n\nexport class PaletteGenerator {\n\n  static generatePalette(hex: string, scheme: PaletteScheme): Palette {\n    const shade = new Shade(-1, true, hex)\n\n    const values = Object.values(PaletteScheme)\n    const value = values.indexOf(scheme) % (values.length / 2)\n\n    switch (value) {\n      case PaletteScheme.MONOCHROMATIC:\n        return this.generateMonochromaticPalette(shade)\n      case PaletteScheme.ANALOGOUS:\n        return this.generateAnalogousPalette(shade)\n      case PaletteScheme.COMPLEMENTARY:\n        return this.generateComplementaryPalette(shade)\n      case PaletteScheme.SPLIT:\n        return this.generateSplitPalette(shade)\n      case PaletteScheme.TRIADIC:\n        return this.generateTriadicPalette(shade)\n      case PaletteScheme.COMPOUND:\n        return this.generateCompoundPalette(shade)\n      default:\n        const schemes = Object.keys(PaletteScheme)\n        const index = schemes[Math.floor(Math.random() * schemes.length)]\n        // @ts-ignore\n        return this.generatePalette(hex, PaletteScheme[index])\n    }\n  }\n\n  private static generateMonochromaticPalette(shade: Shade) {\n    const monochromatic = new Palette('Monochrom')\n\n    monochromatic.addColor(new Color('primary', [shade]))\n    monochromatic.addColor(new Color('muted', [\n      new Shade(-1, true, shade.hue, 30, 50)\n    ]), false)\n    monochromatic.addColor(new Color('gray', [\n      new Shade(-1, true, shade.hue, 2, 50)\n    ]), false)\n\n    return monochromatic\n  }\n\n  private static generateAnalogousPalette(shade: Shade) {\n    const analogous = new Palette('Analogous')\n\n    analogous.addColor(new Color('primary', [shade]))\n\n    analogous.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 315), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    analogous.addColor(new Color('secondary muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 270), 25, 20)\n    ]), false)\n\n    analogous.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 45), shade.saturation, 50)\n    ]), false)\n    analogous.addColor(new Color('accent muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 90) % 360, 25, 20)\n    ]), false)\n\n    return analogous\n  }\n\n  private static generateComplementaryPalette(shade: Shade) {\n    const complementary = new Palette('Complementary')\n\n    complementary.addColor(new Color('primary', [shade]))\n\n    complementary.addColor(new Color('gray', [\n      new Shade(-1, true, shade.hue, 3, 50)\n    ]), false)\n\n    complementary.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 180), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n\n    return complementary\n  }\n\n  private static generateSplitPalette(shade: Shade) {\n    const split = new Palette('Split')\n\n    split.addColor(new Color('primary', [shade]))\n\n    split.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 20), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    split.addColor(new Color('gray', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 20), 3, 50)\n    ]), false)\n\n    split.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 180), shade.saturation, 80)\n    ]), false)\n\n    return split\n  }\n\n  private static generateTriadicPalette(shade: Shade) {\n    const triadic = new Palette('Triadic')\n\n    triadic.addColor(new Color('primary', [shade]))\n\n    triadic.addColor(new Color('primary muted', [\n      new Shade(-1, true, shade.hue, 20, 30)\n    ]), false)\n\n    triadic.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 120), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    triadic.addColor(new Color('secondary muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 120), 20, 30)\n    ]), false)\n\n    triadic.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 240), shade.saturation, 20)\n    ]), false)\n\n    return triadic\n  }\n\n  private static generateCompoundPalette(shade: Shade) {\n    const compound = new Palette('Compound')\n\n    compound.addColor(new Color('primary', [shade]))\n\n    compound.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 210), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n\n    compound.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 150), shade.saturation, 50)\n    ]), false)\n\n    return compound\n  }\n\n  private static changeHueOnWheel(hue: number, change: number) {\n    let wheel\n    if (hue < 60)\n      wheel = 2 * hue\n    else if (hue < 120)\n      wheel = hue + 60\n    else if (hue < 240)\n      wheel = .5 * hue + 120\n    else\n      wheel = hue\n\n    wheel += change\n    wheel %= 360\n\n    let newHue\n    if (wheel < 120)\n      newHue = .5 * wheel\n    else if (wheel < 180)\n      newHue = wheel + 300\n    else if (wheel < 240)\n      newHue = 2 * wheel + 120\n    else\n      newHue = wheel\n\n    return newHue % 360\n  }\n\n}\n\nexport enum PaletteScheme {\n  SURPRISE_ME,\n  MONOCHROMATIC,\n  ANALOGOUS,\n  COMPLEMENTARY,\n  SPLIT,\n  TRIADIC,\n  COMPOUND,\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "changeHueOnWheel",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "change",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "change",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateAnalogousPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateComplementaryPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCompoundPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateMonochromaticPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePalette",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateSplitPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateTriadicPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Shade",
            "id": "class-Shade-759d0fa12fad5512b5fdac3223db6fb2e02f1732acee071e4bf36b479932b823af5844512ee814c867b4ba47640bd57749af38b8aded156fa30fcfda2559458b",
            "file": "src/app/models/shade.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorConverter} from \"../class/color-converter\";\r\n\r\nexport class Shade {\r\n\r\n  index: number\r\n  hex: string\r\n  hue: number\r\n  saturation: number\r\n  luminosity: number\r\n  brightness: number = 0\r\n  fixed: boolean\r\n\r\n  public constructor(index: number, fixed: boolean, hex: string)\r\n  public constructor(index: number, fixed: boolean, hue: number, saturation: number, luminosity: number)\r\n  public constructor(index: number, fixed: boolean, hex: string, hue: number, saturation: number, luminosity: number)\r\n\r\n  constructor(...args: any[]) {\r\n    this.index = args[0]\r\n    this.fixed = args[1]\r\n\r\n    if (args.length === 3) {\r\n      if (!args[2].match(/^#[0-9A-Fa-f]{6}$/))\r\n        throw `Color ${args[2]} is not in form #RRGGBB.`\r\n\r\n      this.hex = args[2].toUpperCase()\r\n      const hsl = ColorConverter.HEXtoHSL(this.hex)\r\n      this.hue = hsl.hue\r\n      this.saturation = hsl.saturation\r\n      this.luminosity = hsl.luminosity\r\n      this.updateBrightness()\r\n    } else if (args.length === 5) {\r\n      this.hue = args[2]\r\n      this.saturation = args[3]\r\n      this.luminosity = args[4]\r\n      this.hex = ColorConverter.HSLtoHEX(this.hue, this.saturation, this.luminosity)\r\n      this.updateBrightness()\r\n    } else {\r\n      if (!args[2].match(/^#[0-9A-Fa-f]{6}$/))\r\n        throw `Color ${args[2]} is not in form #RRGGBB.`\r\n\r\n      this.hex = args[2].toUpperCase()\r\n      this.hue = args[3]\r\n      this.saturation = args[4]\r\n      this.luminosity = args[5]\r\n      this.updateBrightness()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the shades index\r\n   * @param index\r\n   */\r\n  public setIndex(index: number) {\r\n    this.index = index\r\n  }\r\n\r\n  /**\r\n   * Set the shades HEX value and update all other properties\r\n   * @param hex\r\n   * @param fixed\r\n   */\r\n  public setHEX(hex: string, fixed = false) {\r\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\r\n      throw `Color ${hex} is not in form #RRGGBB.`\r\n\r\n    this.fixed = fixed\r\n    this.hex = hex.toUpperCase()\r\n    const hsl = ColorConverter.HEXtoHSL(this.hex)\r\n    this.hue = hsl.hue\r\n    this.saturation = hsl.saturation\r\n    this.luminosity = hsl.luminosity\r\n    this.updateBrightness()\r\n  }\r\n\r\n  /**\r\n   * Set the shades HSL values and update all other properties\r\n   * @param hue\r\n   * @param saturation\r\n   * @param luminosity\r\n   * @param fixed\r\n   */\r\n  public setHSL(hue: number, saturation: number, luminosity: number, fixed = false) {\r\n    this.fixed = fixed\r\n    this.hue = hue\r\n    this.saturation = saturation\r\n    this.luminosity = luminosity\r\n    this.hex = ColorConverter.HSLtoHEX(this.hue, this.saturation, this.luminosity)\r\n    this.updateBrightness()\r\n  }\r\n\r\n  /**\r\n   * Update perceived brightness\r\n   * @private\r\n   */\r\n  private updateBrightness() {\r\n    const rgb = ColorConverter.HEXtoRGB(this.hex)\r\n    this.brightness = Math.round(\r\n      Math.sqrt(\r\n        .299 * rgb.red * rgb.red +\r\n        .587 * rgb.green * rgb.green +\r\n        .114 * rgb.blue * rgb.blue\r\n      ) / 2.55\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Generate a random shade.\r\n   */\r\n  public static generateRandomShade(): Shade {\r\n    return new Shade(\r\n      0,\r\n      true,\r\n      Math.floor(Math.random() * 360),\r\n      30 + Math.floor(Math.random() * 60),\r\n      25 + Math.floor(Math.random() * 50)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a shade.\r\n   * Throws exception if json object is no valid shade object.\r\n   * @param json\r\n   */\r\n  public static parseShade(json: any): Shade {\r\n    if ((!json.index && json.index !== 0)\r\n        || !json.hex\r\n        || (!json.hue && json.hue !== 0)\r\n        || (!json.saturation && json.saturation !== 0)\r\n        || (!json.luminosity && json.luminosity !== 0))\r\n      throw 'Not all parameters for shade are set'\r\n\r\n    return new Shade(json.index, json.fixed, json.hex.toUpperCase(), json.hue, json.saturation, json.luminosity)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "brightness",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "fixed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "hex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "luminosity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "generateRandomShade",
                    "args": [],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a random shade.\n",
                    "description": "<p>Generate a random shade.</p>\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "parseShade",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a shade.\nThrows exception if json object is no valid shade object.\n",
                    "description": "<p>Parse the json object to a shade.\nThrows exception if json object is no valid shade object.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3367,
                                "end": 3371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3361,
                                "end": 3366,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setHEX",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the shades HEX value and update all other properties\n",
                    "description": "<p>Set the shades HEX value and update all other properties</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1723,
                                "end": 1726,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1717,
                                "end": 1722,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1740,
                                "end": 1745,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fixed"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 1734,
                                "end": 1739,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setHSL",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the shades HSL values and update all other properties\n",
                    "description": "<p>Set the shades HSL values and update all other properties</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2225,
                                "end": 2228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2219,
                                "end": 2224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2242,
                                "end": 2252,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "saturation"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2236,
                                "end": 2241,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2266,
                                "end": 2276,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "luminosity"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2260,
                                "end": 2265,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2290,
                                "end": 2295,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fixed"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 2284,
                                "end": 2289,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the shades index\n",
                    "description": "<p>Set the shades index</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1560,
                                "end": 1565,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1554,
                                "end": 1559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateBrightness",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate perceived brightness\n",
                    "description": "<p>Update perceived brightness</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2670,
                                "end": 2677,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindCopyDialog",
            "id": "class-TailwindCopyDialog-4f124c61a5d0e40e1329de4be31d483215d225bb37235df686a2c9dd66d4f3245bc93c3ecf2bf81e09009e593f4ce1cb5488cae9cbb7c179e2f419a5302f9a34",
            "file": "src/app/dialogs/tailwind-copy.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindCopyDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://tailwindcss.com/docs/customizing-colors#color-object-syntax', '_blank')\r\n    })\r\n\r\n    return {\r\n      message: 'The palette has been copied to your clipboard. ' +\r\n        `To use the colors copy the contents of the clipboard to the ${ToUnicodeVariantUtil.toUnicodeVariant('tailwind.config.js', 'm')} file.\\n\\n` +\r\n        'Check TailwindsCSS\\'s documentation for further instructions.',\r\n      actions: [{\r\n        text: 'Read more',\r\n        title: 'Open documentation',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindDialog",
            "id": "class-TailwindDialog-7e16cdd61e04225c0bf45b017a95332ee6e79f7bfc016d12ac62f947e7a532dd9ee50ea936f4178ca56e803aea2d165a01271585d28e24d0069e476b2a8ab9cf",
            "file": "src/app/dialogs/tailwind.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {PaletteExporter} from \"../class/palette-exporter\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {TailwindCopyDialog} from \"./tailwind-copy.dialog\";\r\nimport {TailwindFileDialog} from \"./tailwind-file.dialog\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) { }\r\n\r\n  getNotification() {\r\n    const tailwindCopyEmitter = new EventEmitter()\r\n    tailwindCopyEmitter.subscribe(() => {\r\n      const tailwind = PaletteExporter.exportPaletteToTailwind(this.palette)\r\n      navigator.clipboard.writeText(tailwind).then(() => {\r\n        this.notification.emit(new TailwindCopyDialog(\r\n          this.notification\r\n        ).getNotification())\r\n      }).catch(e => {\r\n        this.notification.emit({\r\n          message: `An error occurred while copying to the clipboard\\n\\n${e}`,\r\n          actions: []\r\n        })\r\n      })\r\n    })\r\n\r\n    const tailwindFileEmitter = new EventEmitter()\r\n    tailwindFileEmitter.subscribe(() => {\r\n      const tailwind = PaletteExporter.exportTailwindFile(this.palette)\r\n      const blob = new Blob([tailwind], {type: 'text/javascript'})\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = 'tailwind.colors.js'\r\n      a.click()\r\n\r\n      this.notification.emit(new TailwindFileDialog(\r\n        this.notification\r\n      ).getNotification())\r\n    })\r\n\r\n    return {\r\n      message: `Do you want to copy the colors to your existing ${ToUnicodeVariantUtil.toUnicodeVariant('tailwind.config.js', 'm')} or create an extra file only for your palette?`,\r\n      actions: [{\r\n        text: 'Copy',\r\n        title: 'Copy content in existing file',\r\n        action: tailwindCopyEmitter\r\n      }, {\r\n        text: 'File',\r\n        title: 'Download a new file',\r\n        action: tailwindFileEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "{ message: string; actions: {}; }",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindFileDialog",
            "id": "class-TailwindFileDialog-b7f8a98b9543a9864fcb1d0a32cc6ebf6eb936d0a53d840640116918f37c19190680b4417886b300e6950249b71ae15c72a4f3562532543690531c382b6a018e",
            "file": "src/app/dialogs/tailwind-file.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {ToUnicodeVariantUtil} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindFileDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://tailwindcss.com/docs/customizing-colors#using-the-default-colors', '_blank')\r\n    })\r\n\r\n    return {\r\n      message: 'Move the downloaded tailwind.colors.js file to the root of your project. ' +\r\n        `Then import the colors in your ${ToUnicodeVariantUtil.toUnicodeVariant('tailwind.config.js', 'm')} file like:\\n` +\r\n        ToUnicodeVariantUtil.toUnicodeVariant('colors: require(\\'./tailwind.colors\\'),', 'm') + '\\n\\n' +\r\n        'Check TailwindsCSS\\'s documentation for further instructions.',\r\n      actions: [{\r\n        text: 'Read more',\r\n        title: 'Open documentation',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToUnicodeVariantUtil",
            "id": "class-ToUnicodeVariantUtil-1a4ba72ff6ec128b8a996fd92500851885286f3ac1c8c259da7992dd4a6be92447eb62e61443f273036d21c085ccff04a58ddb3039ce03eec81f81097e753c37",
            "file": "src/app/utils/to-unicode-variant.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ToUnicodeVariantUtil {\r\n\r\n  static offsets: any = {\r\n    m: [0x1d670, 0x1d7f6],\r\n    b: [0x1d400, 0x1d7ce],\r\n    i: [0x1d434, 0x00030],\r\n    bi: [0x1d468, 0x00030],\r\n    c: [0x0001d49c, 0x00030],\r\n    bc: [0x1d4d0, 0x00030],\r\n    g: [0x1d504, 0x00030],\r\n    d: [0x1d538, 0x1d7d8],\r\n    bg: [0x1d56c, 0x00030],\r\n    s: [0x1d5a0, 0x1d7e2],\r\n    bs: [0x1d5d4, 0x1d7ec],\r\n    is: [0x1d608, 0x00030],\r\n    bis: [0x1d63c, 0x00030],\r\n    o: [0x24B6, 0x2460],\r\n    on: [0x0001f150, 0x2460],\r\n    p: [0x249c, 0x2474],\r\n    q: [0x1f130, 0x00030],\r\n    qn: [0x0001F170, 0x00030],\r\n    w: [0xff21, 0xff10],\r\n    u: [0x2090, 0xff10]\r\n  }\r\n\r\n  static variantOffsets: any = {\r\n    'monospace': 'm',\r\n    'bold' : 'b',\r\n    'italic' : 'i',\r\n    'bold italic' : 'bi',\r\n    'script': 'c',\r\n    'bold script': 'bc',\r\n    'gothic': 'g',\r\n    'gothic bold': 'bg',\r\n    'doublestruck': 'd',\r\n    'sans': 's',\r\n    'bold sans' : 'bs',\r\n    'italic sans': 'is',\r\n    'bold italic sans': 'bis',\r\n    'parenthesis': 'p',\r\n    'circled': 'o',\r\n    'circled negative': 'on',\r\n    'squared': 'q',\r\n    'squared negative': 'qn',\r\n    'fullwidth': 'w'\r\n  }\r\n\r\n  //special characters (absolute values)\r\n  static special: any = {\r\n    m: {\r\n      ' ': 0x2000,\r\n      '-': 0x2013\r\n    },\r\n    i: {\r\n      'h': 0x210e\r\n    },\r\n    g: {\r\n      'C': 0x212d,\r\n      'H': 0x210c,\r\n      'I': 0x2111,\r\n      'R': 0x211c,\r\n      'Z': 0x2128\r\n    },\r\n    d: {\r\n      'C': 0x2102,\r\n      'H': 0x210D,\r\n      'N': 0x2115,\r\n      'P': 0x2119,\r\n      'Q': 0x211A,\r\n      'R': 0x211D,\r\n      'Z': 0x2124\r\n    },\r\n    o: {\r\n      '0': 0x24EA,\r\n      '1': 0x2460,\r\n      '2': 0x2461,\r\n      '3': 0x2462,\r\n      '4': 0x2463,\r\n      '5': 0x2464,\r\n      '6': 0x2465,\r\n      '7': 0x2466,\r\n      '8': 0x2467,\r\n      '9': 0x2468,\r\n    },\r\n    on: {},\r\n    p: {},\r\n    q: {},\r\n    qn: {},\r\n    w: {}\r\n  }\r\n\r\n  static chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\r\n\r\n  static numbers = '0123456789'\r\n\r\n\r\n  public static toUnicodeVariant(str: string, variant: string, flags?: string) {\r\n    if (Object.keys(this.special.p).length === 0) {\r\n      //support for parenthesized latin letters small cases\r\n      //support for full width latin letters small cases\r\n      //support for circled negative letters small cases\r\n      //support for squared letters small cases\r\n      //support for squared letters negative small cases\r\n      ['p', 'w', 'on', 'q', 'qn'].forEach(t => {\r\n        for (let i = 97; i <= 122; i++) {\r\n          this.special[t][String.fromCharCode(i)] = this.offsets[t][0] + (i-97)\r\n        }\r\n      })\r\n    }\r\n\r\n    const type = this.getType(variant)\r\n    const underline = this.getFlag('underline|u', flags)\r\n    const strike = this.getFlag('strike|s', flags)\r\n    let result = ''\r\n\r\n    for (let c of str) {\r\n      let index\r\n      if (this.special[type] && this.special[type][c]) c = String.fromCodePoint(this.special[type][c])\r\n      if (type && (index = this.chars.indexOf(c)) > -1) {\r\n        result += String.fromCodePoint(index + this.offsets[type][0])\r\n      } else if (type && (index = this.numbers.indexOf(c)) > -1) {\r\n        result += String.fromCodePoint(index + this.offsets[type][1])\r\n      } else {\r\n        result += c\r\n      }\r\n      if (underline) result += '\\u0332' // add combining underline\r\n      if (strike) result += '\\u0336' // add combining strike\r\n    }\r\n    return result\r\n  }\r\n\r\n  private static getType(variant: string) {\r\n    if (this.variantOffsets[variant])\r\n      return this.variantOffsets[variant]\r\n    if (this.offsets[variant])\r\n      return variant\r\n    return 'm' //monospace as default\r\n  }\r\n\r\n  private static getFlag(flag: string, flags?: string) {\r\n    if (!flags)\r\n      return false\r\n    return flag.split('|').some(f => flags.split(',').indexOf(f) > -1)\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "chars",
                    "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "numbers",
                    "defaultValue": "'0123456789'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "offsets",
                    "defaultValue": "{\r\n    m: [0x1d670, 0x1d7f6],\r\n    b: [0x1d400, 0x1d7ce],\r\n    i: [0x1d434, 0x00030],\r\n    bi: [0x1d468, 0x00030],\r\n    c: [0x0001d49c, 0x00030],\r\n    bc: [0x1d4d0, 0x00030],\r\n    g: [0x1d504, 0x00030],\r\n    d: [0x1d538, 0x1d7d8],\r\n    bg: [0x1d56c, 0x00030],\r\n    s: [0x1d5a0, 0x1d7e2],\r\n    bs: [0x1d5d4, 0x1d7ec],\r\n    is: [0x1d608, 0x00030],\r\n    bis: [0x1d63c, 0x00030],\r\n    o: [0x24B6, 0x2460],\r\n    on: [0x0001f150, 0x2460],\r\n    p: [0x249c, 0x2474],\r\n    q: [0x1f130, 0x00030],\r\n    qn: [0x0001F170, 0x00030],\r\n    w: [0xff21, 0xff10],\r\n    u: [0x2090, 0xff10]\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "special",
                    "defaultValue": "{\r\n    m: {\r\n      ' ': 0x2000,\r\n      '-': 0x2013\r\n    },\r\n    i: {\r\n      'h': 0x210e\r\n    },\r\n    g: {\r\n      'C': 0x212d,\r\n      'H': 0x210c,\r\n      'I': 0x2111,\r\n      'R': 0x211c,\r\n      'Z': 0x2128\r\n    },\r\n    d: {\r\n      'C': 0x2102,\r\n      'H': 0x210D,\r\n      'N': 0x2115,\r\n      'P': 0x2119,\r\n      'Q': 0x211A,\r\n      'R': 0x211D,\r\n      'Z': 0x2124\r\n    },\r\n    o: {\r\n      '0': 0x24EA,\r\n      '1': 0x2460,\r\n      '2': 0x2461,\r\n      '3': 0x2462,\r\n      '4': 0x2463,\r\n      '5': 0x2464,\r\n      '6': 0x2465,\r\n      '7': 0x2466,\r\n      '8': 0x2467,\r\n      '9': 0x2468,\r\n    },\r\n    on: {},\r\n    p: {},\r\n    q: {},\r\n    qn: {},\r\n    w: {}\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "variantOffsets",
                    "defaultValue": "{\r\n    'monospace': 'm',\r\n    'bold' : 'b',\r\n    'italic' : 'i',\r\n    'bold italic' : 'bi',\r\n    'script': 'c',\r\n    'bold script': 'bc',\r\n    'gothic': 'g',\r\n    'gothic bold': 'bg',\r\n    'doublestruck': 'd',\r\n    'sans': 's',\r\n    'bold sans' : 'bs',\r\n    'italic sans': 'is',\r\n    'bold italic sans': 'bis',\r\n    'parenthesis': 'p',\r\n    'circled': 'o',\r\n    'circled negative': 'on',\r\n    'squared': 'q',\r\n    'squared negative': 'qn',\r\n    'fullwidth': 'w'\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFlag",
                    "args": [
                        {
                            "name": "flag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "flag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getType",
                    "args": [
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toUnicodeVariant",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-27f80baddd25df5072b3fc0e774233647f1bbc701510f09f9df2de303a80ec7eef02d04809d1dca153f44de6d4e11a53d2d60e92c289e2add198b068e590a121",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "navigation",
                    "defaultValue": "[{\r\n    link: '/',\r\n    title: 'Generate a new palette',\r\n    text: 'Regenerate',\r\n    icon: '<path fill=\"currentColor\" d=\"M21.85 44q-1.2 0-2.1-.875-.9-.875-.9-2.125V31H11q-1.2 0-2.1-.9Q8 29.2 8 28V12.85q0-2.75 1.975-4.8T14.75 6H40v22q0 1.2-.9 2.1-.9.9-2.1.9h-7.85v10q0 1.25-.9 2.125t-2.1.875ZM11 20.3h26V9h-2.8v7.05q0 .65-.425 1.075-.425.425-1.075.425-.65 0-1.075-.425-.425-.425-.425-1.075V9h-3.55v2.75q0 .65-.425 1.075-.425.425-1.075.425-.65 0-1.075-.425-.425-.425-.425-1.075V9h-9.9q-1.6 0-2.675 1.15Q11 11.3 11 12.85Zm0 7.7h26v-4.7H11V28Zm0-4.7V28Z\"/>',\r\n  }, {\r\n    link: '/edit',\r\n    title: 'Edit your palette',\r\n    text: 'Edit',\r\n    icon: '<path fill=\"currentColor\" d=\"M7.2 39.05q-.85 0-1.45-.6t-.6-1.5q0-.85.6-1.45t1.45-.6h9.35q.85 0 1.475.6.625.6.625 1.5 0 .85-.625 1.45t-1.475.6Zm0-25.95q-.85 0-1.45-.6t-.6-1.5q0-.85.6-1.45t1.45-.6h17.65q.85 0 1.475.6.625.6.625 1.5 0 .85-.625 1.45t-1.475.6Zm15.95 30.05q-.85 0-1.475-.6-.625-.6-.625-1.5V32.8q0-.85.625-1.45t1.475-.6q.85 0 1.45.6t.6 1.45v2.1h15.6q.85 0 1.45.6t.6 1.5q0 .85-.6 1.45t-1.45.6H25.2v2q0 .9-.6 1.5t-1.45.6Zm-6.6-13q-.85 0-1.45-.6t-.6-1.45v-2.05H7.2q-.85 0-1.45-.6T5.15 24q0-.85.6-1.45t1.45-.6h7.3V19.8q0-.85.6-1.45t1.45-.6q.85 0 1.475.6.625.6.625 1.45v8.3q0 .85-.625 1.45t-1.475.6Zm6.6-4.1q-.85 0-1.475-.6-.625-.6-.625-1.45t.625-1.45q.625-.6 1.475-.6H40.8q.85 0 1.45.6t.6 1.45q0 .85-.6 1.45t-1.45.6Zm8.3-8.8q-.85 0-1.475-.6-.625-.6-.625-1.45V6.95q0-.9.625-1.5t1.475-.6q.85 0 1.45.6t.6 1.5v2h7.3q.85 0 1.45.6t.6 1.5q0 .85-.6 1.45t-1.45.6h-7.3v2.1q0 .85-.6 1.45t-1.45.6Z\"/>',\r\n  }, {\r\n    link: '/preview',\r\n    title: 'Preview your palette with components',\r\n    text: 'Preview',\r\n    icon: '<path fill=\"currentColor\" d=\"M11 37h12v-9H11Zm0-11h12V11H11Zm14 11h12V22H25Zm0-17h12v-9H25ZM9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h30q1.2 0 2.1.9.9.9.9 2.1v3h3v3h-3v7.5h3v3h-3V33h3v3h-3v3q0 1.2-.9 2.1-.9.9-2.1.9Zm0-3h30V9H9v30ZM9 9v30V9Z\"/>',\r\n  }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "paletteService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaletteService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'tailwind-color-generator'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "version",
                    "defaultValue": "environment.version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\r\nimport {environment} from \"../environments/environment\";\r\nimport {StorageService} from \"./services/storage.service\";\r\nimport {ColorService} from \"./services/color.service\";\r\nimport {PaletteService} from \"./services/palette.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n\r\n  title = 'tailwind-color-generator'\r\n  version = environment.version\r\n  dark\r\n\r\n  navigation = [{\r\n    link: '/',\r\n    title: 'Generate a new palette',\r\n    text: 'Regenerate',\r\n    icon: '<path fill=\"currentColor\" d=\"M21.85 44q-1.2 0-2.1-.875-.9-.875-.9-2.125V31H11q-1.2 0-2.1-.9Q8 29.2 8 28V12.85q0-2.75 1.975-4.8T14.75 6H40v22q0 1.2-.9 2.1-.9.9-2.1.9h-7.85v10q0 1.25-.9 2.125t-2.1.875ZM11 20.3h26V9h-2.8v7.05q0 .65-.425 1.075-.425.425-1.075.425-.65 0-1.075-.425-.425-.425-.425-1.075V9h-3.55v2.75q0 .65-.425 1.075-.425.425-1.075.425-.65 0-1.075-.425-.425-.425-.425-1.075V9h-9.9q-1.6 0-2.675 1.15Q11 11.3 11 12.85Zm0 7.7h26v-4.7H11V28Zm0-4.7V28Z\"/>',\r\n  }, {\r\n    link: '/edit',\r\n    title: 'Edit your palette',\r\n    text: 'Edit',\r\n    icon: '<path fill=\"currentColor\" d=\"M7.2 39.05q-.85 0-1.45-.6t-.6-1.5q0-.85.6-1.45t1.45-.6h9.35q.85 0 1.475.6.625.6.625 1.5 0 .85-.625 1.45t-1.475.6Zm0-25.95q-.85 0-1.45-.6t-.6-1.5q0-.85.6-1.45t1.45-.6h17.65q.85 0 1.475.6.625.6.625 1.5 0 .85-.625 1.45t-1.475.6Zm15.95 30.05q-.85 0-1.475-.6-.625-.6-.625-1.5V32.8q0-.85.625-1.45t1.475-.6q.85 0 1.45.6t.6 1.45v2.1h15.6q.85 0 1.45.6t.6 1.5q0 .85-.6 1.45t-1.45.6H25.2v2q0 .9-.6 1.5t-1.45.6Zm-6.6-13q-.85 0-1.45-.6t-.6-1.45v-2.05H7.2q-.85 0-1.45-.6T5.15 24q0-.85.6-1.45t1.45-.6h7.3V19.8q0-.85.6-1.45t1.45-.6q.85 0 1.475.6.625.6.625 1.45v8.3q0 .85-.625 1.45t-1.475.6Zm6.6-4.1q-.85 0-1.475-.6-.625-.6-.625-1.45t.625-1.45q.625-.6 1.475-.6H40.8q.85 0 1.45.6t.6 1.45q0 .85-.6 1.45t-1.45.6Zm8.3-8.8q-.85 0-1.475-.6-.625-.6-.625-1.45V6.95q0-.9.625-1.5t1.475-.6q.85 0 1.45.6t.6 1.5v2h7.3q.85 0 1.45.6t.6 1.5q0 .85-.6 1.45t-1.45.6h-7.3v2.1q0 .85-.6 1.45t-1.45.6Z\"/>',\r\n  }, {\r\n    link: '/preview',\r\n    title: 'Preview your palette with components',\r\n    text: 'Preview',\r\n    icon: '<path fill=\"currentColor\" d=\"M11 37h12v-9H11Zm0-11h12V11H11Zm14 11h12V22H25Zm0-17h12v-9H25ZM9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h30q1.2 0 2.1.9.9.9.9 2.1v3h3v3h-3v7.5h3v3h-3V33h3v3h-3v3q0 1.2-.9 2.1-.9.9-2.1.9Zm0-3h30V9H9v30ZM9 9v30V9Z\"/>',\r\n  }]\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    public colorService: ColorService,\r\n    public paletteService: PaletteService,\r\n    public router: Router\r\n  ) {\r\n    // Redirect to https if server served / browser fetched with http\r\n    if (environment.production && window.location.href.startsWith('http://'))\r\n      window.location.href = 'https://' + window.location.href.substring(6)\r\n\r\n    // Load theme from local storage and subscribe to changes\r\n    this.dark = storage.loadTheme()\r\n    storage.darkEmitter.subscribe(d => this.dark = d.valueOf())\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\r\n  class=\"min-h-screen grid grid-rows-site content-between py-6\r\n         text-gray-900 bg-gray-50 dark:text-gray-100 dark:bg-gray-900\r\n         transition-colors duration-500\"\r\n>\r\n  <header class=\"w-full grid grid-cols-1 sm:grid-cols-7 lg:grid-cols-4 gap-4 px-8 items-center mb-10\">\r\n    <h1 class=\"col-span-2 lg:col-span-1 text-center sm:text-left\">Color Palette Generator</h1>\r\n\r\n    <nav class=\"col-span-1 sm:col-span-4 lg:col-span-2\">\r\n      <div\r\n        class=\"mr-auto sm:mx-auto w-fit\"\r\n      >\r\n        <ul\r\n          *ngIf=\"paletteService.hasPalette()\"\r\n          class=\"flex flex-wrap gap-2 md:gap-4\r\n                 font-medium text-gray-700 dark:text-gray-200\">\r\n          <li *ngFor=\"let nav of navigation\">\r\n            <a\r\n              class=\"inline-flex py-2 px-4 items-center\r\n                     rounded cursor-pointer transition-colors duration-500\"\r\n              [class]=\"(router.url === nav.link)\r\n                ? 'text-primary-600 bg-primary-200 dark:text-primary-900 dark:bg-primary-500'\r\n                : 'hover:text-gray-900 hover:bg-gray-100 dark:hover:text-gray-50 dark:hover:bg-gray-800'\"\r\n              [routerLink]=\"nav.link\"\r\n              [title]=\"nav.title\"\r\n            >\r\n              <svg\r\n                class=\"w-6 h-6 mr-2 hidden md:block\"\r\n                viewBox=\"0 0 48 48\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                [innerHTML]=\"nav.icon | safeHtml\"\r\n              >\r\n              </svg>\r\n\r\n              {{nav.text}}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n\r\n    <light-switch\r\n      class=\"ml-auto\"\r\n      [dark]=\"dark\"\r\n    >\r\n    </light-switch>\r\n  </header>\r\n\r\n\r\n  <main>\r\n    <router-outlet>\r\n    </router-outlet>\r\n  </main>\r\n\r\n\r\n  <footer\r\n    class=\"flex gap-4 flex-col sm:flex-row px-8 items-center justify-between\r\n           text-center w-full max-w-4xl mx-auto mt-10\"\r\n  >\r\n    <a\r\n      href=\"https://github.com/pawcoding/tailwind-color-generator\"\r\n      rel=\"noreferrer noopener\"\r\n      target=\"_blank\"\r\n      title=\"View source code on GitHub\"\r\n    >\r\n      View on GitHub\r\n    </a>\r\n\r\n    <span\r\n      class=\"cursor-default\"\r\n    >\r\n      Version {{version}}\r\n    </span>\r\n\r\n    <a\r\n      href=\"https://pawcode.de\"\r\n      target=\"_blank\"\r\n      title=\"Created by pawcode Development\"\r\n    >\r\n      <img\r\n        class=\"inline h-8\"\r\n        alt=\"pawcode&nbsp;Development\"\r\n        [src]=\"'assets/pawcode-' + (dark ? 'light' : 'dark') + '.svg'\"\r\n      >\r\n    </a>\r\n  </footer>\r\n\r\n\r\n  <custom-dialog\r\n    class=\"fixed top-0 left-0\"\r\n  ></custom-dialog>\r\n\r\n  <notification\r\n    class=\"fixed bottom-0 right-0\"\r\n  ></notification>\r\n</div>\r\n"
        },
        {
            "name": "ColorEditorComponent",
            "id": "component-ColorEditorComponent-c0363fef65dcfbdeb385e597c2c9d9903cebd157176617b5c4df0a2be08ae0fc7a5a891308c0036a9d8a67c7970ca6c544304ca5188f25d467b5a72dca846809",
            "file": "src/app/components/color-editor/color-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-editor",
            "styleUrls": [
                "./color-editor.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./color-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "changeShade",
                    "args": [
                        {
                            "name": "shadeIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange a shade to be edited\n",
                    "description": "<p>Change a shade to be edited</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2644,
                                "end": 2654,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shadeIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2638,
                                "end": 2643,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hueToWheel",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate from hue to color wheel degree\n",
                    "description": "<p>Calculate from hue to color wheel degree</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3581,
                                "end": 3584,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3575,
                                "end": 3580,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "releaseShade",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRelease a shade and let it be interpolated instead\n",
                    "description": "<p>Release a shade and let it be interpolated instead</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2863,
                                "end": 2868,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2857,
                                "end": 2862,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2882,
                                "end": 2888,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2876,
                                "end": 2881,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateColor",
                    "args": [
                        {
                            "name": "type",
                            "type": "UpdateType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate current shade. The property with type is changed to the new value.\n",
                    "description": "<p>Update current shade. The property with type is changed to the new value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1217,
                                "end": 1221,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "UpdateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1211,
                                "end": 1216,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Property to change</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1254,
                                "end": 1259,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1248,
                                "end": 1253,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Value to change to</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate all css properties to the values of the current selected shade.\n",
                    "description": "<p>Update all css properties to the values of the current selected shade.</p>\n"
                },
                {
                    "name": "wheelToHue",
                    "args": [
                        {
                            "name": "wheel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate from color wheel degree to hue\n",
                    "description": "<p>Calculate from color wheel degree to hue</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3225,
                                "end": 3230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "wheel"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3219,
                                "end": 3224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {Color} from \"../../models/color.model\";\r\nimport {Shade} from \"../../models/shade.model\";\r\nimport {ChangeType, ColorService} from \"../../services/color.service\";\r\nimport {ToUnicodeVariantUtil} from \"../../utils/to-unicode-variant.util\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\n\r\n@Component({\r\n  selector: 'color-editor',\r\n  templateUrl: './color-editor.component.html',\r\n  styleUrls: ['./color-editor.component.css']\r\n})\r\nexport class ColorEditorComponent implements OnInit {\r\n\r\n  @Input()\r\n  dark = false\r\n\r\n  shade: Shade | undefined\r\n  color: Color | undefined\r\n\r\n  constructor(\r\n    public colorService: ColorService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    this.colorService.getColorChangeEmitter().subscribe(changeType => {\r\n      if (changeType === ChangeType.LOAD) {\r\n        this.color = this.colorService.getColor()\r\n        this.shade = this.colorService.getShade()\r\n      }\r\n\r\n      this.updateProperties()\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.updateProperties()\r\n  }\r\n\r\n  /**\r\n   * Update current shade. The property with type is changed to the new value.\r\n   * @param type Property to change\r\n   * @param value Value to change to\r\n   */\r\n  updateColor(type: UpdateType, value: string | number) {\r\n    if (!this.shade)\r\n      return\r\n\r\n    if (type === UpdateType.HEX && isNaN(+value)) {\r\n      if (`${value}`.match(/^#[0-9A-Fa-f]{6}$/))\r\n        this.shade.setHEX(`${value}`, true)\r\n    } else if (!isNaN(+value)) {\r\n      value = parseInt(`${value}`)\r\n      if (type === UpdateType.HUE)\r\n        this.shade.setHSL(this.wheelToHue(value), this.shade.saturation, this.shade.luminosity, true)\r\n      else if (type === UpdateType.SATURATION)\r\n        this.shade.setHSL(this.shade.hue, value, this.shade.luminosity, true)\r\n      else if (type === UpdateType.LUMINOSITY)\r\n        this.shade.setHSL(this.shade.hue, this.shade.saturation, 100 - value, true)\r\n    }\r\n\r\n    this.colorService.adjustShades()\r\n  }\r\n\r\n  /**\r\n   * Update all css properties to the values of the current selected shade.\r\n   */\r\n  updateProperties() {\r\n    if (!this.shade)\r\n      return\r\n\r\n    document.documentElement.style.setProperty('--selected-hex', this.shade.hex)\r\n    document.documentElement.style.setProperty('--selected-hue', String(this.shade.hue))\r\n    document.documentElement.style.setProperty('--selected-saturation', this.shade.saturation + \"%\")\r\n    document.documentElement.style.setProperty('--selected-luminosity', this.shade.luminosity + \"%\")\r\n  }\r\n\r\n  /**\r\n   * Change a shade to be edited\r\n   * @param shadeIndex\r\n   */\r\n  changeShade(shadeIndex: number) {\r\n    if (this.color)\r\n      this.colorService.loadColor(this.color, shadeIndex)\r\n  }\r\n\r\n  /**\r\n   * Release a shade and let it be interpolated instead\r\n   * @param shade\r\n   * @param $event\r\n   */\r\n  releaseShade(shade: Shade, $event: MouseEvent) {\r\n    $event.preventDefault()\r\n    if (!this.color)\r\n      return\r\n\r\n    if (this.color.shades.filter(s => s.fixed).length > 1) {\r\n      shade.fixed = false\r\n      this.colorService.adjustShades()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate from color wheel degree to hue\r\n   * @param wheel\r\n   */\r\n  wheelToHue(wheel: number) {\r\n    let newHue\r\n    if (wheel < 120)\r\n      newHue = .5 * wheel\r\n    else if (wheel < 180)\r\n      newHue = wheel + 300\r\n    else if (wheel < 240)\r\n      newHue = 2 * wheel + 120\r\n    else\r\n      newHue = wheel\r\n\r\n    return newHue % 360\r\n  }\r\n\r\n  /**\r\n   * Calculate from hue to color wheel degree\r\n   * @param hue\r\n   */\r\n  hueToWheel(hue: number) {\r\n    let wheel\r\n    if (hue < 60)\r\n      wheel = 2 * hue\r\n    else if (hue < 120)\r\n      wheel = hue + 60\r\n    else if (hue < 240)\r\n      wheel = .5 * hue + 120\r\n    else\r\n      wheel = hue\r\n\r\n    return wheel % 360\r\n  }\r\n\r\n}\r\n\r\nenum UpdateType {\r\n  HEX, HUE, SATURATION, LUMINOSITY\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input[type=range] {\r\n  @apply h-3 mt-2 w-full outline-none appearance-none cursor-pointer rounded;\r\n}\r\n\r\ninput[type=range]::-webkit-slider-thumb {\r\n  @apply w-6 h-6 cursor-grab appearance-none outline-none border-none rounded;\r\n  background-color: var(--selected-hex);\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n}\r\n\r\ninput[type=range]::-moz-range-thumb {\r\n  @apply w-6 h-6 cursor-grab appearance-none outline-none border-none rounded;\r\n  background-color: var(--selected-hex);\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n}\r\n\r\n#hueInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(0, var(--selected-saturation), var(--selected-luminosity)) 0%,\r\n  hsl(60, var(--selected-saturation), var(--selected-luminosity)) 33.3%,\r\n  hsl(120, var(--selected-saturation), var(--selected-luminosity)) 50%,\r\n  hsl(240, var(--selected-saturation), var(--selected-luminosity)) 66.6%,\r\n  hsl(360, var(--selected-saturation), var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#saturationInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), 0%, var(--selected-luminosity)) 0%,\r\n  hsl(var(--selected-hue), 100%, var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#luminosityInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 100%) 0%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 50%) 50%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 0%) 100%);\r\n}\r\n",
                    "styleUrl": "./color-editor.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\" *ngIf=\"shade && color\" class=\"w-full\">\r\n  <section\r\n    class=\"fixed w-full h-full top-0 left-0 flex items-center justify-center z-20\r\n           bg-gray-900/50 dark:bg-gray-900/90\"\r\n    (click)=\"colorService.closeEditor()\"\r\n  >\r\n    <article\r\n      class=\"w-full max-w-sm mx-auto p-4 grid gap-2\r\n             font-medium bg-gray-100 text-gray-900 dark:bg-gray-700 dark:text-gray-100 rounded\"\r\n      (click)=\"$event.stopPropagation()\"\r\n    >\r\n      <h2 class=\"mb-2\">Edit Color</h2>\r\n\r\n\r\n      <!-- Edit Hex -->\r\n      <div class=\"flex rounded overflow-clip\">\r\n        <input\r\n          type=\"color\"\r\n          title=\"Select a shade\"\r\n          id=\"hexInput\" #hexInput\r\n          class=\"w-1/5 h-10\"\r\n          [value]=\"shade.hex\"\r\n          (input)=\"updateColor(0, hexInput.value)\"\r\n        >\r\n\r\n        <input\r\n          type=\"text\"\r\n          title=\"Put your hex code here\"\r\n          id=\"hexCode\" #hexCode\r\n          placeholder=\"#4472C4\"\r\n          class=\"w-4/5\r\n                 text-medium text-gray-900 bg-gray-200 dark:text-gray-200 dark:bg-gray-800 transition-colors duration-500\r\n                 border-0 focus:ring-0\"\r\n          [value]=\"shade.hex\"\r\n          (input)=\"updateColor(0, hexCode.value)\"\r\n        >\r\n      </div>\r\n\r\n      <!-- Edit Hue -->\r\n      <div>\r\n        <label\r\n          for=\"hueInput\"\r\n          class=\"flex justify-between\"\r\n        >\r\n          <span>Hue</span>\r\n          <span id=\"hueLabel\" #hueLabel>{{shade.hue}}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          title=\"Adjust the hue\"\r\n          id=\"hueInput\" #hueInput\r\n          min=0 max=360 step=\"1\"\r\n          [value]=\"hueToWheel(shade.hue)\"\r\n          (input)=\"updateColor(1, hueInput.value)\"\r\n        >\r\n      </div>\r\n\r\n      <!-- Edit Saturation -->\r\n      <div>\r\n        <label\r\n          for=\"saturationInput\"\r\n          class=\"flex justify-between\"\r\n        >\r\n          <span>Saturation</span>\r\n          <span id=\"saturationLabel\" #saturationLabel>{{shade.saturation}}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          title=\"Adjust the saturation\"\r\n          id=\"saturationInput\" #saturationInput\r\n          min=0 max=100 step=\"1\"\r\n          [value]=\"shade.saturation\"\r\n          (input)=\"updateColor(2, saturationInput.value)\"\r\n        >\r\n      </div>\r\n\r\n      <!-- Edit Luminosity -->\r\n      <div>\r\n        <label\r\n          for=\"luminosityInput\"\r\n          class=\"flex justify-between\"\r\n        >\r\n          <span>Luminosity</span>\r\n          <span id=\"luminosityLabel\" #luminosityLabel>{{shade.luminosity}}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          title=\"Adjust the luminosity\"\r\n          id=\"luminosityInput\" #luminosityInput\r\n          min=0 max=100 step=\"1\"\r\n          [value]=\"100 - shade.luminosity\"\r\n          (input)=\"updateColor(3, luminosityInput.value)\"\r\n        >\r\n      </div>\r\n\r\n\r\n      <!-- Preview Color -->\r\n      <section class=\"grow grid grid-cols-10 mt-8 text-center overflow-clip cursor-default\">\r\n        <span\r\n          *ngFor=\"let shadeToShow of color.shades\"\r\n          [ngStyle]=\"{\r\n            'background-color': shadeToShow.hex,\r\n            'border-color': shadeToShow === shade ? 'currentColor' : shadeToShow.hex,\r\n            'color': color.shades[shadeToShow.brightness > 51 ? 9 : 0].hex,\r\n            'font-weight': shadeToShow.fixed ? 'bold' : 'inherit'\r\n          }\"\r\n          [class]=\"shadeToShow.index === 50 ? 'rounded-l' : (shadeToShow.index === 900 ? 'rounded-r' : '')\"\r\n          class=\"flex w-full h-14 items-center justify-center cursor-pointer border-4\"\r\n          title=\"Edit this shade&#10;Rightclick: Interpolate this shade\"\r\n          (click)=\"changeShade(shadeToShow.index)\"\r\n          (contextmenu)=\"releaseShade(shadeToShow, $event)\"\r\n        >\r\n          {{shadeToShow.fixed ? '■' : ''}}\r\n        </span>\r\n      </section>\r\n\r\n\r\n      <!-- Buttons -->\r\n      <section class=\"ml-auto\">\r\n        <button\r\n          class=\"py-2 px-4 mt-4\r\n                 font-medium bg-gray-200 dark:bg-gray-800 rounded transition-all duration-200\"\r\n          title=\"Close editor without saving\"\r\n          (click)=\"colorService.closeEditor()\"\r\n        >\r\n          Cancel\r\n        </button>\r\n\r\n        <button\r\n          class=\"py-2 px-4 mt-4 ml-2\r\n                 font-medium text-primary-100 bg-primary-700 dark:bg-primary-600 rounded transition-all duration-200\"\r\n          title=\"Save changes\"\r\n          (click)=\"colorService.saveColor()\"\r\n        >\r\n          Save\r\n        </button>\r\n      </section>\r\n    </article>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "ColorViewerComponent",
            "id": "component-ColorViewerComponent-8b55c45039fa6fc2d97b3a9c1d25f2cf3c3c71b53e480c344f6862b76014c218b45f015f9cf1c12ceaa9d212c0ec7e45b907dda1bb0d907907ab235b453de04b",
            "file": "src/app/components/color-viewer/color-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./color-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Color",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editingState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "editName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editName'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose color name editor\n",
                    "description": "<p>Close color name editor</p>\n"
                },
                {
                    "name": "copyToClipboard",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCopy a shades hex to clipboard.\n",
                    "description": "<p>Copy a shades hex to clipboard.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1603,
                                "end": 1608,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1597,
                                "end": 1602,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1622,
                                "end": 1628,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1616,
                                "end": 1621,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "editShade",
                    "args": [
                        {
                            "name": "shadeIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen editor with the shade with the given index\n",
                    "description": "<p>Open editor with the shade with the given index</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1057,
                                "end": 1067,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shadeIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1051,
                                "end": 1056,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen color name editor\n",
                    "description": "<p>Open color name editor</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Color} from \"../../models/color.model\";\r\nimport {ColorService} from \"../../services/color.service\";\r\nimport {Shade} from \"../../models/shade.model\";\r\nimport {ToUnicodeVariantUtil} from \"../../utils/to-unicode-variant.util\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\n\r\n@Component({\r\n  selector: 'color-viewer',\r\n  templateUrl: './color-viewer.component.html',\r\n})\r\nexport class ColorViewerComponent implements OnInit {\r\n\r\n  @Input()\r\n  color: Color\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Color>()\r\n\r\n  editingState = false\r\n\r\n  @ViewChild('editName')\r\n  editName: ElementRef<HTMLInputElement> | undefined\r\n\r\n  constructor(\r\n    public colorService: ColorService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    this.color = Color.generateRandomColor()\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Open editor with the shade with the given index\r\n   * @param shadeIndex\r\n   */\r\n  editShade(shadeIndex: number) {\r\n    if (this.color)\r\n      this.colorService.loadColor(this.color, shadeIndex)\r\n  }\r\n\r\n  /**\r\n   * Open color name editor\r\n   */\r\n  openEditor() {\r\n    this.editingState = true\r\n    setTimeout(() => {\r\n      this.editName?.nativeElement.focus()\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Close color name editor\r\n   */\r\n  closeEditor() {\r\n    this.editingState = false\r\n    this.color.name = this.editName?.nativeElement.value || 'Random'\r\n  }\r\n\r\n  /**\r\n   * Copy a shades hex to clipboard.\r\n   * @param shade\r\n   * @param $event\r\n   */\r\n  copyToClipboard(shade: Shade, $event: MouseEvent) {\r\n    $event.preventDefault()\r\n    navigator.clipboard.writeText(shade.hex).then(() => {\r\n      this.notificationService.notification.emit(`Copied \"${ToUnicodeVariantUtil.toUnicodeVariant(shade.hex, 'm')}\" to your clipboard.`)\r\n    }).catch(e => {\r\n      console.error('Error while copying to clipboard', e)\r\n    })\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\">\r\n  <article\r\n    class=\"my-8 items-center cursor-default overflow-clip\r\n           grid grid-cols-2 sm:grid-cols-5 lg:grid-cols-10 grid-areas-color-square sm:grid-areas-color-semi lg:grid-areas-color-wide\"\r\n  >\r\n    <!-- Name of the color -->\r\n    <div class=\"grid-in-name flex gap-4 items-center mb-2\">\r\n      <h3\r\n        *ngIf=\"!editingState\"\r\n        class=\"inline-block py-0 cursor-pointer\"\r\n        (click)=\"openEditor()\"\r\n      >\r\n        {{color.name}}\r\n      </h3>\r\n\r\n      <input *ngIf=\"editingState\"\r\n             type=\"text\" #editName\r\n             placeholder=\"Color name\"\r\n             class=\"bg-transparent p-0 mb-1 mt-1.5 text-lg font-bold\r\n                    border-0 focus:border-b-primary-700 border-b-2 focus:ring-0 transition-all duration-200\"\r\n             (focusout)=\"closeEditor()\"\r\n             (keydown.enter)=\"closeEditor()\"\r\n             [value]=\"color.name\">\r\n\r\n      <span\r\n        *ngIf=\"!editingState\"\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        title=\"Edit color name\"\r\n        (click)=\"openEditor()\"\r\n      >\r\n        <img src=\"/assets/icons/edit.svg\" alt=\"Edit name\" class=\"icon\">\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Action Buttons -->\r\n    <div\r\n      class=\"grid-in-button flex gap-2 h-full justify-end items-center\"\r\n    >\r\n      <span\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        title=\"Tune color\"\r\n        (click)=\"colorService.loadColor(color)\"\r\n      >\r\n        <img\r\n          class=\"icon\"\r\n          src=\"/assets/icons/tune.svg\"\r\n          alt=\"Tune color\"\r\n        >\r\n      </span>\r\n\r\n      <span\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        title=\"Remove color from palette\"\r\n        (click)=\"onRemove.emit(color)\"\r\n      >\r\n        <img\r\n          class=\"icon\"\r\n          src=\"/assets/icons/delete.svg\"\r\n          alt=\"Remove from palette\"\r\n        >\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Display all shades -->\r\n    <div\r\n      class=\"grid-in-shade grid grid-cols-10 sm:grid-cols-5 lg:grid-cols-10 gap-2\"\r\n    >\r\n      <span\r\n        *ngFor=\"let shade of color.shades; index as i\"\r\n        title=\"Tune shade\"\r\n        class=\"block w-full py-4\r\n               text-center text-lg font-semibold cursor-pointer rounded\"\r\n        [ngStyle]=\"{\r\n          'background-color': shade.hex,\r\n          'color': color.shades[shade.brightness > 51 ? 9 : 0].hex\r\n        }\"\r\n        (click)=\"editShade(shade.index)\"\r\n        (contextmenu)=\"copyToClipboard(shade, $event)\"\r\n      >\r\n        <span class=\"opacity-0 sm:opacity-100\">\r\n          {{shade.index}}\r\n          <br>\r\n          {{shade.hex.toUpperCase()}}\r\n        </span>\r\n      </span>\r\n    </div>\r\n  </article>\r\n</div>\r\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-23931b761aaf29f8b66d95c39906748df3b3e1ee9ca2a8b9ba4e8fa208331546c0822b04bd55a7cb1068b24675c16000e82c7dc35522987d7ad1108377bad123",
            "file": "src/app/components/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dialog | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport { NotificationService} from \"../../services/notification.service\";\nimport {Dialog} from \"../../interfaces/dialog.interface\";\n\n@Component({\n  selector: 'custom-dialog',\n  templateUrl: './dialog.component.html',\n})\nexport class DialogComponent implements OnInit {\n\n  @Input()\n  dark = false\n\n  content: Dialog | undefined\n\n  constructor(\n    private notificationService: NotificationService\n  ) {\n    notificationService.dialog\n      .subscribe(dialogContent => this.content = dialogContent)\n  }\n\n  ngOnInit(): void {\n  }\n\n  closeNotification() {\n    this.notificationService.dialog.emit(undefined)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div tabindex=\"-1\" *ngIf=\"content\" (click)=\"closeNotification()\"\n     class=\"flex overflow-y-auto overflow-x-hidden z-40 h-modal h-screen w-screen justify-center items-center bg-gray-900/50 dark:bg-gray-900/75 cursor-pointer\" [class]=\"dark ? 'dark' : ''\" aria-hidden=\"true\"\n>\n  <div class=\"relative p-4 w-full max-w-2xl\" (click)=\"$event.stopPropagation()\">\n    <article class=\"relative bg-gray-100 text-gray-900 rounded dark:bg-gray-700 dark:text-gray-100 p-6\">\n\n      <button type=\"button\" (click)=\"closeNotification()\"\n              title=\"Close dialog\"\n              class=\"absolute top-3 right-2.5 bg-transparent hover:bg-gray-200 rounded text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 transition-colors duration-200\">\n        <svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path>\n        </svg>\n        <span class=\"sr-only\">Close dialog</span>\n      </button>\n\n      <div class=\"mt-4 text-center\">\n        <p class=\"text-lg font-normal py-2 lg:py-3\"\n            [innerText]=\"content.message\">\n        </p>\n\n        <button\n          *ngFor=\"let action of content.actions\"\n          type=\"button\"\n          class=\"mt-2 mx-2 bg-gray-200 hover:bg-gray-300 focus:ring-0 focus:outline-none rounded text-sm font-medium px-5 py-2.5 focus:z-10 dark:bg-gray-800 dark:hover:bg-gray-900 transition-all duration-200\"\n          [title]=\"action.title\"\n          (click)=\"action.action.emit(undefined)\"\n        >\n          {{action.text}}\n        </button>\n      </div>\n    </article>\n  </div>\n</div>\n"
        },
        {
            "name": "EditComponent",
            "id": "component-EditComponent-1525894eee27343e42fe87b529faaf750706941209fea49dd0fdabefb79490dc176598e45c0a4bd13a778acce0f160596b886379b563392fb2ae5e0df81a541d",
            "file": "src/app/pages/edit/edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Palette | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Palette} from \"../../models/palette.model\";\nimport {PaletteService} from \"../../services/palette.service\";\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n})\nexport class EditComponent implements OnInit {\n\n  palette: Palette | undefined\n\n  constructor(\n    private paletteService: PaletteService\n  ) {\n    paletteService.getPaletteChangeEmitter().subscribe(palette => {\n      this.palette = palette\n    })\n    this.palette = paletteService.getPalette()\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"palette\">\n  <color-editor></color-editor>\n\n  <section class=\"py-2 max-w-screen-xl mx-auto\">\n    <palette-viewer\n      [palette]=\"palette\"\n    ></palette-viewer>\n  </section>\n</div>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-b59b6e94b63000a92a71f8f205c363755daa97145b9f817c376ba7092c0525bfe8020b948e653f5b90a3b963bb62cd2831b65205f92a66c539c20ec46b227289",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loadBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSpanElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'loadBar'"
                        }
                    ]
                },
                {
                    "name": "loadContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'loadContainer'"
                        }
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "scheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaletteScheme",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "schemes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "schemeTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "generatePalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScheme",
                    "args": [
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {Shade} from \"../../models/shade.model\";\nimport {NotificationService} from \"../../services/notification.service\";\nimport {PaletteScheme} from \"../../class/palette-generator\";\nimport {PaletteService} from \"../../services/palette.service\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n})\nexport class HomeComponent implements OnInit {\n\n  value: string\n  scheme: PaletteScheme\n  schemeTitle: string\n  schemes: any\n  invalid = false\n  dropdown = false\n  loading = false\n  progress = 0\n\n  @ViewChild('loadContainer')\n  loadContainer: ElementRef<HTMLDivElement> | undefined\n  @ViewChild('loadBar')\n  loadBar: ElementRef<HTMLSpanElement> | undefined\n\n  constructor(\n    private notificationService: NotificationService,\n    private paletteService: PaletteService,\n    private router: Router\n  ) {\n    this.value = paletteService.hex || Shade.generateRandomShade().hex.toUpperCase()\n    let i = 0\n    this.schemes = Object.values(PaletteScheme)\n      .filter(s => s.toString().length > 1)\n      .map(s => {\n        return {\n          index: i++,\n          for: 'scheme' + s.toString()\n            .replace('_', ' ')\n            .replace(/(\\w)(\\w*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase())\n            .replace(' ', ''),\n          name: s.toString(),\n          title: s.toString().charAt(0) + s.toString()\n            .substring(1)\n            .replace('_', ' ')\n            .toLowerCase(),\n          scheme: s\n        }\n    })\n\n    this.scheme = paletteService.scheme\n    this.schemeTitle = this.schemes\n      .find((s: { index: PaletteScheme; }) => s.index === this.scheme)\n      .title\n  }\n\n  ngOnInit(): void {\n  }\n\n  updateValue(value: string) {\n    this.invalid = !value.match(/^#[0-9A-Fa-f]{6}$/)\n    if (!this.invalid)\n      this.value = value.toUpperCase()\n  }\n\n  updateScheme(scheme: PaletteScheme) {\n    this.scheme = scheme\n    const index = Object.values(PaletteScheme).indexOf(scheme) % 8\n    this.schemeTitle = this.schemes\n      .find((s: { index: PaletteScheme; }) => s.index === index)\n      .title\n    this.dropdown = false\n  }\n\n  generatePalette() {\n    if (this.invalid) {\n      this.notificationService.notification.emit('You need to enter a 6-digit hex code.')\n      return\n    }\n\n    this.loading = true\n    this.paletteService.generatePalette(this.value, this.scheme)\n\n    const interval = setInterval(() => {\n      this.progress = Math.round(100 * (this.loadBar?.nativeElement.clientWidth || 0) / (this.loadContainer?.nativeElement.clientWidth || 100))\n    }, 50)\n\n    setTimeout(() => {\n      clearInterval(interval)\n      this.router.navigate(['edit'])\n    }, 5100)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <article class=\"text-center text-lg\">\n    <section *ngIf=\"!loading\">\n      <p class=\"font-bold\">\n        Generate an entire color palette from just one color\n      </p>\n\n      <p>\n        Enter a hex code below or pick a color to get a full color palette.\n      </p>\n\n      <div class=\"flex flex-col mt-4 max-w-xxs mx-auto relative\">\n        <span\n          class=\"flex rounded overflow-clip\"\n        >\n          <input\n            type=\"color\"\n            title=\"Pick your color\"\n            id=\"color\" #color\n            class=\"w-1/5 h-10\"\n            [value]=\"value\"\n            (input)=\"updateValue(color.value)\"\n          >\n\n          <input\n            type=\"text\"\n            title=\"Put your hex code here\"\n            id=\"hexCode\" #hexCode\n            placeholder=\"#4472C4\"\n            class=\"w-4/5\n                   text-medium text-gray-900 bg-gray-100 dark:text-gray-200 dark:bg-gray-800 transition-colors duration-500\n                   border-0 focus:ring-0\"\n            [value]=\"value\"\n            (input)=\"updateValue(hexCode.value)\"\n          >\n        </span>\n\n        <button\n          class=\"py-2 px-4 mt-2 inline-flex items-center\n                 text-primary-100 bg-primary-700 font-medium rounded\n                 transition-colors duration-500\"\n          [disabled]=\"invalid\"\n        >\n          <span\n            class=\"text-center grow\"\n            [class]=\"invalid ? 'cursor-not-allowed' : 'cursor-pointer'\"\n            [title]=\"invalid ? 'You need a 6-digit hex code' : 'Generate a color palette'\"\n            (click)=\"generatePalette()\"\n          >\n            {{schemeTitle}}\n          </span>\n\n          <svg\n            class=\"ml-4 w-6 h-6 cursor-pointer\"\n            fill=\"currentColor\"\n            viewBox=\"0 0 48 48\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            (click)=\"dropdown = !dropdown\"\n          >\n            <path d=\"M24 30.95q-.45 0-.875-.175t-.775-.525l-9.9-9.9q-.65-.65-.625-1.65.025-1 .675-1.7.75-.75 1.675-.675.925.075 1.625.725l8.2 8.2 8.2-8.2q.7-.65 1.7-.7 1-.05 1.65.7.75.7.675 1.675-.075.975-.725 1.675l-9.85 9.85q-.35.35-.775.525-.425.175-.875.175Z\"/>\n          </svg>\n        </button>\n\n        <div\n          class=\"w-64 mt-1 p-2 absolute top-full\n                 text-gray-800 bg-gray-100 dark:text-gray-100 dark:bg-gray-700 rounded\"\n          [class]=\"dropdown ? '' : 'hidden'\"\n          (mouseleave)=\"dropdown = false\"\n        >\n          <span class=\"block p-2 mb-1 text-left text-base font-medium\">\n            Pick a color scheme:\n          </span>\n\n          <section class=\"h-48 overflow-y-auto text-sm scrollbar-thin scrollbar-thumb-primary-600 scrollbar-track-gray-300 dark:scrollbar-track-gray-600\">\n            <label\n              *ngFor=\"let schemeToShow of schemes\"\n              class=\"block p-2 mb-1 mr-4\n                     hover:bg-gray-200 dark:hover:bg-gray-600 rounded cursor-pointer transition-colors duration-500\"\n              [htmlFor]=\"schemeToShow.for\"\n            >\n              <input\n                type=\"radio\"\n                name=\"scheme\"\n                class=\"hidden peer\"\n                [checked]=\"schemeToShow.index === scheme\"\n                [id]=\"schemeToShow.for\"\n                [value]=\"schemeToShow.name\"\n                (change)=\"updateScheme(schemeToShow.scheme)\"\n              >\n\n              <span class=\"peer-checked:font-bold peer-checked:text-primary-700 dark:peer-checked:text-primary-500\">\n                {{schemeToShow.title}}\n              </span>\n            </label>\n          </section>\n        </div>\n      </div>\n    </section>\n\n    <div #loadContainer\n      *ngIf=\"loading\"\n      class=\"w-full max-w-md mx-auto h-6 bg-gray-200 dark:bg-gray-800 rounded-full\"\n    >\n      <span #loadBar\n        class=\"flex items-center justify-center h-6 text-sm font-bold text-primary-50 bg-primary-700 rounded-full animate-load\"\n      >\n        {{progress}} %\n      </span>\n    </div>\n  </article>\n</div>\n"
        },
        {
            "name": "LightSwitchComponent",
            "id": "component-LightSwitchComponent-821e07e65171b849b3d7c9458c3a2f7bc12d4f3c86759f37bc6ec3dfdb3f8ec9ac237520d29c666d37dde420242de10f0a797ba1b8ad13e49d257fdec30c357b",
            "file": "src/app/components/light-switch/light-switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "light-switch",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./light-switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle between light and dark theme.\n",
                    "description": "<p>Toggle between light and dark theme.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {StorageService} from \"../../services/storage.service\";\r\n\r\n@Component({\r\n  selector: 'light-switch',\r\n  templateUrl: './light-switch.component.html',\r\n})\r\nexport class LightSwitchComponent implements OnInit {\r\n\r\n  @Input()\r\n  dark: boolean | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Toggle between light and dark theme.\r\n   */\r\n  toggleTheme(): void {\r\n    this.dark = this.storage.toggleTheme(!this.dark)\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label\r\n  for=\"light-switch\"\r\n  class=\"inline-flex relative items-center cursor-pointer\"\r\n  title=\"Toggle the lights\"\r\n>\r\n  <input\r\n    type=\"checkbox\"\r\n    id=\"light-switch\"\r\n    class=\"sr-only peer\"\r\n    [checked]=\"dark\"\r\n    (change)=\"toggleTheme()\"\r\n  >\r\n\r\n  <div class=\"w-14 h-7 rounded-full\r\n              bg-gray-100 peer-checked:bg-gray-800 transition-all duration-500\r\n              peer-focus:outline-none peer peer-checked:after:translate-x-full\r\n              after:content-[url('/assets/icons/sun.svg')] peer-checked:after:content-[url('/assets/icons/moon.svg')]\r\n              after:absolute after:top-0.5 after:left-[4px]\r\n              after:rounded-full after:h-6 after:w-6\r\n              after:transition-all after:duration-500\"\r\n  ></div>\r\n</label>\r\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-d4b2656dfcfac0b0cfc9efa846c5ff6b90b2b57180123ed63de4b7c8013e5f503e9dad80feca2d58de2483e2db6959e122f140b925487ab938c61211f87b56ad",
            "file": "src/app/components/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "notification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {NotificationService} from \"../../services/notification.service\";\n\n@Component({\n  selector: 'notification',\n  templateUrl: './notification.component.html',\n})\nexport class NotificationComponent implements OnInit {\n\n  @Input()\n  dark = false\n\n  message: string | undefined\n  timeout: number | undefined\n\n  constructor(\n    private notificationService: NotificationService\n  ) {\n    notificationService.notification\n      .subscribe(notification => {\n        this.message = notification\n\n        if (notification) {\n          clearTimeout(this.timeout)\n          this.timeout = setTimeout(() => {\n            this.closeNotification()\n          }, 5000)\n        } else {\n          clearTimeout(this.timeout)\n          this.timeout = undefined\n        }\n      })\n  }\n\n  ngOnInit(): void {\n  }\n\n  closeNotification() {\n    this.notificationService.notification.emit(undefined)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"message\" [class]=\"dark ? 'dark' : ''\" class=\"mb-6 mr-6 z-50\">\n  <article class=\"flex items-center p-4 w-full max-w-xs bg-gray-100 rounded dark:bg-gray-800 text-gray-800 dark:text-gray-100\" role=\"alert\">\n    <p class=\"mr-4 text-sm cursor-default\">\n      {{message}}\n    </p>\n\n    <button type=\"button\" (click)=\"closeNotification()\"\n            title=\"Close Notification\"\n            class=\"ml-auto -mx-1.5 -my-1.5 bg-transparent rounded p-1.5 hover:bg-gray-200 inline-flex h-8 w-8 dark:hover:bg-gray-900 transition-all duration-200\" aria-label=\"Close\">\n      <span class=\"sr-only\">Close</span>\n      <svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg>\n    </button>\n  </article>\n</div>\n"
        },
        {
            "name": "PaletteViewerComponent",
            "id": "component-PaletteViewerComponent-8356831467bb4f880ac804027f6613c9832d9410cf107f171fc3c6771f90310c234cdc4257b71e9d10d3b4963fdb6deea7b96bcc5e0fcc06121ddf1b3bdc4b18",
            "file": "src/app/components/palette-viewer/palette-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "palette-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./palette-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Palette",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "adding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "editingState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "editTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editTitle'"
                        }
                    ]
                },
                {
                    "name": "saving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "addRandomColor",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a random color to the palette.\n",
                    "description": "<p>Add a random color to the palette.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose editor for palette name.\n",
                    "description": "<p>Close editor for palette name.</p>\n"
                },
                {
                    "name": "exportPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for download and usage as plain CSS or Tailwind config.\n",
                    "description": "<p>Export a palette for download and usage as plain CSS or Tailwind config.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen editor for palette name.\n",
                    "description": "<p>Open editor for palette name.</p>\n"
                },
                {
                    "name": "removeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.\n",
                    "description": "<p>Remove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2158,
                                "end": 2163,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2152,
                                "end": 2157,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to remove from palette</p>\n"
                        }
                    ]
                },
                {
                    "name": "removePalette",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAsk user for confirmation an trigger onRemove event handler.\n",
                    "description": "<p>Ask user for confirmation an trigger onRemove event handler.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1192,
                                "end": 1198,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1186,
                                "end": 1191,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>MouseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "savePalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave current palette to local storage.\n",
                    "description": "<p>Save current palette to local storage.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Palette} from \"../../models/palette.model\";\r\nimport {ToUnicodeVariantUtil} from \"../../utils/to-unicode-variant.util\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {StorageService} from \"../../services/storage.service\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {ExportDialog} from \"../../dialogs/export.dialog\";\r\n\r\n@Component({\r\n  selector: 'palette-viewer',\r\n  templateUrl: './palette-viewer.component.html',\r\n})\r\nexport class PaletteViewerComponent implements OnInit {\r\n\r\n  @Input()\r\n  palette: Palette\r\n\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Event>()\r\n\r\n  editingState = false\r\n  saving = false\r\n  adding = false\r\n\r\n  @ViewChild('editTitle')\r\n  editTitle: ElementRef<HTMLInputElement> | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    this.palette = Palette.generateRandomPalette(5)\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Ask user for confirmation an trigger onRemove event handler.\r\n   * @param $event MouseEvent\r\n   */\r\n  removePalette($event: MouseEvent) {\r\n    const removeEmitter = new EventEmitter()\r\n    removeEmitter.subscribe(() => {\r\n      this.notificationService.dialog.emit(undefined)\r\n      this.onRemove.emit($event)\r\n    })\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notificationService.dialog.emit(undefined)\r\n    })\r\n\r\n    this.notificationService.dialog.emit({\r\n      message: `Are you sure you want to delete the palette?\\nIt can ${ToUnicodeVariantUtil.toUnicodeVariant('not', 'bs')} be restored.`,\r\n      actions: [{\r\n        text: 'Cancel',\r\n        title: 'Cancel deletion',\r\n        action: closeEmitter\r\n      }, {\r\n        text: 'Delete',\r\n        title: 'Delete palette',\r\n        action: removeEmitter\r\n      }]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove color from palette and save the current palette to local storage.\r\n   * If color is not present in palette nothing happens.\r\n   * @param color Color to remove from palette\r\n   */\r\n  removeColor(color: Color) {\r\n    if (this.palette.removeColor(color))\r\n      this.savePalette()\r\n  }\r\n\r\n  /**\r\n   * Add a random color to the palette.\r\n   */\r\n  addRandomColor($event: MouseEvent) {\r\n    const target = ($event.target as HTMLButtonElement)\r\n    this.adding = true\r\n    setTimeout(() => {\r\n      this.palette.addColor(Color.generateRandomColor(), false)\r\n      this.adding = false\r\n      setTimeout(() => {\r\n        window.scroll({\r\n          behavior: 'smooth',\r\n          top: window.scrollY + target.getBoundingClientRect().bottom - window.innerHeight + 20\r\n        })\r\n      }, 10)\r\n    }, 2000)\r\n  }\r\n\r\n  /**\r\n   * Save current palette to local storage.\r\n   */\r\n  savePalette() {\r\n    this.saving = true\r\n    this.storage.savePalette(this.palette)\r\n    setTimeout(() => {\r\n      this.notificationService.notification.emit('Palette saved')\r\n      this.saving = false\r\n    }, 1500)\r\n  }\r\n\r\n  /**\r\n   * Open editor for palette name.\r\n   */\r\n  openEditor() {\r\n    this.editingState = true\r\n    setTimeout(() => {\r\n      this.editTitle?.nativeElement.focus()\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Close editor for palette name.\r\n   */\r\n  closeEditor() {\r\n    this.editingState = false\r\n    this.palette.title = this.editTitle?.nativeElement.value || 'Random'\r\n  }\r\n\r\n  /**\r\n   * Export a palette for download and usage as plain CSS or Tailwind config.\r\n   */\r\n  exportPalette() {\r\n    this.notificationService.dialog\r\n      .emit(new ExportDialog(\r\n        this.notificationService.dialog,\r\n        this.palette\r\n      ).getNotification())\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\">\r\n  <section\r\n    class=\"px-4\"\r\n  >\r\n    <div class=\"flex items-center mb-6\">\r\n      <!-- Palette name -->\r\n      <div class=\"flex gap-4\">\r\n        <h2\r\n          *ngIf=\"!editingState\"\r\n          class=\"inline-block cursor-pointer\"\r\n          (click)=\"openEditor()\"\r\n        >\r\n          {{palette.title}}\r\n        </h2>\r\n\r\n        <!-- Palette name input -->\r\n        <input *ngIf=\"editingState\"\r\n               type=\"text\" #editTitle\r\n               placeholder=\"Palette title\"\r\n               class=\"bg-transparent p-0 text-xl font-bold\r\n                      border-0 focus:border-b-primary-700 border-b-2 focus:ring-0 transition-all duration-200\"\r\n               (focusout)=\"closeEditor()\"\r\n               (keydown.enter)=\"closeEditor()\"\r\n               [value]=\"palette.title\">\r\n\r\n        <span\r\n          *ngIf=\"!editingState\"\r\n          class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n          title=\"Edit palette title\"\r\n          (click)=\"openEditor()\"\r\n        >\r\n          <img src=\"/assets/icons/edit.svg\" alt=\"Edit title\" class=\"icon\">\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Export Button -->\r\n      <button\r\n        class=\"py-2 px-4 ml-auto inline-flex items-center\r\n               text-primary-100 bg-primary-700 font-medium rounded cursor-pointer\"\r\n        title=\"Export the palette\"\r\n        (click)=\"exportPalette()\"\r\n      >\r\n        <svg\r\n          class=\"w-6 h-6 mr-2\"\r\n          viewBox=\"0 0 48 48\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            fill=\"currentColor\"\r\n            d=\"M24 30.35q-.45 0-.875-.175t-.775-.525l-8.1-8.1q-.7-.7-.675-1.675.025-.975.725-1.675.7-.7 1.65-.7t1.65.7l4.05 4.1V6.85q0-1 .675-1.7T24 4.45q1 0 1.675.7t.675 1.7V22.3l4.1-4.1q.7-.7 1.65-.7t1.65.7q.7.7.7 1.675 0 .975-.7 1.675l-8.1 8.1q-.35.35-.775.525-.425.175-.875.175ZM10.25 42.4q-1.95 0-3.325-1.4-1.375-1.4-1.375-3.4v-7q0-1 .675-1.675T7.9 28.25q1 0 1.675.675t.675 1.675v7.05H37.7V30.6q0-1 .675-1.675t1.675-.675q1 0 1.675.675T42.4 30.6v7.05q0 1.95-1.4 3.35-1.4 1.4-3.3 1.4Z\"/>\r\n        </svg>\r\n\r\n        Export\r\n      </button>\r\n\r\n      <!-- Save Button -->\r\n      <button\r\n        class=\"py-2 px-4 ml-4 inline-flex items-center\r\n               text-primary-100 bg-primary-700 font-medium rounded cursor-pointer\"\r\n        title=\"Save the palette\"\r\n        (click)=\"savePalette()\"\r\n      >\r\n        <svg\r\n          *ngIf=\"!saving\"\r\n          class=\"w-6 h-6 mr-2\"\r\n          viewBox=\"0 0 48 48\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            fill=\"currentColor\"\r\n            d=\"M9.45 43.25q-1.95 0-3.325-1.375Q4.75 40.5 4.75 38.55V9.45q0-1.95 1.375-3.35Q7.5 4.7 9.45 4.7H32.7q.95 0 1.85.4.9.4 1.55 1.05l5.75 5.75q.65.65 1.05 1.55t.4 1.85v23.25q0 1.95-1.4 3.325-1.4 1.375-3.35 1.375Zm29.1-27.85L32.6 9.45H9.45v29.1h29.1ZM24 35.3q2.15 0 3.675-1.525T29.2 30.1q0-2.15-1.525-3.675T24 24.9q-2.15 0-3.675 1.525T18.8 30.1q0 2.15 1.525 3.675T24 35.3Zm-9.55-16.05h13.2q1 0 1.675-.675T30 16.9v-2.45q0-1-.675-1.675T27.65 12.1h-13.2q-1 0-1.675.675T12.1 14.45v2.45q0 1 .675 1.675t1.675.675Zm-5-3.85v23.15-29.1Z\"/>\r\n        </svg>\r\n\r\n        <svg\r\n          *ngIf=\"saving\"\r\n          class=\"ml-1 mr-3 w-4 h-4 text-primary-400 fill-primary-100 animate-spin\"\r\n          viewBox=\"0 0 100 101\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path d=\"M100 50.59c0 27.615-22.386 50.001-50 50.001s-50-22.386-50-50 22.386-50 50-50 50 22.386 50 50Zm-90.919 0c0 22.6 18.32 40.92 40.919 40.92 22.599 0 40.919-18.32 40.919-40.92 0-22.598-18.32-40.918-40.919-40.918-22.599 0-40.919 18.32-40.919 40.919Z\" fill=\"currentColor\"/>\r\n          <path d=\"M93.968 39.04c2.425-.636 3.894-3.128 3.04-5.486A50 50 0 0 0 41.735 1.279c-2.474.414-3.922 2.919-3.285 5.344.637 2.426 3.12 3.849 5.6 3.484a40.916 40.916 0 0 1 44.131 25.769c.902 2.34 3.361 3.802 5.787 3.165Z\" fill=\"currentFill\"/>\r\n        </svg>\r\n\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Display all colors -->\r\n    <color-viewer\r\n      *ngFor=\"let color of palette.colors\"\r\n      [color]=\"color\"\r\n      (onRemove)=\"removeColor(color)\"\r\n    ></color-viewer>\r\n\r\n    <!-- Add random color to palette -->\r\n    <button\r\n      class=\"py-2 px-4 mt-4 mx-auto flex items-center\r\n             font-medium text-primary-100 bg-primary-700 rounded transition-all duration-200\"\r\n      (click)=\"addRandomColor($event)\"\r\n    >\r\n      <svg\r\n        *ngIf=\"!adding\"\r\n        class=\"w-6 h-6 mr-2\"\r\n        viewBox=\"0 0 48 48\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill=\"currentColor\"\r\n          d=\"M27 29.1q.65 0 1.075-.425.425-.425.425-1.075v-5.1h5.1q.65 0 1.075-.425.425-.425.425-1.075 0-.65-.425-1.075-.425-.425-1.075-.425h-5.1v-5.1q0-.65-.425-1.075Q27.65 12.9 27 12.9q-.65 0-1.075.425-.425.425-.425 1.075v5.1h-5.1q-.65 0-1.075.425Q18.9 20.35 18.9 21q0 .65.425 1.075.425.425 1.075.425h5.1v5.1q0 .65.425 1.075.425.425 1.075.425ZM13 38q-1.2 0-2.1-.9-.9-.9-.9-2.1V7q0-1.2.9-2.1.9-.9 2.1-.9h28q1.2 0 2.1.9.9.9.9 2.1v28q0 1.2-.9 2.1-.9.9-2.1.9Zm0-3h28V7H13v28Zm-6 9q-1.2 0-2.1-.9Q4 42.2 4 41V11.5q0-.65.425-1.075Q4.85 10 5.5 10q.65 0 1.075.425Q7 10.85 7 11.5V41h29.5q.65 0 1.075.425Q38 41.85 38 42.5q0 .65-.425 1.075Q37.15 44 36.5 44Zm6-37v28V7Z\"/>\r\n      </svg>\r\n      <svg\r\n        *ngIf=\"adding\"\r\n        class=\"ml-1 mr-3 w-4 h-4 text-primary-400 fill-primary-100 animate-spin\"\r\n        viewBox=\"0 0 100 101\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path d=\"M100 50.59c0 27.615-22.386 50.001-50 50.001s-50-22.386-50-50 22.386-50 50-50 50 22.386 50 50Zm-90.919 0c0 22.6 18.32 40.92 40.919 40.92 22.599 0 40.919-18.32 40.919-40.92 0-22.598-18.32-40.918-40.919-40.918-22.599 0-40.919 18.32-40.919 40.919Z\" fill=\"currentColor\"/>\r\n        <path d=\"M93.968 39.04c2.425-.636 3.894-3.128 3.04-5.486A50 50 0 0 0 41.735 1.279c-2.474.414-3.922 2.919-3.285 5.344.637 2.426 3.12 3.849 5.6 3.484a40.916 40.916 0 0 1 44.131 25.769c.902 2.34 3.361 3.802 5.787 3.165Z\" fill=\"currentFill\"/>\r\n      </svg>\r\n\r\n      Add color\r\n    </button>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "PreviewComponent",
            "id": "component-PreviewComponent-7c1c65b040aee1abd287eb93f61e2898ff7e6fe4900cb22d10b78582a3f850b5a1397648f679d8030f585b428f913ebbe386ec7d18a39aaf269f6406bc4b9784",
            "file": "src/app/pages/preview/preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-preview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n})\nexport class PreviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <article class=\"text-center text-lg max-w-lg mx-auto px-2\">\n    <h2>Coming soon...</h2>\n\n    <p>Here you will soon be able to try out your palette directly on various components such as cards or buttons.</p>\n\n    <p>\n      Feel free to check the repository on\n      <a href=\"https://github.com/pawcoding/tailwind-color-generator\"\n         target=\"_blank\"\n         rel=\"noreferrer noopener\"\n         class=\"underline\"\n         title=\"View source code on GitHub\">GitHub</a>\n      or my\n      <a href=\"https://discord.gg/GzgTh4hxrx\"\n         target=\"_blank\"\n         rel=\"noreferrer noopener\"\n         class=\"underline\"\n         title=\"Get more info on Discord\">Discord</a>\n      for more information.\n    </p>\n  </article>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-eaea41bef485a799c4397f847953378d4a9ef0ca8c179f2521fe6829a776ada02f73fae18e31b7b8e899c5c2ffe499d707bcd67b3392fc0df7a6056c167f7ab9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ColorViewerComponent } from './components/color-viewer/color-viewer.component';\r\nimport { PaletteViewerComponent } from './components/palette-viewer/palette-viewer.component';\r\nimport { StorageService } from \"./services/storage.service\";\r\nimport { LightSwitchComponent } from './components/light-switch/light-switch.component';\r\nimport { ColorEditorComponent } from './components/color-editor/color-editor.component';\r\nimport { ColorService } from \"./services/color.service\";\r\nimport { DialogComponent } from './components/dialog/dialog.component';\r\nimport { NotificationComponent } from './components/notification/notification.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport {AppRoutingModule} from \"./app-routing.module\";\r\nimport { EditComponent } from './pages/edit/edit.component';\r\nimport {SafeHtmlPipeline} from \"./pipelines/safe-html.pipeline\";\nimport { PreviewComponent } from './pages/preview/preview.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ColorEditorComponent,\r\n    ColorViewerComponent,\r\n    DialogComponent,\r\n    HomeComponent,\r\n    LightSwitchComponent,\r\n    NotificationComponent,\r\n    PaletteViewerComponent,\r\n    EditComponent,\r\n    SafeHtmlPipeline,\r\n    PreviewComponent\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserModule\r\n  ],\r\n  providers: [\r\n    ColorService,\r\n    StorageService\r\n  ],\r\n  bootstrap: [\r\n    AppComponent\r\n  ]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ColorService"
                        },
                        {
                            "name": "StorageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ColorEditorComponent"
                        },
                        {
                            "name": "ColorViewerComponent"
                        },
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "EditComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LightSwitchComponent"
                        },
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "PaletteViewerComponent"
                        },
                        {
                            "name": "PreviewComponent"
                        },
                        {
                            "name": "SafeHtmlPipeline"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-20c907e0ab1f9816b3aa453fb58d70df00c0569cc303e468213a706b8006791b56a69a2995e64ebe25162faa1b78d773e0e2e3d8ce74a680f65ae0bc88b5bc0c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {RouterModule, Routes} from \"@angular/router\";\r\nimport {HomeComponent} from \"./pages/home/home.component\";\r\nimport {NgModule} from \"@angular/core\";\r\nimport {PaletteGuard} from \"./guards/palette.guard\";\r\nimport {EditComponent} from \"./pages/edit/edit.component\";\r\nimport {PreviewComponent} from \"./pages/preview/preview.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', component: HomeComponent },\r\n  { path: 'edit', pathMatch: 'full', canActivate: [PaletteGuard], component: EditComponent },\r\n  { path: 'preview', pathMatch: 'full', canActivate: [PaletteGuard], component: PreviewComponent }\r\n]\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Analogous",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Complementary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Compound",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  version: packageJson.version\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  version: packageJson.version\n}"
            },
            {
                "name": "MediaScope",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mediaScopePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('media-scope', uuidv4())"
            },
            {
                "name": "Monochromatic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Pawcode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PawcodeBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pawcodePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('pawcode', uuidv4())"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Rainbow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "rainbowPalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('Rainbow', uuidv4())"
            },
            {
                "name": "Random",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Split",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService\r\n    }, {\r\n      provide: NotificationService\r\n    }]\r\n  }\r\n})"
            },
            {
                "name": "Triadic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ChangeType",
                "childs": [
                    {
                        "name": "LOAD",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ADJUST",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/color.service.ts"
            },
            {
                "name": "PaletteScheme",
                "childs": [
                    {
                        "name": "SURPRISE_ME",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "MONOCHROMATIC",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ANALOGOUS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "COMPLEMENTARY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SPLIT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TRIADIC",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "COMPOUND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/class/palette-generator.ts"
            },
            {
                "name": "UpdateType",
                "childs": [
                    {
                        "name": "HEX",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "HUE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SATURATION",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LUMINOSITY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/color-editor/color-editor.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/palette-viewer/palette-viewer.component.stories.ts": [
                {
                    "name": "Analogous",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Complementary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Compound",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MediaScope",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mediaScopePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('media-scope', uuidv4())"
                },
                {
                    "name": "Monochromatic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Pawcode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "pawcodePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('pawcode', uuidv4())"
                },
                {
                    "name": "Rainbow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "rainbowPalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('Rainbow', uuidv4())"
                },
                {
                    "name": "Random",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Split",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService\r\n    }, {\r\n      provide: NotificationService\r\n    }]\r\n  }\r\n})"
                },
                {
                    "name": "Triadic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  version: packageJson.version\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  version: packageJson.version\n}"
                }
            ],
            "src/app/components/color-viewer/color-viewer.component.stories.ts": [
                {
                    "name": "PawcodeBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }]\r\n  }\r\n})"
                }
            ],
            "src/app/components/color-editor/color-editor.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }]\r\n  }\r\n})"
                }
            ],
            "src/app/components/dialog/dialog.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
                }
            ],
            "src/app/components/light-switch/light-switch.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService\r\n    }]\r\n  }\r\n})"
                }
            ],
            "src/app/components/notification/notification.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }]\r\n  }\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/services/color.service.ts": [
                {
                    "name": "ChangeType",
                    "childs": [
                        {
                            "name": "LOAD",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ADJUST",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/color.service.ts"
                }
            ],
            "src/app/class/palette-generator.ts": [
                {
                    "name": "PaletteScheme",
                    "childs": [
                        {
                            "name": "SURPRISE_ME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "MONOCHROMATIC",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ANALOGOUS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "COMPLEMENTARY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SPLIT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TRIADIC",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "COMPOUND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/class/palette-generator.ts"
                }
            ],
            "src/app/components/color-editor/color-editor.component.ts": [
                {
                    "name": "UpdateType",
                    "childs": [
                        {
                            "name": "HEX",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "HUE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SATURATION",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LUMINOSITY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/color-editor/color-editor.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "edit",
                        "pathMatch": "full",
                        "canActivate": [
                            "PaletteGuard"
                        ],
                        "component": "EditComponent"
                    },
                    {
                        "path": "preview",
                        "pathMatch": "full",
                        "canActivate": [
                            "PaletteGuard"
                        ],
                        "component": "PreviewComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 9,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-converter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorConverter",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-interpolater.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorInterpolater",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/class/palette-exporter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaletteExporter",
                "coveragePercent": 88,
                "coverageCount": "8/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/class/palette-generator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaletteGenerator",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorEditorComponent",
                "coveragePercent": 46,
                "coverageCount": "6/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PawcodeBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorViewerComponent",
                "coveragePercent": 30,
                "coverageCount": "4/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LightSwitchComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Analogous",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Complementary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Compound",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MediaScope",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediaScopePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Monochromatic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pawcode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pawcodePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rainbow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rainbowPalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Random",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Split",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Triadic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaletteViewerComponent",
                "coveragePercent": 41,
                "coverageCount": "7/17",
                "status": "medium"
            },
            {
                "filePath": "src/app/dialogs/css-copy.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssCopyDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/css-file.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssFileDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/css.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/export.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExportDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind-copy.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindCopyDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind-file.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindFileDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/palette.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "PaletteGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/dialog.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Action",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/dialog.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/color.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Color",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/palette.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Palette",
                "coveragePercent": 53,
                "coverageCount": "7/13",
                "status": "good"
            },
            {
                "filePath": "src/app/models/shade.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Shade",
                "coveragePercent": 40,
                "coverageCount": "6/15",
                "status": "medium"
            },
            {
                "filePath": "src/app/pages/edit/edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/preview/preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pipelines/safe-html.pipeline.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipeline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorService",
                "coveragePercent": 58,
                "coverageCount": "7/12",
                "status": "good"
            },
            {
                "filePath": "src/app/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/palette.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaletteService",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToUnicodeVariantUtil",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}