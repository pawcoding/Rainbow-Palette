{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "ColorService",
            "id": "injectable-ColorService-3867f6583bc28607172b50344161cea7a7f070606ecbf3d31175b2a70b637cdfd4a22c4a974eba48b2441b3bdb5d60496468d66bb6406c51127a4bb66c886ebc",
            "file": "src/app/services/color.service.ts",
            "properties": [
                {
                    "name": "color",
                    "defaultValue": "Color.generateRandomColor()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "colorChangeEmitter",
                    "defaultValue": "new EventEmitter<ChangeType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<ChangeType>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adjustColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColorChangeEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "EventEmitter<ChangeType>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "randomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateColorName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\nimport {Color} from \"../models/color.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ColorService {\n\n  private color: Color = Color.generateRandomColor()\n  private colorChangeEmitter: EventEmitter<ChangeType> = new EventEmitter<ChangeType>()\n\n  constructor() { }\n\n  loadColor(color: Color) {\n    this.color = color\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\n  }\n\n  adjustColor(color: Color) {\n    this.color = color\n    this.colorChangeEmitter.emit(ChangeType.ADJUST)\n  }\n\n  updateColorName(name: string) {\n    this.color.name = name\n    this.colorChangeEmitter.emit(ChangeType.ADJUST)\n  }\n\n  getColor() {\n    return this.color\n  }\n\n  randomColor() {\n    this.color = Color.generateRandomColor()\n    this.colorChangeEmitter.emit(ChangeType.RANDOM)\n  }\n\n  getColorChangeEmitter() {\n    return this.colorChangeEmitter\n  }\n\n}\n\nexport enum ChangeType {\n  LOAD, ADJUST, RANDOM\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "PaletteService",
            "id": "injectable-PaletteService-42217e4307354a2342040ad0d3cee7af3b7e42922c372984a90ec38f06c614aa3e0344bf5d6d00dcd650bf3724e64de016ba984ea3a34724fe2c109117cb8a44",
            "file": "src/app/services/palette.service.ts",
            "properties": [
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Palette",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {Palette} from \"../models/palette.model\";\nimport {StorageService} from \"./storage.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaletteService {\n\n  private palette: Palette\n\n  constructor(\n    private storage: StorageService\n  ) {\n    this.palette = storage.loadPalette()\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-fb7586235ba4e179663dfc949ec4ed2d259f37a18f3e9886dcaf560252c71aee096a80a695a10f79e04ee11c84646d0b6c322fcf85f6e72afa421f22e4e079bb",
            "file": "src/app/services/storage.service.ts",
            "properties": [
                {
                    "name": "darkEmitter",
                    "defaultValue": "new EventEmitter<Boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "loadPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.\n",
                    "description": "<p>Load the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.</p>\n"
                },
                {
                    "name": "loadTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.\n",
                    "description": "<p>Load the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.</p>\n"
                },
                {
                    "name": "savePalette",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave palette in local storage.\n",
                    "description": "<p>Save palette in local storage.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1625,
                                "end": 1632,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1619,
                                "end": 1624,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [
                        {
                            "name": "dark",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle between dark and light theme.\nForce dark or light mode with parameter.\n",
                    "description": "<p>Toggle between dark and light theme.\nForce dark or light mode with parameter.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 839,
                                "end": 843,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dark"
                            },
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 833,
                                "end": 838,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Palette} from \"../models/palette.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n\r\n  darkEmitter = new EventEmitter<Boolean>()\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Load the theme if it is stored in local storage.\r\n   * If no theme was saved, the browser default theme is used.\r\n   */\r\n  loadTheme() {\r\n    if (!localStorage.getItem('theme')) {\r\n      if (window.matchMedia('(prefers-color-scheme: dark)'))\r\n        return this.toggleTheme(true)\r\n      else {\r\n        this.darkEmitter.emit(true)\r\n        return false\r\n      }\r\n    } else {\r\n      return this.toggleTheme(localStorage.getItem('theme') === 'dark')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle between dark and light theme.\r\n   * Force dark or light mode with parameter.\r\n   * @param dark\r\n   */\r\n  toggleTheme(dark: boolean | undefined) {\r\n    document.body.classList.toggle('dark', dark)\r\n\r\n    dark = document.body.classList.contains('dark')\r\n    localStorage.setItem('theme', dark ? 'dark' : 'light')\r\n\r\n    this.darkEmitter.emit(dark)\r\n\r\n    return dark\r\n  }\r\n\r\n  /**\r\n   * Load the palette saved in local storage.\r\n   * If no palette is saved a random one is going to be generated.\r\n   */\r\n  loadPalette(): Palette {\r\n    const stored = localStorage.getItem('palette')\r\n    if (stored) {\r\n      try {\r\n        return Palette.parsePalette(JSON.parse(stored))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n\r\n    return Palette.generateRandomPalette(Math.floor(5 + Math.random() * 5))\r\n  }\r\n\r\n  /**\r\n   * Save palette in local storage.\r\n   * @param palette\r\n   */\r\n  savePalette(palette: Palette) {\r\n    localStorage.setItem('palette', palette.toString())\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Color",
            "id": "class-Color-ff86d8933e6081d49b0ea90875111eda83e9c164ba412148742043fb62f57dacf1973c0adff85465bd60431fa385578fc93cb29530e9fdc42db21111c2aba911",
            "file": "src/app/models/color.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorInterpolater} from \"../class/color-interpolater\";\r\nimport {Shade} from \"./shade.model\";\r\n\r\nexport class Color {\r\n\r\n  name: string\r\n\r\n  shades: Shade[]\r\n\r\n  constructor(\r\n    name: string,\r\n    hex: string\r\n  ) {\r\n    if (!hex.startsWith('#') || hex.length !== 7)\r\n      throw `Color '${hex}' is not in form #RRGGBB.`\r\n\r\n    this.name = name\r\n    this.shades = ColorInterpolater.interpolateShades(hex)\r\n\r\n    this.shades.sort((a, b) => a.index - b.index)\r\n  }\r\n\r\n  /**\r\n   * Get shade by index (50, 100, 200, ..., 900)\r\n   * @param index\r\n   */\r\n  public getShade(index: number): Shade {\r\n    return this.shades.find(s => s.index === index) || this.shades[0]\r\n  }\r\n\r\n  /**\r\n   * Generate a random color with all shades.\r\n   */\r\n  public static generateRandomColor(): Color {\r\n    const shade = Shade.generateRandomShade()\r\n    return new Color(\r\n      shade.hex,\r\n      shade.hex\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Stringify the color.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      name: this.name,\r\n      shades: this.shades\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a color.\r\n   * Throws exception if json object is no valid color object.\r\n   * @param json\r\n   */\r\n  public static parseColor(json: any): Color {\r\n    if (!json.name)\r\n      throw 'Color has no name'\r\n    if (!json.shades || json.shades.length < 6)\r\n      throw 'Color has not enough shades'\r\n\r\n    return new Color(json.name, json.shades[5].hex)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hex",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hex",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "shades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "generateRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a random color with all shades.\n",
                    "description": "<p>Generate a random color with all shades.</p>\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getShade",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet shade by index (50, 100, 200, ..., 900)\n",
                    "description": "<p>Get shade by index (50, 100, 200, ..., 900)</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 544,
                                "end": 549,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 538,
                                "end": 543,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "parseColor",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a color.\nThrows exception if json object is no valid color object.\n",
                    "description": "<p>Parse the json object to a color.\nThrows exception if json object is no valid color object.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1189,
                                "end": 1193,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1183,
                                "end": 1188,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStringify the color.\n",
                    "description": "<p>Stringify the color.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorConverter",
            "id": "class-ColorConverter-883de7b42deef840bc70fcccf9101f6939a132eafb7cc2e16db42f51a283b2e2d49941f1bee9d01012c53662c8a741dd31065f9e40771318b3b803535a82645d",
            "file": "src/app/class/color-converter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ColorConverter {\n\n  /**\n   * Convert from HEX string (#RRGGBB) to HSL format.\n   * @param hex HEX color sting (#RRGGBB)\n   * @constructor\n   */\n  static HEXtoHSL(hex: string) {\n    if (!hex.startsWith('#') || hex.length !== 7)\n      throw `Color '${hex}' is not in form #RRGGBB.`\n\n    const rgb = this.HEXtoRGB(hex)\n    const r = rgb.red / 255\n    const g = rgb.green / 255\n    const b = rgb.blue / 255\n\n    const cMax = Math.max(r, g, b)\n    const cMin = Math.min(r, g, b)\n    const d = cMax - cMin\n\n    const l = this.getLuminosity(cMax, cMin)\n    const s = this.getSaturation(d, l)\n    let h = this.getHue(d, cMax, r, g, b)\n    if (h < 0)\n      h += 360\n\n    return {\n      hue: Math.round(h),\n      saturation: Math.round(s),\n      luminosity: Math.round(l)\n    }\n  }\n\n  /**\n   * Get luminosity for HSL format.\n   * @param cMax Max value from [red, green, blue] / 255\n   * @param cMin Min value from [red, green, blue] / 255\n   * @private\n   */\n  private static getLuminosity(cMax: number, cMin: number): number {\n    return (cMax + cMin) * 50\n  }\n\n  /**\n   * Get saturation for HSL format.\n   * @param delta Difference between max and min values from [red, green, blue] / 255\n   * @param luminosity Luminosity from HSL format.\n   * @private\n   */\n  private static getSaturation(delta: number, luminosity: number): number {\n    if (delta === 0)\n      return 0\n    else\n      return 100 * delta / (1 - Math.abs(2 * (luminosity / 100) - 1))\n  }\n\n  /**\n   * Get hue for HSL or HSB format.\n   * @param delta Difference between max and min values from [red, green, blue] / 255\n   * @param cMax Max value from [red, green, blue] / 255\n   * @param red Red value between 0 - 1\n   * @param green Green value between 0 - 1\n   * @param blue Blue value between 0 - 1\n   * @private\n   */\n  private static getHue(delta: number, cMax: number, red: number, green: number, blue: number): number {\n    if (delta === 0)\n      return 0\n    else if (cMax === red)\n      return 60 * ( ( (green - blue) / delta) % 6)\n    else if (cMax === green)\n      return 60 * ( ( (blue - red) / delta) + 2)\n    else\n      return 60 * ( ( (red - green) / delta) + 4)\n  }\n\n  /**\n   * Convert color from HSL format into HEX string.\n   * @param hue Hue between 0 - 360\n   * @param saturation Saturation between 0 - 100\n   * @param lightness Lightness between 0 - 100\n   * @constructor\n   */\n  static HSLtoHEX(hue: number, saturation: number, lightness: number): string {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || lightness < 0 || lightness > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${lightness}%] are not in valid ranges.`\n\n    const h = hue\n    const s = saturation / 100\n    const l = lightness / 100\n\n    const c = (1 - Math.abs(2 * l - 1)) * s\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1))\n    const m = l - c / 2\n\n    const r = (h < 60 || h >=300) ? c : (h < 120 || h >= 240) ? x : 0\n    const g = (h >= 240) ? 0 : (h < 60 || h >= 180) ? x : c\n    const b = (h < 120) ? 0 : (h < 180 || h >= 300) ? x : c\n\n    const R = Math.round((r + m) * 255)\n    const G = Math.round((g + m) * 255)\n    const B = Math.round((b + m) * 255)\n\n    return `#${(R < 16 ? 0 : '') + R.toString(16)}${(G < 16 ? 0 : '') + G.toString(16)}${(B < 16 ? 0 : '') + B.toString(16)}`\n  }\n\n  /**\n   * Convert from HEX string to RGB values.\n   * @param hex HEX color string (#RRGGBB)\n   * @constructor\n   */\n  static HEXtoRGB(hex: string) {\n    if (!hex.startsWith('#') || hex.length !== 7)\n      throw `Color ${hex} is not in form #RRGGBB.`\n\n    return {\n      red: parseInt(hex.substring(1, 3), 16),\n      green: parseInt(hex.substring(3, 5), 16),\n      blue: parseInt(hex.substring(5, 7), 16)\n    }\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getHue",
                    "args": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet hue for HSL or HSB format.\n",
                    "description": "<p>Get hue for HSL or HSB format.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1515,
                                "end": 1520,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "delta"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1509,
                                "end": 1514,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Difference between max and min values from [red, green, blue] / 255</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1601,
                                "end": 1605,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cMax"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1595,
                                "end": 1600,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Max value from [red, green, blue] / 255</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1658,
                                "end": 1661,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "red"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1652,
                                "end": 1657,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Red value between 0 - 1</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1698,
                                "end": 1703,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "green"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1692,
                                "end": 1697,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Green value between 0 - 1</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1742,
                                "end": 1746,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "blue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1736,
                                "end": 1741,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Blue value between 0 - 1</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1778,
                                "end": 1785,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getLuminosity",
                    "args": [
                        {
                            "name": "cMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet luminosity for HSL format.\n",
                    "description": "<p>Get luminosity for HSL format.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 840,
                                "end": 844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cMax"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 834,
                                "end": 839,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Max value from [red, green, blue] / 255</p>\n"
                        },
                        {
                            "name": {
                                "pos": 897,
                                "end": 901,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cMin"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 891,
                                "end": 896,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Min value from [red, green, blue] / 255</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 948,
                                "end": 955,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getSaturation",
                    "args": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet saturation for HSL format.\n",
                    "description": "<p>Get saturation for HSL format.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1120,
                                "end": 1125,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "delta"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1114,
                                "end": 1119,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Difference between max and min values from [red, green, blue] / 255</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1206,
                                "end": 1216,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "luminosity"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1200,
                                "end": 1205,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Luminosity from HSL format.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1251,
                                "end": 1258,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "HEXtoHSL",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert from HEX string (#RRGGBB) to HSL format.\n",
                    "description": "<p>Convert from HEX string (#RRGGBB) to HSL format.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 103,
                                "end": 106,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 97,
                                "end": 102,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HEX color sting (#RRGGBB)</p>\n"
                        }
                    ]
                },
                {
                    "name": "HEXtoRGB",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert from HEX string to RGB values.\n",
                    "description": "<p>Convert from HEX string to RGB values.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3352,
                                "end": 3355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3346,
                                "end": 3351,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HEX color string (#RRGGBB)</p>\n"
                        }
                    ]
                },
                {
                    "name": "HSLtoHEX",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert color from HSL format into HEX string.\n",
                    "description": "<p>Convert color from HSL format into HEX string.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2223,
                                "end": 2226,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2217,
                                "end": 2222,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Hue between 0 - 360</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2259,
                                "end": 2269,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "saturation"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2253,
                                "end": 2258,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Saturation between 0 - 100</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2309,
                                "end": 2318,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "lightness"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2303,
                                "end": 2308,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Lightness between 0 - 100</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorInterpolater",
            "id": "class-ColorInterpolater-c34e13511caf0e524a94c3146dcefb6ce2407bea4b23f841cfba86e09bc7059e0d960e210df0129e81f5b70cda197078607b0cb979602e2361ac57131a453569",
            "file": "src/app/class/color-interpolater.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorConverter} from \"./color-converter\";\nimport {Shade} from \"../models/shade.model\";\n\nexport class ColorInterpolater {\n\n  /**\n   * Interpolate 10 shades starting with one HEX color string.\n   * @param hex HEX color string (#RRGGBB)\n   */\n  static interpolateShades(hex: string) {\n    if (!hex.startsWith('#') || hex.length !== 7)\n      throw `Color '${hex}' is not in form #RRGGBB.`\n\n    const shades: Shade[] = []\n    const hsl = ColorConverter.HEXtoHSL(hex)\n\n    if (100 - hsl.luminosity < 7.5) {\n      shades.push(new Shade(50, hex))\n      this.generateDarkerColors(hsl, 0, shades)\n    } else if (100 - hsl.luminosity >= 85) {\n      shades.push(new Shade(900, hex))\n      this.generateLighterColors(hsl, 900, shades)\n    } else {\n      let index = 100\n      while (100 - hsl.luminosity > (index / 10) + 5)\n        index += 100\n      shades.push(new Shade(index, hex))\n      this.generateLighterColors(hsl, index, shades)\n      this.generateDarkerColors(hsl, index, shades)\n    }\n\n    return shades\n  }\n\n  /**\n   * Interpolate all lighter shades from HSL color.\n   * @param hsl Color in HSL format\n   * @param index Index of HSL color shade\n   * @param shades Array to add all generated shades\n   * @private\n   */\n  private static generateLighterColors(hsl: { saturation: number; hue: number; luminosity: number }, index: number, shades: Shade[]) {\n    const step = index / 100\n    let i = 1\n\n    for (; i < step; i++) {\n      const interpolatedLuminosity = hsl.luminosity + (i / step) * (100 - hsl.luminosity)\n      const newIndex = index - i * 100\n      shades.push(new Shade(newIndex, hsl.hue, hsl.saturation, interpolatedLuminosity))\n    }\n\n    const interpolatedLuminosity = hsl.luminosity + ((2 * i - 1) / (2 * step)) * (100 - hsl.luminosity)\n    shades.push(new Shade(50, hsl.hue, hsl.saturation, interpolatedLuminosity))\n  }\n\n  /**\n   * Interpolate all darker shades from HSL color.\n   * @param hsl Color in HSL format\n   * @param index Index of HSL color shade\n   * @param shades Array to add all generated shades\n   * @private\n   */\n  private static generateDarkerColors(hsl: { saturation: number; hue: number; luminosity: number }, index: number, shades: Shade[]) {\n    const step = (1000 - index) / 100\n    let i = 1\n\n    for (; i < step; i++) {\n      const interpolatedLuminosity = hsl.luminosity - (i / step) * hsl.luminosity\n      const newIndex = index + i * 100\n      shades.push(new Shade(newIndex, hsl.hue, hsl.saturation, interpolatedLuminosity))\n    }\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "generateDarkerColors",
                    "args": [
                        {
                            "name": "hsl",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInterpolate all darker shades from HSL color.\n",
                    "description": "<p>Interpolate all darker shades from HSL color.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1915,
                                "end": 1918,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hsl"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1909,
                                "end": 1914,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color in HSL format</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1951,
                                "end": 1956,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1945,
                                "end": 1950,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Index of HSL color shade</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1994,
                                "end": 2000,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shades"
                            },
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1988,
                                "end": 1993,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Array to add all generated shades</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2041,
                                "end": 2048,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "generateLighterColors",
                    "args": [
                        {
                            "name": "hsl",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInterpolate all lighter shades from HSL color.\n",
                    "description": "<p>Interpolate all lighter shades from HSL color.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1086,
                                "end": 1089,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hsl"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1080,
                                "end": 1085,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color in HSL format</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1122,
                                "end": 1127,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1116,
                                "end": 1121,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Index of HSL color shade</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1165,
                                "end": 1171,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shades"
                            },
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1159,
                                "end": 1164,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Array to add all generated shades</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1212,
                                "end": 1219,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "interpolateShades",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInterpolate 10 shades starting with one HEX color string.\n",
                    "description": "<p>Interpolate 10 shades starting with one HEX color string.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 211,
                                "end": 214,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 205,
                                "end": 210,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HEX color string (#RRGGBB)</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Palette",
            "id": "class-Palette-4e9842a136c7a896c44e3be6d1e03a47c26aad997867131e1abbf7ab0b01b0dc5c94a95eeac12929ff0b7ab03a0a7cdcd883925fcbb7749a90a2394b752bd27f",
            "file": "src/app/models/palette.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Color} from \"./color.model\";\r\n// @ts-ignore\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nexport class Palette {\r\n\r\n  title: string\r\n  id: string\r\n  colors: Color[] = []\r\n  order = false\r\n\r\n  constructor(title: string, id: string) {\r\n    this.title = title\r\n    this.id = id\r\n  }\r\n\r\n  /**\r\n   * Add a color to the beginning of the palette.\r\n   * @param color\r\n   */\r\n  public addColor(color: Color) {\r\n    if (this.colors.find(c => c.name === color.name))\r\n      this.colors[this.colors.findIndex(c => c.name === color.name)] = color\r\n    else\r\n      this.colors.unshift(color)\r\n\r\n    this.order = false\r\n  }\r\n\r\n  /**\r\n   * Remove the color from the palette\r\n   * @param color\r\n   */\r\n  public removeColor(color: Color) {\r\n    const index = this.colors.indexOf(color)\r\n    if (index > -1) {\r\n      this.colors.splice(index, 1)\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sort all colors of the palette by hue\r\n   */\r\n  public sortColors() {\r\n    this.colors.sort((a, b) => {\r\n      if (this.order)\r\n        return a.getShade(500).hue - b.getShade(500).hue\r\n      else\r\n        return b.getShade(500).hue - a.getShade(500).hue\r\n    })\r\n    this.order = !this.order\r\n  }\r\n\r\n  /**\r\n   * Generate a new random palette with 'size' colors.\r\n   * @param size\r\n   */\r\n  public static generateRandomPalette(size: number): Palette {\r\n    if (size < 1)\r\n      throw `Size was ${size} but must be positive.`\r\n\r\n    const palette = new Palette('Random', uuidv4())\r\n    for (let i = 0; i < size; i++) {\r\n      const color = Color.generateRandomColor()\r\n      palette.addColor(new Color(color.name, color.getShade(500).hex))\r\n    }\r\n\r\n    palette.colors.sort((a, b) => a.getShade(500).hue - b.getShade(500).hue)\r\n\r\n    return palette;\r\n  }\r\n\r\n  /**\r\n   * Stringify the palette.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      id: this.id,\r\n      title: this.title,\r\n      colors: this.colors\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a palette.\r\n   * Throws exception if not all values are given.\r\n   * @param json\r\n   */\r\n  public static parsePalette(json: any): Palette {\r\n    if (!json.title)\r\n      throw 'Palette has no title'\r\n    if (!json.id)\r\n      throw 'Palette has no id'\r\n    if (!json.colors)\r\n      throw 'Palette has no colors'\r\n\r\n    const palette = new Palette(json.title, json.id)\r\n\r\n    for (const color of json.colors) {\r\n      palette.addColor(Color.parseColor(color))\r\n    }\r\n    palette.colors.reverse()\r\n\r\n    return palette\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "order",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "addColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a color to the beginning of the palette.\n",
                    "description": "<p>Add a color to the beginning of the palette.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 354,
                                "end": 359,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 348,
                                "end": 353,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "generateRandomPalette",
                    "args": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a new random palette with 'size' colors.\n",
                    "description": "<p>Generate a new random palette with &#39;size&#39; colors.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1284,
                                "end": 1288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "size"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1278,
                                "end": 1283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "parsePalette",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a palette.\nThrows exception if not all values are given.\n",
                    "description": "<p>Parse the json object to a palette.\nThrows exception if not all values are given.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2061,
                                "end": 2065,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2055,
                                "end": 2060,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove the color from the palette\n",
                    "description": "<p>Remove the color from the palette</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 672,
                                "end": 677,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 666,
                                "end": 671,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "sortColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSort all colors of the palette by hue\n",
                    "description": "<p>Sort all colors of the palette by hue</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStringify the palette.\n",
                    "description": "<p>Stringify the palette.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Shade",
            "id": "class-Shade-7289935cf60e27020a0f5caf97e476a555f70c44451897bc53392f0b837a07abb75d255352b1d4b59a7d9275c4408f2a2328dbbabc65a59e7fac9d1776dc5b82",
            "file": "src/app/models/shade.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorConverter} from \"../class/color-converter\";\n\nexport class Shade {\n\n  index: number\n  hex: string\n  hue: number\n  saturation: number\n  luminosity: number\n\n  public constructor(index: number, hex: string);\n  public constructor(index: number, hue: number, saturation: number, luminosity: number);\n  public constructor(index: number, hex: string, hue: number, saturation: number, luminosity: number);\n\n  constructor(...args: any[]) {\n    this.index = args[0]\n\n    if (args.length === 2) {\n      this.hex = args[1]\n      const hsl = ColorConverter.HEXtoHSL(this.hex)\n      this.hue = hsl.hue\n      this.saturation = hsl.saturation\n      this.luminosity = hsl.luminosity\n    } else if (args.length === 4) {\n      this.hex = ColorConverter.HSLtoHEX(args[1], args[2], args[3])\n      this.hue = args[1]\n      this.saturation = args[2]\n      this.luminosity = args[3]\n    } else {\n      this.hex = args[1]\n      this.hue = args[2]\n      this.saturation = args[3]\n      this.luminosity = args[4]\n    }\n  }\n\n  /**\n   * Generate a random shade.\n   */\n  public static generateRandomShade(): Shade {\n    return new Shade(\n      0,\n      Math.floor(Math.random() * 360),\n      30 + Math.floor(Math.random() * 60),\n      25 + Math.floor(Math.random() * 50)\n    )\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "hex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "luminosity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "generateRandomShade",
                    "args": [],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a random shade.\n",
                    "description": "<p>Generate a random shade.</p>\n",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToUnicodeVariantUtil",
            "id": "class-ToUnicodeVariantUtil-1a4ba72ff6ec128b8a996fd92500851885286f3ac1c8c259da7992dd4a6be92447eb62e61443f273036d21c085ccff04a58ddb3039ce03eec81f81097e753c37",
            "file": "src/app/utils/to-unicode-variant.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ToUnicodeVariantUtil {\r\n\r\n  static offsets: any = {\r\n    m: [0x1d670, 0x1d7f6],\r\n    b: [0x1d400, 0x1d7ce],\r\n    i: [0x1d434, 0x00030],\r\n    bi: [0x1d468, 0x00030],\r\n    c: [0x0001d49c, 0x00030],\r\n    bc: [0x1d4d0, 0x00030],\r\n    g: [0x1d504, 0x00030],\r\n    d: [0x1d538, 0x1d7d8],\r\n    bg: [0x1d56c, 0x00030],\r\n    s: [0x1d5a0, 0x1d7e2],\r\n    bs: [0x1d5d4, 0x1d7ec],\r\n    is: [0x1d608, 0x00030],\r\n    bis: [0x1d63c, 0x00030],\r\n    o: [0x24B6, 0x2460],\r\n    on: [0x0001f150, 0x2460],\r\n    p: [0x249c, 0x2474],\r\n    q: [0x1f130, 0x00030],\r\n    qn: [0x0001F170, 0x00030],\r\n    w: [0xff21, 0xff10],\r\n    u: [0x2090, 0xff10]\r\n  }\r\n\r\n  static variantOffsets: any = {\r\n    'monospace': 'm',\r\n    'bold' : 'b',\r\n    'italic' : 'i',\r\n    'bold italic' : 'bi',\r\n    'script': 'c',\r\n    'bold script': 'bc',\r\n    'gothic': 'g',\r\n    'gothic bold': 'bg',\r\n    'doublestruck': 'd',\r\n    'sans': 's',\r\n    'bold sans' : 'bs',\r\n    'italic sans': 'is',\r\n    'bold italic sans': 'bis',\r\n    'parenthesis': 'p',\r\n    'circled': 'o',\r\n    'circled negative': 'on',\r\n    'squared': 'q',\r\n    'squared negative': 'qn',\r\n    'fullwidth': 'w'\r\n  }\r\n\r\n  //special characters (absolute values)\r\n  static special: any = {\r\n    m: {\r\n      ' ': 0x2000,\r\n      '-': 0x2013\r\n    },\r\n    i: {\r\n      'h': 0x210e\r\n    },\r\n    g: {\r\n      'C': 0x212d,\r\n      'H': 0x210c,\r\n      'I': 0x2111,\r\n      'R': 0x211c,\r\n      'Z': 0x2128\r\n    },\r\n    d: {\r\n      'C': 0x2102,\r\n      'H': 0x210D,\r\n      'N': 0x2115,\r\n      'P': 0x2119,\r\n      'Q': 0x211A,\r\n      'R': 0x211D,\r\n      'Z': 0x2124\r\n    },\r\n    o: {\r\n      '0': 0x24EA,\r\n      '1': 0x2460,\r\n      '2': 0x2461,\r\n      '3': 0x2462,\r\n      '4': 0x2463,\r\n      '5': 0x2464,\r\n      '6': 0x2465,\r\n      '7': 0x2466,\r\n      '8': 0x2467,\r\n      '9': 0x2468,\r\n    },\r\n    on: {},\r\n    p: {},\r\n    q: {},\r\n    qn: {},\r\n    w: {}\r\n  }\r\n\r\n  static chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\r\n\r\n  static numbers = '0123456789'\r\n\r\n\r\n  public static toUnicodeVariant(str: string, variant: string, flags?: string) {\r\n    if (Object.keys(this.special.p).length === 0) {\r\n      //support for parenthesized latin letters small cases\r\n      //support for full width latin letters small cases\r\n      //support for circled negative letters small cases\r\n      //support for squared letters small cases\r\n      //support for squared letters negative small cases\r\n      ['p', 'w', 'on', 'q', 'qn'].forEach(t => {\r\n        for (let i = 97; i <= 122; i++) {\r\n          this.special[t][String.fromCharCode(i)] = this.offsets[t][0] + (i-97)\r\n        }\r\n      })\r\n    }\r\n\r\n    const type = this.getType(variant)\r\n    const underline = this.getFlag('underline|u', flags)\r\n    const strike = this.getFlag('strike|s', flags)\r\n    let result = ''\r\n\r\n    for (let c of str) {\r\n      let index\r\n      if (this.special[type] && this.special[type][c]) c = String.fromCodePoint(this.special[type][c])\r\n      if (type && (index = this.chars.indexOf(c)) > -1) {\r\n        result += String.fromCodePoint(index + this.offsets[type][0])\r\n      } else if (type && (index = this.numbers.indexOf(c)) > -1) {\r\n        result += String.fromCodePoint(index + this.offsets[type][1])\r\n      } else {\r\n        result += c\r\n      }\r\n      if (underline) result += '\\u0332' // add combining underline\r\n      if (strike) result += '\\u0336' // add combining strike\r\n    }\r\n    return result\r\n  }\r\n\r\n  private static getType(variant: string) {\r\n    if (this.variantOffsets[variant])\r\n      return this.variantOffsets[variant]\r\n    if (this.offsets[variant])\r\n      return variant\r\n    return 'm' //monospace as default\r\n  }\r\n\r\n  private static getFlag(flag: string, flags?: string) {\r\n    if (!flags)\r\n      return false\r\n    return flag.split('|').some(f => flags.split(',').indexOf(f) > -1)\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "chars",
                    "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "numbers",
                    "defaultValue": "'0123456789'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "offsets",
                    "defaultValue": "{\r\n    m: [0x1d670, 0x1d7f6],\r\n    b: [0x1d400, 0x1d7ce],\r\n    i: [0x1d434, 0x00030],\r\n    bi: [0x1d468, 0x00030],\r\n    c: [0x0001d49c, 0x00030],\r\n    bc: [0x1d4d0, 0x00030],\r\n    g: [0x1d504, 0x00030],\r\n    d: [0x1d538, 0x1d7d8],\r\n    bg: [0x1d56c, 0x00030],\r\n    s: [0x1d5a0, 0x1d7e2],\r\n    bs: [0x1d5d4, 0x1d7ec],\r\n    is: [0x1d608, 0x00030],\r\n    bis: [0x1d63c, 0x00030],\r\n    o: [0x24B6, 0x2460],\r\n    on: [0x0001f150, 0x2460],\r\n    p: [0x249c, 0x2474],\r\n    q: [0x1f130, 0x00030],\r\n    qn: [0x0001F170, 0x00030],\r\n    w: [0xff21, 0xff10],\r\n    u: [0x2090, 0xff10]\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "special",
                    "defaultValue": "{\r\n    m: {\r\n      ' ': 0x2000,\r\n      '-': 0x2013\r\n    },\r\n    i: {\r\n      'h': 0x210e\r\n    },\r\n    g: {\r\n      'C': 0x212d,\r\n      'H': 0x210c,\r\n      'I': 0x2111,\r\n      'R': 0x211c,\r\n      'Z': 0x2128\r\n    },\r\n    d: {\r\n      'C': 0x2102,\r\n      'H': 0x210D,\r\n      'N': 0x2115,\r\n      'P': 0x2119,\r\n      'Q': 0x211A,\r\n      'R': 0x211D,\r\n      'Z': 0x2124\r\n    },\r\n    o: {\r\n      '0': 0x24EA,\r\n      '1': 0x2460,\r\n      '2': 0x2461,\r\n      '3': 0x2462,\r\n      '4': 0x2463,\r\n      '5': 0x2464,\r\n      '6': 0x2465,\r\n      '7': 0x2466,\r\n      '8': 0x2467,\r\n      '9': 0x2468,\r\n    },\r\n    on: {},\r\n    p: {},\r\n    q: {},\r\n    qn: {},\r\n    w: {}\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "variantOffsets",
                    "defaultValue": "{\r\n    'monospace': 'm',\r\n    'bold' : 'b',\r\n    'italic' : 'i',\r\n    'bold italic' : 'bi',\r\n    'script': 'c',\r\n    'bold script': 'bc',\r\n    'gothic': 'g',\r\n    'gothic bold': 'bg',\r\n    'doublestruck': 'd',\r\n    'sans': 's',\r\n    'bold sans' : 'bs',\r\n    'italic sans': 'is',\r\n    'bold italic sans': 'bis',\r\n    'parenthesis': 'p',\r\n    'circled': 'o',\r\n    'circled negative': 'on',\r\n    'squared': 'q',\r\n    'squared negative': 'qn',\r\n    'fullwidth': 'w'\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFlag",
                    "args": [
                        {
                            "name": "flag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "flag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getType",
                    "args": [
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toUnicodeVariant",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9c387bf6b95880168851fbf53b82a4f42255e47592ffa3268264c166a54864a8968a4c7f08cafa5d32eefb29cbf50725d4a16e63cbbf7e2bd90568d0e5fd3637",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "editColor",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Palette",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "shade",
                    "defaultValue": "Shade.generateRandomShade()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "defaultValue": "'tailwind-color-generator'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "version",
                    "defaultValue": "environment.version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd color to the current palette.\nIf no palette exists, a new one is created.\n",
                    "description": "<p>Add color to the current palette.\nIf no palette exists, a new one is created.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1928,
                                "end": 1933,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1922,
                                "end": 1927,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "randomPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet and display a new random palette with 5 - 10 colors.\n",
                    "description": "<p>Set and display a new random palette with 5 - 10 colors.</p>\n"
                },
                {
                    "name": "removePalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove the current palette from logic.\nThe palette can be restored if it was saved in local storage.\n",
                    "description": "<p>Remove the current palette from logic.\nThe palette can be restored if it was saved in local storage.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter} from '@angular/core';\r\nimport {Palette} from \"./models/palette.model\";\r\nimport {Shade} from \"./models/shade.model\";\r\nimport {Color} from \"./models/color.model\";\r\nimport {environment} from \"../environments/environment\";\r\nimport {StorageService} from \"./services/storage.service\";\r\n// @ts-ignore\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {ColorService} from \"./services/color.service\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n\r\n  title = 'tailwind-color-generator'\r\n  version = environment.version\r\n  dark\r\n\r\n  shade: Shade = Shade.generateRandomShade()\r\n  color: Color\r\n  palette: Palette\r\n\r\n  editColor = new EventEmitter<Color>()\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    public colorService: ColorService\r\n  ) {\r\n    // Redirect to https if server served / browser fetched with http\r\n    if (environment.production && window.location.href.startsWith('http://'))\r\n      window.location.href = 'https://' + window.location.href.substring(6)\r\n\r\n    // Load theme from local storage and subscribe to changes\r\n    this.dark = storage.loadTheme()\r\n    storage.darkEmitter.subscribe(d => this.dark = d.valueOf())\r\n\r\n    // Load palette if saved in local storage\r\n    this.palette = storage.loadPalette()\r\n\r\n    // Load random color for editor\r\n    this.color = Color.generateRandomColor()\r\n  }\r\n\r\n  /**\r\n   * Set and display a new random palette with 5 - 10 colors.\r\n   */\r\n  randomPalette() {\r\n    this.palette = Palette.generateRandomPalette(Math.floor(5 + Math.random() * 5))\r\n  }\r\n\r\n  /**\r\n   * Remove the current palette from logic.\r\n   * The palette can be restored if it was saved in local storage.\r\n   */\r\n  removePalette() {\r\n    this.palette = new Palette('Palette', uuidv4())\r\n  }\r\n\r\n  /**\r\n   * Add color to the current palette.\r\n   * If no palette exists, a new one is created.\r\n   * @param color\r\n   */\r\n  addColor(color: Color | undefined) {\r\n    if (color) {\r\n      if (!this.palette)\r\n        this.palette = new Palette('Palette', uuidv4())\r\n      this.palette.addColor(color)\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\r\n  class=\"min-h-screen grid grid-rows-site content-between\r\n    py-4 text-zinc-900 bg-zinc-100 dark:text-zinc-100 dark:bg-zinc-900\"\r\n>\r\n  <header class=\"relative\">\r\n    <light-switch\r\n      class=\"absolute right-0 mr-6\"\r\n      [dark]=\"dark\"\r\n    ></light-switch>\r\n\r\n    <h1>\r\n      Color Palette Generator\r\n    </h1>\r\n  </header>\r\n\r\n  <main class=\"px-4\">\r\n    <!-- Color Editor -->\r\n    <color-editor\r\n      [dark]=\"dark\"\r\n      (addColor)=\"addColor($event)\"\r\n    ></color-editor>\r\n\r\n    <palette-viewer\r\n      *ngIf=\"palette\" (onRemove)=\"removePalette()\"\r\n      [palette]=\"palette\" [dark]=\"dark\"\r\n    ></palette-viewer>\r\n\r\n    <button\r\n      *ngIf=\"!palette\" (click)=\"randomPalette()\"\r\n      class=\"\r\n        rounded-lg px-4 py-2 block mx-auto my-6\r\n        border-2 border-neutral-600 dark:bord-neutral-300\r\n        bg-neutral-200 dark:bg-neutral-700 shadow-lg font-bold\"\r\n    >\r\n      Generate random palette\r\n    </button>\r\n  </main>\r\n\r\n  <footer class=\"p-4 flex gap-4 justify-between flex-col sm:flex-row text-center mx-auto max-w-5xl w-full mt-10\">\r\n    <a href=\"https://github.com/pawcoding/tailwind-color-generator\" rel=\"noreferrer noopener\" target=\"_blank\" title=\"View source code on GitHub\">View on GitHub</a>\r\n    <span>Version {{version}}</span>\r\n    <a href=\"https://pawcode.de\" target=\"_blank\" title=\"Created by pawcode Development\">\r\n      <img [src]=\"'assets/pawcode-' + (dark ? 'light' : 'dark') + '.svg'\" alt=\"pawcode&nbsp;Development\" class=\"inline h-8\">\r\n    </a>\r\n  </footer>\r\n</div>\r\n"
        },
        {
            "name": "ColorEditorComponent",
            "id": "component-ColorEditorComponent-92b79993b76b0f9f27588ee064d86366b513954893a6a9b9ee3495a5dbcd647c29f109e8b36f088bbb0eb12eebf3d5c0a966f07a8bc956b4605d1287dd0edca0",
            "file": "src/app/components/color-editor/color-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-editor",
            "styleUrls": [
                "./color-editor.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./color-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addColor",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "state",
                    "defaultValue": "EditorState.ADD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EditorState",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "adjustColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateColor",
                    "args": [
                        {
                            "name": "type",
                            "type": "UpdateType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate current shade. The property with type is changed to the new value.\n",
                    "description": "<p>Update current shade. The property with type is changed to the new value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1241,
                                "end": 1245,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "UpdateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1235,
                                "end": 1240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Property to change</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1277,
                                "end": 1282,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1271,
                                "end": 1276,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Value to change to</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the name of the current color\n",
                    "description": "<p>Update the name of the current color</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2648,
                                "end": 2652,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2642,
                                "end": 2647,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate all css properties to the values of the current selected shade\n",
                    "description": "<p>Update all css properties to the values of the current selected shade</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Color} from \"../../models/color.model\";\nimport {Shade} from \"../../models/shade.model\";\nimport {ChangeType, ColorService} from \"../../services/color.service\";\n\n@Component({\n  selector: 'color-editor',\n  templateUrl: './color-editor.component.html',\n  styleUrls: ['./color-editor.component.css']\n})\nexport class ColorEditorComponent implements OnInit {\n\n  @Input()\n  dark = false\n\n  @Output()\n  addColor = new EventEmitter<Color>()\n\n  shade: Shade\n  state: EditorState = EditorState.ADD\n\n  constructor(\n    public colorService: ColorService\n  ) {\n    this.shade = this.colorService.getColor().getShade(500)\n\n    this.colorService.getColorChangeEmitter().subscribe(changeType => {\n      if (changeType !== ChangeType.ADJUST) {\n        this.shade = this.colorService.getColor().getShade(500)\n        this.state = changeType === ChangeType.RANDOM ? EditorState.ADD : EditorState.EDIT\n      }\n      this.updateProperties()\n    })\n  }\n\n  ngOnInit(): void {\n    if (document.body.classList.contains('dark'))\n      this.dark = true\n\n    this.updateProperties()\n  }\n\n  /**\n   * Update current shade. The property with type is changed to the new value.\n   * @param type Property to change\n   * @param value Value to change to\n   */\n  updateColor(type: UpdateType, value: string | number) {\n    if (type === UpdateType.HEX && isNaN(+value)) {\n      this.shade = new Shade(0, `${value}`)\n    } else if (!isNaN(+value)) {\n      value = parseInt(`${value}`)\n      if (type === UpdateType.HUE) {\n        this.shade = new Shade(0, value, this.shade.saturation, this.shade.luminosity)\n      } else if (type === UpdateType.SATURATION) {\n        this.shade = new Shade(0, this.shade.hue, value, this.shade.luminosity)\n      } else if (type === UpdateType.LUMINOSITY) {\n        this.shade = new Shade(0, this.shade.hue, this.shade.saturation, 100 - value)\n      }\n    }\n\n    this.updateProperties()\n  }\n\n  adjustColor() {\n    this.colorService.adjustColor(\n      new Color(this.colorService.getColor().name, this.shade.hex)\n    )\n  }\n\n  /**\n   * Update all css properties to the values of the current selected shade\n   */\n  updateProperties() {\n    document.documentElement.style.setProperty('--selected-hex', this.shade.hex)\n    document.documentElement.style.setProperty('--selected-hue', String(this.shade.hue))\n    document.documentElement.style.setProperty('--selected-saturation', this.shade.saturation + \"%\")\n    document.documentElement.style.setProperty('--selected-luminosity', this.shade.luminosity + \"%\")\n  }\n\n  /**\n   * Update the name of the current color\n   * @param name\n   */\n  updateName(name: string) {\n    this.colorService.updateColorName(name)\n  }\n\n}\n\nenum UpdateType {\n  HEX, HUE, SATURATION, LUMINOSITY\n}\n\nenum EditorState {\n  ADD, EDIT\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\r\n  @apply block w-full;\r\n}\r\n\r\ninput[type=range], input[type=color] {\r\n  @apply w-full outline-none appearance-none cursor-pointer;\r\n  -webkit-appearance: none;\r\n}\r\n\r\ninput[type=range] {\r\n  @apply h-1/2;\r\n}\r\n\r\ninput[type=range]::-webkit-slider-thumb {\r\n  @apply w-6 h-5/6 min-h-10 cursor-grab appearance-none outline-none rounded shadow;\r\n  background-color: var(--selected-hex);\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n}\r\n\r\ninput[type=range]::-moz-range-thumb {\r\n  @apply w-6 h-5/6 min-h-10 cursor-grab rounded shadow;\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\ninput[type=color]::-webkit-color-swatch-wrapper {\r\n  @apply p-0;\r\n}\r\n\r\ninput[type=color]::-webkit-color-swatch {\r\n  @apply border-none h-full;\r\n}\r\n\r\n#hexInput {\r\n  @apply h-full max-h-8 sm:max-h-full;\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\n#hueInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(0, var(--selected-saturation), var(--selected-luminosity)) 0%,\r\n  hsl(36, var(--selected-saturation), var(--selected-luminosity)) 10%,\r\n  hsl(72, var(--selected-saturation), var(--selected-luminosity)) 20%,\r\n  hsl(108, var(--selected-saturation), var(--selected-luminosity)) 30%,\r\n  hsl(144, var(--selected-saturation), var(--selected-luminosity)) 40%,\r\n  hsl(180, var(--selected-saturation), var(--selected-luminosity)) 50%,\r\n  hsl(216, var(--selected-saturation), var(--selected-luminosity)) 60%,\r\n  hsl(252, var(--selected-saturation), var(--selected-luminosity)) 70%,\r\n  hsl(288, var(--selected-saturation), var(--selected-luminosity)) 80%,\r\n  hsl(324, var(--selected-saturation), var(--selected-luminosity)) 90%,\r\n  hsl(360, var(--selected-saturation), var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#saturationInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), 0%, var(--selected-luminosity)) 0%,\r\n  hsl(var(--selected-hue), 100%, var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#luminosityInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 100%) 0%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 50%) 50%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 0%) 100%);\r\n}\r\n",
                    "styleUrl": "./color-editor.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\n  class=\"flex gap-4 max-w-5xl mx-auto mb-8 p-4 rounded-xl shadow bg-neutral-300 dark:bg-neutral-700\"\n>\n\n  <!-- Edit Color -->\n  <section class=\"grow-2 grid grid-rows-7 sm:grid-rows-5 gap-2 items-center\">\n\n    <!-- Edit Hex -->\n    <input\n      type=\"color\"\n      title=\"Select a shade\"\n      id=\"hexInput\" #hexInput\n      [value]=\"shade.hex\"\n      (input)=\"updateColor(0, hexInput.value)\"\n      (change)=\"adjustColor()\"\n    >\n\n    <!-- Edit Hue -->\n    <input\n      type=\"range\"\n      title=\"Adjust the hue\"\n      id=\"hueInput\" #hueInput\n      min=0 max=360\n      [value]=\"shade.hue\"\n      (input)=\"updateColor(1, hueInput.value)\"\n      (change)=\"adjustColor()\"\n    >\n\n    <!-- Edit Saturation -->\n    <input\n      type=\"range\"\n      title=\"Adjust the saturation\"\n      id=\"saturationInput\" #saturationInput\n      min=0 max=100\n      [value]=\"shade.saturation\"\n      (input)=\"updateColor(2, saturationInput.value)\"\n      (change)=\"adjustColor()\"\n    >\n\n    <!-- Edit Luminosity -->\n    <input\n      type=\"range\"\n      title=\"Adjust the luminosity\"\n      id=\"luminosityInput\" #luminosityInput\n      min=0 max=100\n      [value]=\"100 - shade.luminosity\"\n      (input)=\"updateColor(3, luminosityInput.value)\"\n      (change)=\"adjustColor()\"\n    >\n\n    <div class=\"flex gap-2 flex-col sm:flex-row row-span-3 sm:row-span-1\">\n      <!-- Edit Name -->\n      <input\n        type=\"text\"\n        title=\"Give your color a name\"\n        id=\"nameInput\" #nameInput\n        class=\"text-black\"\n        placeholder=\"Color Name\"\n        [value]=\"colorService.getColor().name\"\n        (input)=\"updateName(nameInput.value)\"\n      >\n\n      <!-- Add Color to Palette -->\n      <input\n        type=\"button\"\n        class=\"cursor-pointer p-2\"\n        [ngClass]=\"dark ? 'bg-neutral-600' : 'bg-neutral-400'\"\n        [title]=\"state === 0 ? 'Add current color to palette' : 'Replace existing color in palette'\"\n        [value]=\"state === 0 ? 'Add to palette' : 'Replace existing color'\"\n        (click)=\"addColor.emit(colorService.getColor())\"\n      >\n\n      <!-- Generate new random color -->\n      <input\n        type=\"button\"\n        title=\"Generate new random color\"\n        value=\"Random Color\"\n        class=\"cursor-pointer p-2\"\n        [ngClass]=\"dark ? 'bg-neutral-600' : 'bg-neutral-400'\"\n        (click)=\"colorService.randomColor()\"\n      >\n    </div>\n  </section>\n\n  <!-- Preview Color -->\n  <section class=\"grow grid grid-cols-1 sm:grid-cols-2 text-center\">\n    <span\n      *ngFor=\"let shade of colorService.getColor().shades\"\n      [title]=\"shade.index + '&#10;' + shade.hex\"\n      [ngStyle]=\"{\n        'background-color': shade.hex,\n        'color': colorService.getColor().getShade(shade.luminosity > 48 ? 900 : 50).hex\n      }\"\n      class=\"p-2\"\n    >\n      {{shade.hex}}\n    </span>\n  </section>\n</article>\n"
        },
        {
            "name": "ColorViewerComponent",
            "id": "component-ColorViewerComponent-8186df04db70ca5526f453d92acbc807a936057c9919865f296b05199b474f611d37851d232f23870d3b80bda7c5df6a2e0738244dbc15e3e71d846b824235cf",
            "file": "src/app/components/color-viewer/color-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./color-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Color",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {Color} from \"../../models/color.model\";\r\nimport {ColorService} from \"../../services/color.service\";\r\n\r\n@Component({\r\n  selector: 'color-viewer',\r\n  templateUrl: './color-viewer.component.html',\r\n})\r\nexport class ColorViewerComponent implements OnInit {\r\n\r\n  @Input()\r\n  color: Color\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Color>()\r\n\r\n  constructor(\r\n    public colorService: ColorService\r\n  ) {\r\n    this.color = Color.generateRandomColor()\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (document.getElementById('body')?.classList.contains('dark'))\r\n      this.dark = true\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\r\n  [ngStyle]=\"{\r\n    'border-color': color.shades[dark ? 2 : 7].hex\r\n  }\"\r\n  class=\"overflow-clip mt-4 rounded-xl shadow-lg border-2 grid grid-areas-color-square sm:grid-areas-color-wide items-center\"\r\n>\r\n  <h3\r\n    [ngStyle]=\"{\r\n      'background-color': color.shades[dark ? 8 : 1].hex,\r\n      'color': color.shades[dark ? 1 : 8].hex,\r\n      'text-align': dark ? 'right' : 'left'\r\n    }\"\r\n    class=\"grid-in-name px-4\"\r\n  >\r\n    {{color.name}}\r\n  </h3>\r\n\r\n  <span\r\n    [ngStyle]=\"{\r\n      'background-color': color.shades[dark ? 8 : 1].hex,\r\n      'color': color.shades[dark ? 1 : 8].hex,\r\n      'text-align': dark ? 'right' : 'left'\r\n    }\"\r\n\r\n    class=\"grid-in-button flex h-full justify-center items-center cursor-pointer\"\r\n  >\r\n    <img\r\n      class=\"h-8 dark:invert\"\r\n      src=\"/assets/icons/edit.svg\" alt=\"Edit color\"\r\n      (click)=\"colorService.loadColor(color)\"\r\n    >\r\n\r\n    <img\r\n      class=\"h-8 dark:invert\"\r\n      src=\"/assets/icons/close.svg\" alt=\"Remove from palette\"\r\n      (click)=\"onRemove.emit(color)\"\r\n    >\r\n  </span>\r\n\r\n  <span\r\n    *ngFor=\"let shade of color.shades\"\r\n    [ngStyle]=\"{\r\n      'background-color': shade.hex,\r\n      'color': color.shades[shade.luminosity > 48 ? 9 : 0].hex\r\n    }\"\r\n    class=\"block w-full text-center text-sm md:text-base lg:text-xl py-4 lg:py-6\"\r\n    [title]=\"shade.index + '&#10;' + shade.hex\"\r\n  >\r\n    {{shade.hex}}\r\n  </span>\r\n</article>\r\n"
        },
        {
            "name": "LightSwitchComponent",
            "id": "component-LightSwitchComponent-cfe186dceae8f6fb444dd9d3f4c958f4bb4eb4201892241008286c92e4e5f9e541df338178f7fe3f05de0f70885c222f715659f9b500bda7d58052ccd4e08e34",
            "file": "src/app/components/light-switch/light-switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "light-switch",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./light-switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle between light and dark theme\n",
                    "description": "<p>Toggle between light and dark theme</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {StorageService} from \"../../services/storage.service\";\r\n\r\n@Component({\r\n  selector: 'light-switch',\r\n  templateUrl: './light-switch.component.html',\r\n})\r\nexport class LightSwitchComponent implements OnInit {\r\n\r\n  @Input()\r\n  dark: boolean | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Toggle between light and dark theme\r\n   */\r\n  toggleTheme(): void {\r\n    this.dark = this.storage.toggleTheme(!this.dark)\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label for=\"light-switch\" class=\"inline-flex relative items-center cursor-pointer\" title=\"Toggle the lights\">\r\n  <input type=\"checkbox\" [checked]=\"dark\" (change)=\"toggleTheme()\" id=\"light-switch\" class=\"sr-only peer\">\r\n\r\n  <div class=\"\r\n    w-14 h-7 rounded-full\r\n    bg-neutral-200 peer-checked:bg-neutral-700 shadow\r\n    peer-focus:outline-none peer peer-checked:after:translate-x-full\r\n    after:content-[url('/assets/icons/sun.svg')] peer-checked:after:content-[url('/assets/icons/moon.svg')]\r\n    after:absolute after:top-0.5 after:left-[4px]\r\n    after:rounded-full after:h-6 after:w-6\r\n    after:bg-white after:transition-all\"\r\n  ></div>\r\n</label>\r\n"
        },
        {
            "name": "PaletteViewerComponent",
            "id": "component-PaletteViewerComponent-364f3528038e99a7ac406cc2039984ab7d5e59e6e437aaac7f3ac6fa7bc6829eb41f9e61a5e7f23b46ec8ffed2159e30911bb0a0fd3ccf1046f2caf332fbf0ce",
            "file": "src/app/components/palette-viewer/palette-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "palette-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./palette-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Palette",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "editingState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "editTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editTitle'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose editor for palette name and save the palette to local storage.\n",
                    "description": "<p>Close editor for palette name and save the palette to local storage.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen editor for palette name.\n",
                    "description": "<p>Open editor for palette name.</p>\n"
                },
                {
                    "name": "removeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.\n",
                    "description": "<p>Remove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1371,
                                "end": 1376,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1365,
                                "end": 1370,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to remove from palette</p>\n"
                        }
                    ]
                },
                {
                    "name": "removePalette",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAsk user for confirmation an trigger onRemove event handler.\n",
                    "description": "<p>Ask user for confirmation an trigger onRemove event handler.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 968,
                                "end": 974,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 962,
                                "end": 967,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>MouseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "savePalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave current palette to local storage.\n",
                    "description": "<p>Save current palette to local storage.</p>\n"
                },
                {
                    "name": "sortPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrigger palette sorting.\n",
                    "description": "<p>Trigger palette sorting.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Palette} from \"../../models/palette.model\";\r\nimport {ToUnicodeVariantUtil} from \"../../utils/to-unicode-variant.util\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {StorageService} from \"../../services/storage.service\";\r\n\r\n@Component({\r\n  selector: 'palette-viewer',\r\n  templateUrl: './palette-viewer.component.html',\r\n})\r\nexport class PaletteViewerComponent implements OnInit {\r\n\r\n  @Input()\r\n  palette: Palette\r\n\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Event>()\r\n\r\n  editingState = false\r\n\r\n  @ViewChild('editTitle')\r\n  editTitle: ElementRef<HTMLInputElement> | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService\r\n  ) {\r\n    this.palette = Palette.generateRandomPalette(5)\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Ask user for confirmation an trigger onRemove event handler.\r\n   * @param $event MouseEvent\r\n   */\r\n  removePalette($event: MouseEvent) {\r\n    if (confirm(`Are you sure you want to delete the palette?\\nIt can ${ToUnicodeVariantUtil.toUnicodeVariant('not', 'bs')} be restored.`))\r\n      this.onRemove.emit($event)\r\n  }\r\n\r\n  /**\r\n   * Remove color from palette and save the current palette to local storage.\r\n   * If color is not present in palette nothing happens.\r\n   * @param color Color to remove from palette\r\n   */\r\n  removeColor(color: Color) {\r\n    if (this.palette.removeColor(color))\r\n      this.savePalette()\r\n  }\r\n\r\n  /**\r\n   * Save current palette to local storage.\r\n   */\r\n  savePalette() {\r\n    this.storage.savePalette(this.palette)\r\n  }\r\n\r\n  /**\r\n   * Open editor for palette name.\r\n   */\r\n  openEditor() {\r\n    this.editingState = true\r\n    setTimeout(() => {\r\n      this.editTitle?.nativeElement.focus()\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Close editor for palette name and save the palette to local storage.\r\n   */\r\n  closeEditor() {\r\n    this.editingState = false\r\n    if (this.palette)\r\n      this.palette.title = this.editTitle?.nativeElement.value || 'Random'\r\n    this.savePalette()\r\n  }\r\n\r\n  /**\r\n   * Trigger palette sorting.\r\n   */\r\n  sortPalette() {\r\n    this.palette.sortColors()\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section\r\n  class=\"max-w-5xl mx-auto p-4 rounded-xl shadow bg-neutral-300 dark:bg-neutral-700\"\r\n>\r\n  <div class=\"flex items-center justify-between\">\r\n    <h2 *ngIf=\"!editingState\" (click)=\"openEditor()\">{{palette.title}}</h2>\r\n\r\n    <input *ngIf=\"editingState\" type=\"text\"\r\n           [value]=\"palette.title\" #editTitle\r\n           placeholder=\"Palette title\"\r\n           (focusout)=\"closeEditor()\" (keydown.enter)=\"closeEditor()\"\r\n           class=\"bg-transparent p-0 text-xl font-bold my-4\r\n            border-0 focus:border-b-neutral-700 dark:focus:border-b-neutral-200 border-b-2 focus:ring-0\">\r\n\r\n    <div class=\"flex\">\r\n      <span title=\"Edit palette\" class=\"px-4 cursor-pointer dark:invert\" (click)=\"openEditor()\">\r\n        <img src=\"/assets/icons/edit.svg\" alt=\"Edit\" class=\"h-8\">\r\n      </span>\r\n\r\n      <span title=\"Sort palette by hue\" class=\"px-4 cursor-pointer dark:invert\" (click)=\"sortPalette()\">\r\n        <img src=\"/assets/icons/sort.svg\" alt=\"Sort\" class=\"h-8\">\r\n      </span>\r\n\r\n      <span title=\"Remove palette\" class=\"px-4 cursor-pointer dark:invert\" (click)=\"removePalette($event)\">\r\n        <img src=\"/assets/icons/delete.svg\" alt=\"Remove\" class=\"h-8\">\r\n      </span>\r\n    </div>\r\n  </div>\r\n\r\n  <color-viewer\r\n    *ngFor=\"let color of palette.colors\"\r\n    [color]=\"color\"\r\n    [dark]=\"dark\"\r\n    (onRemove)=\"removeColor(color)\"\r\n  ></color-viewer>\r\n</section>\r\n"
        },
        {
            "name": "ShadePickerComponent",
            "id": "component-ShadePickerComponent-6ecbf55c531140494bb86f60098d0ef6c699673789eb6656d64c15a25a18f9f9db95e3b4ad0447c46f68f96a1373bc1166adf8b0aa44fe4190c085ccf87c3e0a",
            "file": "src/app/components/shade-picker/shade-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "shade-picker",
            "styleUrls": [
                "./shade-picker.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shade-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Shade | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorEmitter",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generateColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate all shades for the current color.\n",
                    "description": "<p>Generate all shades for the current color.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the name of the current color / shade\n",
                    "description": "<p>Update the name of the current color / shade</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2117,
                                "end": 2121,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2111,
                                "end": 2116,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate all css properties to the values of the current selected shade\n",
                    "description": "<p>Update all css properties to the values of the current selected shade</p>\n"
                },
                {
                    "name": "updateShade",
                    "args": [
                        {
                            "name": "type",
                            "type": "ChangeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate current shade. The property with type is changed to the new value.\n",
                    "description": "<p>Update current shade. The property with type is changed to the new value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 758,
                                "end": 762,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "ChangeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 752,
                                "end": 757,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Property to change</p>\n"
                        },
                        {
                            "name": {
                                "pos": 794,
                                "end": 799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 788,
                                "end": 793,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Value to change to</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Shade} from \"../../models/shade.model\";\nimport {Color} from \"../../models/color.model\";\n\n@Component({\n  selector: 'shade-picker',\n  templateUrl: './shade-picker.component.html',\n  styleUrls: ['./shade-picker.component.css']\n})\nexport class ShadePickerComponent implements OnInit {\n\n  @Input()\n  shade: Shade | undefined\n\n  @Input()\n  dark = false\n\n  @Input()\n  name = ''\n\n  @Output()\n  colorEmitter = new EventEmitter<Color>()\n\n  ngOnInit(): void {\n    if (document.getElementById('body')?.classList.contains('dark'))\n      this.dark = true\n\n    this.updateProperties()\n  }\n\n  /**\n   * Update current shade. The property with type is changed to the new value.\n   * @param type Property to change\n   * @param value Value to change to\n   */\n  updateShade(type: ChangeType, value: string | number): void {\n    if (type === ChangeType.HEX && isNaN(+value))\n      this.shade = new Shade(0, `${value}`)\n    else if (!isNaN(+value)) {\n      if (type === ChangeType.HUE) {\n        // @ts-ignore\n        this.shade = new Shade(0, value, this.shade?.saturation, this.shade?.luminosity)\n      } else if (type === ChangeType.SATURATION) {\n        // @ts-ignore\n        this.shade = new Shade(0, this.shade?.hue, value, this.shade?.luminosity)\n      } else if (type === ChangeType.LUMINOSITY) {\n        // @ts-ignore\n        this.shade = new Shade(0, this.shade?.hue, this.shade?.saturation, 100 - value)\n      }\n    }\n\n    this.updateProperties()\n  }\n\n  /**\n   * Update all css properties to the values of the current selected shade\n   */\n  updateProperties() {\n    if (this.shade) {\n      document.documentElement.style.setProperty('--selected-hex', this.shade.hex)\n      document.documentElement.style.setProperty('--selected-hue', String(this.shade.hue))\n      document.documentElement.style.setProperty('--selected-saturation', this.shade.saturation + \"%\")\n      document.documentElement.style.setProperty('--selected-luminosity', this.shade.luminosity + \"%\")\n    }\n  }\n\n  /**\n   * Update the name of the current color / shade\n   * @param name\n   */\n  updateName(name: string) {\n    this.name = name\n  }\n\n  /**\n   * Generate all shades for the current color.\n   */\n  generateColor() {\n    if (this.shade)\n      this.colorEmitter.emit(new Color(this.name || this.shade.hex, this.shade.hex))\n  }\n\n}\n\n\nexport enum ChangeType {\n  HEX, HUE, SATURATION, LUMINOSITY\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\r\n  @apply block w-full;\r\n}\r\n\r\ninput[type=range], input[type=color] {\r\n  @apply w-full outline-none appearance-none;\r\n  -webkit-appearance: none;\r\n}\r\n\r\ninput[type=range] {\r\n  @apply h-1/2;\r\n}\r\n\r\ninput[type=range]::-webkit-slider-thumb {\r\n  @apply w-6 h-10 cursor-pointer appearance-none outline-none rounded;\r\n  background-color: var(--selected-hex);\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n}\r\n\r\ninput[type=range]::-moz-range-thumb {\r\n  @apply w-6 h-10 cursor-pointer rounded;\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\ninput[type=color]::-webkit-color-swatch-wrapper {\r\n  @apply p-0;\r\n}\r\n\r\ninput[type=color]::-webkit-color-swatch {\r\n  @apply border-none;\r\n}\r\n\r\n#hexInput {\r\n  @apply h-full max-h-8 sm:max-h-full;\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\n#hueInput {\r\n  background: linear-gradient(90deg,\r\n    hsl(0, var(--selected-saturation), var(--selected-luminosity)) 0%,\r\n    hsl(36, var(--selected-saturation), var(--selected-luminosity)) 10%,\r\n    hsl(72, var(--selected-saturation), var(--selected-luminosity)) 20%,\r\n    hsl(108, var(--selected-saturation), var(--selected-luminosity)) 30%,\r\n    hsl(144, var(--selected-saturation), var(--selected-luminosity)) 40%,\r\n    hsl(180, var(--selected-saturation), var(--selected-luminosity)) 50%,\r\n    hsl(216, var(--selected-saturation), var(--selected-luminosity)) 60%,\r\n    hsl(252, var(--selected-saturation), var(--selected-luminosity)) 70%,\r\n    hsl(288, var(--selected-saturation), var(--selected-luminosity)) 80%,\r\n    hsl(324, var(--selected-saturation), var(--selected-luminosity)) 90%,\r\n    hsl(360, var(--selected-saturation), var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#saturationInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), 0%, var(--selected-luminosity)) 0%,\r\n  hsl(var(--selected-hue), 100%, var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#luminosityInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 100%) 0%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 50%) 50%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 0%) 100%);\r\n}\r\n",
                    "styleUrl": "./shade-picker.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\r\n  class=\"grid sm:grid-cols-2 grid-rows-7 sm:grid-rows-5 gap-x-4 gap-y-2\r\n    max-w-5xl mx-auto items-center p-4 rounded-xl border-2 shadow-lg\"\r\n  [ngClass]=\"dark ? 'border-neutral-300 bg-neutral-700' : 'border-neutral-600 bg-neutral-200'\"\r\n  *ngIf=\"shade\"\r\n>\r\n  <input\r\n    class=\"sm:row-span-2\"\r\n    id=\"hexInput\" type=\"color\" title=\"Select a color\"\r\n    [value]=\"shade.hex\" #hexInput\r\n    (input)=\"updateShade(0, hexInput.value)\">\r\n\r\n  <input\r\n    class=\"row-start-1 sm:row-auto text-black\"\r\n    id=\"nameInput\" type=\"text\" title=\"Give your color a name\"\r\n    [value]=\"name\" #nameInput placeholder=\"Color Name\"\r\n    (input)=\"updateName(nameInput.value)\">\r\n\r\n  <section\r\n    [ngStyle]=\"{\r\n      'background-color': shade.hex,\r\n      'color': shade.luminosity > 48 ? '#000000' : '#ffffff'\r\n    }\"\r\n    (click)=\"generateColor()\"\r\n    class=\"block w-full text-lg flex items-center justify-center\r\n      row-span-2 sm:row-span-4 row-start-6 h-full cursor-pointer p-4\"\r\n    title=\"Click to generate all 10 shades for your color\"\r\n  >\r\n    <h2 class=\"text-center\">\r\n      Click to generate color\r\n      {{name ? (name + ' (' + shade.hex + ')') : shade.hex}}\r\n    </h2>\r\n  </section>\r\n\r\n  <input\r\n    id=\"hueInput\" type=\"range\" title=\"Adjust the hue\"\r\n    [value]=\"shade.hue\" #hueInput min=\"0\" max=\"360\"\r\n    (input)=\"updateShade(1, hueInput.value)\">\r\n\r\n  <input\r\n    id=\"saturationInput\" type=\"range\" title=\"Adjust the saturation\"\r\n    [value]=\"shade.saturation\" #saturationInput min=\"0\" max=\"100\"\r\n    (input)=\"updateShade(2, saturationInput.value)\">\r\n\r\n  <input\r\n    id=\"luminosityInput\" type=\"range\" title=\"Adjust the luminosity\"\r\n    [value]=\"100 - shade.luminosity\" #luminosityInput min=\"0\" max=\"100\"\r\n    (input)=\"updateShade(3, luminosityInput.value)\">\r\n</article>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-409acf4db1b2b293cf05335a4393affa7b16a99895fa7ca0bfdca899f70fd47ab4be90edf149c5ee92a8e466a5ed334d66ebd99414ba1a64cb4ba386e0834e26",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ColorViewerComponent } from './components/color-viewer/color-viewer.component';\nimport { PaletteViewerComponent } from './components/palette-viewer/palette-viewer.component';\nimport { ShadePickerComponent } from './components/shade-picker/shade-picker.component';\nimport {StorageService} from \"./services/storage.service\";\nimport { LightSwitchComponent } from './components/light-switch/light-switch.component';\nimport { ColorEditorComponent } from './components/color-editor/color-editor.component';\nimport {ColorService} from \"./services/color.service\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ColorViewerComponent,\n    PaletteViewerComponent,\n    ShadePickerComponent,\n    LightSwitchComponent,\n    ColorEditorComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [\n    StorageService,\n    ColorService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ColorService"
                        },
                        {
                            "name": "StorageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ColorEditorComponent"
                        },
                        {
                            "name": "ColorViewerComponent"
                        },
                        {
                            "name": "LightSwitchComponent"
                        },
                        {
                            "name": "PaletteViewerComponent"
                        },
                        {
                            "name": "ShadePickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  version: packageJson.version\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  version: packageJson.version\n}"
            },
            {
                "name": "MediaScope",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mediaScopePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('media-scope', uuidv4())"
            },
            {
                "name": "Pawcode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PawcodeBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PawcodeBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PawcodeBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/shade-picker/shade-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pawcodePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('pawcode', uuidv4())"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Rainbow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "rainbowPalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('Rainbow', uuidv4())"
            },
            {
                "name": "Random",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/shade-picker/shade-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ChangeType",
                "childs": [
                    {
                        "name": "LOAD",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ADJUST",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RANDOM",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/color.service.ts"
            },
            {
                "name": "ChangeType",
                "childs": [
                    {
                        "name": "HEX",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "HUE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SATURATION",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LUMINOSITY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/shade-picker/shade-picker.component.ts"
            },
            {
                "name": "EditorState",
                "childs": [
                    {
                        "name": "ADD",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EDIT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/color-editor/color-editor.component.ts"
            },
            {
                "name": "UpdateType",
                "childs": [
                    {
                        "name": "HEX",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "HUE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SATURATION",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LUMINOSITY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/color-editor/color-editor.component.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  version: packageJson.version\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  version: packageJson.version\n}"
                }
            ],
            "src/app/components/palette-viewer/palette-viewer.component.stories.ts": [
                {
                    "name": "MediaScope",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mediaScopePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('media-scope', uuidv4())"
                },
                {
                    "name": "Pawcode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "pawcodePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('pawcode', uuidv4())"
                },
                {
                    "name": "Rainbow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "rainbowPalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('Rainbow', uuidv4())"
                },
                {
                    "name": "Random",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/app/components/color-editor/color-editor.component.stories.ts": [
                {
                    "name": "PawcodeBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/app/components/color-viewer/color-viewer.component.stories.ts": [
                {
                    "name": "PawcodeBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/app/components/shade-picker/shade-picker.component.stories.ts": [
                {
                    "name": "PawcodeBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/shade-picker/shade-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/shade-picker/shade-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/app/components/light-switch/light-switch.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/services/color.service.ts": [
                {
                    "name": "ChangeType",
                    "childs": [
                        {
                            "name": "LOAD",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ADJUST",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RANDOM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/color.service.ts"
                }
            ],
            "src/app/components/shade-picker/shade-picker.component.ts": [
                {
                    "name": "ChangeType",
                    "childs": [
                        {
                            "name": "HEX",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "HUE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SATURATION",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LUMINOSITY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/shade-picker/shade-picker.component.ts"
                }
            ],
            "src/app/components/color-editor/color-editor.component.ts": [
                {
                    "name": "EditorState",
                    "childs": [
                        {
                            "name": "ADD",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EDIT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/color-editor/color-editor.component.ts"
                },
                {
                    "name": "UpdateType",
                    "childs": [
                        {
                            "name": "HEX",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "HUE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SATURATION",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LUMINOSITY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/color-editor/color-editor.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 13,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 23,
                "coverageCount": "3/13",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-converter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorConverter",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/class/color-interpolater.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorInterpolater",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PawcodeBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorEditorComponent",
                "coveragePercent": 25,
                "coverageCount": "3/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PawcodeBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LightSwitchComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MediaScope",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediaScopePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pawcode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pawcodePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rainbow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rainbowPalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Random",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaletteViewerComponent",
                "coveragePercent": 42,
                "coverageCount": "6/14",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/shade-picker/shade-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PawcodeBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shade-picker/shade-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shade-picker/shade-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShadePickerComponent",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/color.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Color",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/palette.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Palette",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/shade.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Shade",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/palette.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaletteService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToUnicodeVariantUtil",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}