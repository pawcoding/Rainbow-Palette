{
  "pipes": [
    {
      "name": "SafeHtmlPipe",
      "id": "pipe-SafeHtmlPipe-89cc71d8dbf69cb1ceb182227ea000b44544afece458ee150de5fae2fe029adbee056d3e31a2b60047f61d8874e2f5546ca4c81dc570350fc9b2fff7de828469",
      "file": "src/app/pipes/safe-html.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "SafeHtml",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "safeHtml",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser'\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n  constructor(private sanitized: DomSanitizer) {}\r\n\r\n  transform(value: string): SafeHtml {\r\n    return this.sanitized.bypassSecurityTrustHtml(value)\r\n  }\r\n}\r\n"
    }
  ],
  "interfaces": [
    {
      "name": "Action",
      "id": "interface-Action-5b78b310bd85aa263594a29f585b22fefbfa31b2e08fa9b1c26a002783bd9aa8e4ae108e51a51382cdba0bb212fc25ac5d17701c0c582c4976442829958c42cc",
      "file": "src/app/interfaces/dialog.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\n\r\nexport interface Dialog {\r\n  id: string\r\n  interpolateParams?: { [key: string]: string }\r\n  actions?: Action[]\r\n}\r\n\r\nexport interface Action {\r\n  id: string\r\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\n  action: EventEmitter<any>\r\n}\r\n",
      "properties": [
        {
          "name": "action",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EventEmitter<any>",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "Dialog",
      "id": "interface-Dialog-5b78b310bd85aa263594a29f585b22fefbfa31b2e08fa9b1c26a002783bd9aa8e4ae108e51a51382cdba0bb212fc25ac5d17701c0c582c4976442829958c42cc",
      "file": "src/app/interfaces/dialog.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\n\r\nexport interface Dialog {\r\n  id: string\r\n  interpolateParams?: { [key: string]: string }\r\n  actions?: Action[]\r\n}\r\n\r\nexport interface Action {\r\n  id: string\r\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\n  action: EventEmitter<any>\r\n}\r\n",
      "properties": [
        {
          "name": "actions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Action[]",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "interpolateParams",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "Entry",
      "id": "interface-Entry-3d7e00753c2c9f7ea0fa6fd540cc0c6cd9f304257cf6d7ad5ba7b9c7c12baa3da9d3dd9a5e2ffd082570bb811a1f9badece52ecc5eafd19a10c38c3f322f141f",
      "file": "src/app/class/color-namer.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Shade } from '../models/shade.model'\r\nimport { HttpClient, HttpXhrBackend } from '@angular/common/http'\r\n\r\nexport class ColorNamer {\r\n  private static colorDictionary: Entry[] = []\r\n  private static grayDictionary: Entry[] = []\r\n\r\n  public static loadDictionary() {\r\n    const http = new HttpClient(\r\n      new HttpXhrBackend({\r\n        build: () => new XMLHttpRequest(),\r\n      })\r\n    )\r\n\r\n    http\r\n      .get('/assets/color_dictionary.csv', { responseType: 'text' })\r\n      .subscribe((data) => {\r\n        const list = data.split('\\n')\r\n        list.shift()\r\n\r\n        this.colorDictionary = list.map((entry) => {\r\n          const split = entry.split(';')\r\n          return {\r\n            name: split[0],\r\n            hue: parseInt(split[1]),\r\n            saturation: parseInt(split[2]),\r\n            luminosity: parseInt(split[3]),\r\n          }\r\n        })\r\n\r\n        this.grayDictionary.filter((color) => color.hue === -1)\r\n      })\r\n  }\r\n\r\n  public static nameColor(shade: Shade) {\r\n    if (this.colorDictionary.length + this.grayDictionary.length === 0) {\r\n      console.info('Color dictionary is not loaded (yet).')\r\n      return shade.hex.substring(1)\r\n    }\r\n\r\n    const dictionary =\r\n      shade.saturation === 0 ? this.grayDictionary : this.colorDictionary\r\n    const nearest = dictionary.reduce((prev, curr) =>\r\n      this.calculateDifference(curr, shade) <\r\n      this.calculateDifference(prev, shade)\r\n        ? curr\r\n        : prev\r\n    )\r\n    return nearest.name.replace(\r\n      /(\\w)(\\w*)/g,\r\n      (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase()\r\n    )\r\n  }\r\n\r\n  private static calculateDifference(\r\n    entry: { hue: number; saturation: number; luminosity: number },\r\n    shade: Shade\r\n  ) {\r\n    return (\r\n      10 * Math.abs(entry.hue - shade.hue) +\r\n      5 * Math.abs(entry.saturation - shade.saturation) +\r\n      Math.abs(entry.luminosity - shade.luminosity)\r\n    )\r\n  }\r\n}\r\n\r\ninterface Entry {\r\n  name: string\r\n  hue: number\r\n  saturation: number\r\n  luminosity: number\r\n}\r\n",
      "properties": [
        {
          "name": "hue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "luminosity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "saturation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 70
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "AnalyticsInterceptor",
      "id": "injectable-AnalyticsInterceptor-257077febacf96d7fe9bc28802672443516a6da0389d580bedbaa910edac9998646b9d20f8e97ed3a09ddf16faff9af60f64dc45c9c95de261f505013d22ad03",
      "file": "src/app/interceptors/analytics.interceptor.ts",
      "properties": [
        {
          "name": "isPWA",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "methods": [
        {
          "name": "beforePageTrack",
          "args": [
            {
              "name": "event",
              "type": "NavigationEnd",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable | Promise | void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "NavigationEnd",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { MatomoRouterInterceptor } from '@ngx-matomo/router'\r\nimport { Injectable } from '@angular/core'\r\nimport { StorageService } from '../services/storage.service'\r\nimport { MatomoTracker } from '@ngx-matomo/tracker'\r\nimport { Observable } from 'rxjs'\r\nimport { NavigationEnd } from '@angular/router'\r\n\r\n@Injectable()\r\nexport class AnalyticsInterceptor implements MatomoRouterInterceptor {\r\n  isPWA = false\r\n\r\n  constructor(private tracker: MatomoTracker, private storage: StorageService) {\r\n    // Check for installed PWA\r\n    if (\r\n      window.matchMedia('(display-mode: standalone)').matches ||\r\n      // eslint-disable-next-line  @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      window.navigator.standalone\r\n    ) {\r\n      this.isPWA = true\r\n    }\r\n\r\n    window.addEventListener('appinstalled', () => {\r\n      this.isPWA = true\r\n      this.tracker.trackEvent('pwa', 'installed')\r\n    })\r\n  }\r\n\r\n  beforePageTrack(\r\n    event: NavigationEnd\r\n  ): Observable<void> | Promise<void> | void {\r\n    this.tracker.setDocumentTitle(event.url)\r\n\r\n    this.tracker.setCustomDimension(1, this.storage.language)\r\n    this.tracker.setCustomDimension(2, this.storage.dark ? 'dark' : 'light')\r\n    this.tracker.setCustomDimension(3, this.isPWA ? 'pwa' : 'web')\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ColorService",
      "id": "injectable-ColorService-9d8420d4897d3b95f35ae1fa96bb2648523154c7256f88b5c3a94b1c832918be7f4a1e5782efd353ff91ff0fee8617ca4b36affa34f687661a0c8a0b9b4ae8e1",
      "file": "src/app/services/color.service.ts",
      "properties": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Color",
          "optional": true,
          "description": "",
          "line": 11,
          "modifierKind": [121]
        },
        {
          "name": "colorChangeEmitter",
          "defaultValue": "new EventEmitter<ChangeType>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [121]
        },
        {
          "name": "shade",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Shade",
          "optional": true,
          "description": "",
          "line": 12,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "adjustShades",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAdjust the shades of a color\n",
          "description": "<p>Adjust the shades of a color</p>\n"
        },
        {
          "name": "closeEditor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nClose the color editor\n",
          "description": "<p>Close the color editor</p>\n"
        },
        {
          "name": "getColor",
          "args": [],
          "optional": false,
          "returnType": "Color | undefined",
          "typeParameters": [],
          "line": 61,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nReturn the current color\n",
          "description": "<p>Return the current color</p>\n"
        },
        {
          "name": "getColorChangeEmitter",
          "args": [],
          "optional": false,
          "returnType": "EventEmitter<ChangeType>",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nReturn the color change event emitter\n",
          "description": "<p>Return the color change event emitter</p>\n"
        },
        {
          "name": "getShade",
          "args": [],
          "optional": false,
          "returnType": "Shade | undefined",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nReturn the current shade\n",
          "description": "<p>Return the current shade</p>\n"
        },
        {
          "name": "loadColor",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "shadeIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOpen the editor with a copy of the color and optional a specific shade.\n",
          "description": "<p>Open the editor with a copy of the color and optional a specific shade.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 614,
                "end": 619,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 608,
                "end": 613,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 633,
                "end": 643,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shadeIndex"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 627,
                "end": 632,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "saveColor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSave all changes made to the color\n",
          "description": "<p>Save all changes made to the color</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { EventEmitter, Injectable } from '@angular/core'\r\nimport { Color } from '../models/color.model'\r\nimport { ColorInterpolater } from '../class/color-interpolater'\r\nimport { Shade } from '../models/shade.model'\r\nimport { PaletteService } from './palette.service'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorService {\r\n  private color?: Color\r\n  private shade?: Shade\r\n  private colorChangeEmitter = new EventEmitter<ChangeType>()\r\n\r\n  constructor(private paletteService: PaletteService) {}\r\n\r\n  /**\r\n   * Open the editor with a copy of the color and optional a specific shade.\r\n   * @param color\r\n   * @param shadeIndex\r\n   */\r\n  loadColor(color: Color, shadeIndex?: number): void {\r\n    this.color = Color.parseColor(color)\r\n    if (shadeIndex) this.shade = this.color.getShade(shadeIndex)\r\n    else this.shade = this.color.shades.find((s) => s.fixed)\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  /**\r\n   * Close the color editor\r\n   */\r\n  closeEditor(): void {\r\n    this.color = undefined\r\n    this.shade = undefined\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  /**\r\n   * Adjust the shades of a color\r\n   */\r\n  adjustShades(): void {\r\n    if (this.color) {\r\n      ColorInterpolater.regenerateShades(this.color)\r\n      this.colorChangeEmitter.emit(ChangeType.ADJUST)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save all changes made to the color\r\n   */\r\n  saveColor(): void {\r\n    if (this.color) {\r\n      this.paletteService.getPalette()?.replaceColor(this.color)\r\n      this.closeEditor()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the current color\r\n   */\r\n  getColor(): Color | undefined {\r\n    return this.color\r\n  }\r\n\r\n  /**\r\n   * Return the current shade\r\n   */\r\n  getShade(): Shade | undefined {\r\n    return this.shade\r\n  }\r\n\r\n  /**\r\n   * Return the color change event emitter\r\n   */\r\n  getColorChangeEmitter(): EventEmitter<ChangeType> {\r\n    return this.colorChangeEmitter\r\n  }\r\n}\r\n\r\nexport enum ChangeType {\r\n  LOAD,\r\n  ADJUST,\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "paletteService",
            "type": "PaletteService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "paletteService",
            "type": "PaletteService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "NotificationService",
      "id": "injectable-NotificationService-f931ce64af4ddca4f399359e78093169e0ee079e43c9b07d7bd4e8fde5874a49fdd0f27ce84b053b4d7f4e44dbc392b38cc62f977b65a081a3f2fcee0f4c719f",
      "file": "src/app/services/notification.service.ts",
      "properties": [
        {
          "name": "dialog",
          "defaultValue": "new EventEmitter<\r\n    Dialog | undefined\r\n  >()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EventEmitter<Dialog | undefined>",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "notification",
          "defaultValue": "new EventEmitter<\r\n    | string\r\n    | { id: string; interpolateParams: { [key: string]: string } }\r\n    | undefined\r\n  >()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EventEmitter<string | literal type | undefined>",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { EventEmitter, Injectable } from '@angular/core'\r\nimport { Dialog } from '../interfaces/dialog.interface'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationService {\r\n  dialog: EventEmitter<Dialog | undefined> = new EventEmitter<\r\n    Dialog | undefined\r\n  >()\r\n\r\n  notification: EventEmitter<\r\n    | string\r\n    | { id: string; interpolateParams: { [key: string]: string } }\r\n    | undefined\r\n  > = new EventEmitter<\r\n    | string\r\n    | { id: string; interpolateParams: { [key: string]: string } }\r\n    | undefined\r\n  >()\r\n}\r\n",
      "type": "injectable"
    },
    {
      "name": "PaletteService",
      "id": "injectable-PaletteService-3df63e7c6010daf4dcf8d3f2ccff2a3d70fbba72b44f2a6319c419068597077b4c4615e2762209713ba2e9cf87d913c475e9664d4da63d24cb87aac1d6ba0bb4",
      "file": "src/app/services/palette.service.ts",
      "properties": [
        {
          "name": "hex",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "palette",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Palette | undefined",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [121]
        },
        {
          "name": "paletteChangeEmitter",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EventEmitter<Palette | undefined>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [121]
        },
        {
          "name": "scheme",
          "defaultValue": "PaletteScheme.RAINBOW",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "PaletteScheme",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methods": [
        {
          "name": "clearPalette",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUnload the current palette\n",
          "description": "<p>Unload the current palette</p>\n"
        },
        {
          "name": "generatePalette",
          "args": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "scheme",
              "type": "PaletteScheme",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nGenerate a new color palette with a specific color and scheme\n",
          "description": "<p>Generate a new color palette with a specific color and scheme</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 800,
                "end": 803,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "hex"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 794,
                "end": 799,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 817,
                "end": 823,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "scheme"
              },
              "type": "PaletteScheme",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 811,
                "end": 816,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "getPalette",
          "args": [],
          "optional": false,
          "returnType": "Palette | undefined",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nReturn the current palette\n",
          "description": "<p>Return the current palette</p>\n"
        },
        {
          "name": "getPaletteChangeEmitter",
          "args": [],
          "optional": false,
          "returnType": "EventEmitter<Palette | undefined>",
          "typeParameters": [],
          "line": 72,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nReturn the palette change event emitter\n",
          "description": "<p>Return the palette change event emitter</p>\n"
        },
        {
          "name": "hasPalette",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCheck if a palette is present\n",
          "description": "<p>Check if a palette is present</p>\n"
        },
        {
          "name": "loadPalette",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nLoad an existing palette\n",
          "description": "<p>Load an existing palette</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1264,
                "end": 1271,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "palette"
              },
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1258,
                "end": 1263,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { EventEmitter, Injectable } from '@angular/core'\r\nimport { Palette } from '../models/palette.model'\r\nimport { PaletteGenerator, PaletteScheme } from '../class/palette-generator'\r\nimport { StorageService } from './storage.service'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PaletteService {\r\n  hex: string | undefined\r\n  scheme: PaletteScheme = PaletteScheme.RAINBOW\r\n  private palette: Palette | undefined\r\n  private paletteChangeEmitter: EventEmitter<Palette | undefined> =\r\n    new EventEmitter()\r\n\r\n  constructor(private storageService: StorageService) {\r\n    const palette = storageService.loadPalette()\r\n    if (palette) this.loadPalette(palette)\r\n    else this.clearPalette()\r\n  }\r\n\r\n  /**\r\n   * Generate a new color palette with a specific color and scheme\r\n   * @param hex\r\n   * @param scheme\r\n   */\r\n  generatePalette(hex: string, scheme: PaletteScheme): void {\r\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/)) throw 'Hex must be a 6-digit hex code.'\r\n\r\n    this.hex = hex\r\n    this.scheme = Object.values(PaletteScheme).indexOf(scheme) % 8\r\n    const palette = PaletteGenerator.generatePalette(hex, scheme)\r\n    this.palette = palette\r\n    this.paletteChangeEmitter.emit(palette)\r\n  }\r\n\r\n  /**\r\n   * Load an existing palette\r\n   * @param palette\r\n   */\r\n  loadPalette(palette: Palette): void {\r\n    this.hex = palette.colors[0].getShade(500).hex\r\n    this.palette = palette\r\n    this.paletteChangeEmitter.emit(palette)\r\n  }\r\n\r\n  /**\r\n   * Unload the current palette\r\n   */\r\n  clearPalette(): void {\r\n    this.palette = undefined\r\n    this.paletteChangeEmitter.emit(undefined)\r\n  }\r\n\r\n  /**\r\n   * Return the current palette\r\n   */\r\n  getPalette(): Palette | undefined {\r\n    return this.palette\r\n  }\r\n\r\n  /**\r\n   * Check if a palette is present\r\n   */\r\n  hasPalette(): boolean {\r\n    return !!this.palette\r\n  }\r\n\r\n  /**\r\n   * Return the palette change event emitter\r\n   */\r\n  getPaletteChangeEmitter(): EventEmitter<Palette | undefined> {\r\n    return this.paletteChangeEmitter\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storageService",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "storageService",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "StorageService",
      "id": "injectable-StorageService-91f380a9122b319703103d64222466847f7062f75e040dadcce3a2ac505da65b06f87f7b70ebff5adec5089d87a2416ef284d837feb6a79bb316279ce466d0fc",
      "file": "src/app/services/storage.service.ts",
      "properties": [
        {
          "name": "dark",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "darkEmitter",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "language",
          "defaultValue": "'en'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "languageEmitter",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [
        {
          "name": "applyLanguage",
          "args": [
            {
              "name": "language",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nApply language to the app.\n",
          "description": "<p>Apply language to the app.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1745,
                "end": 1753,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "language"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1739,
                "end": 1744,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "hasTrackingAllowed",
          "args": [],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCheck if the user has disabled tracking.\n",
          "description": "<p>Check if the user has disabled tracking.</p>\n",
          "jsdoctags": [
            {
              "tagName": {
                "pos": 3008,
                "end": 3015,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "returns"
              },
              "comment": "<p>0 = disabled, 1 = enabled, 2 = not set</p>\n",
              "returnType": "number"
            }
          ]
        },
        {
          "name": "loadLanguage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nLoad the language saved in local storage.\nIf no language is saved, the browser default language is used.\nIf the browser default language is not supported, english is used.\n",
          "description": "<p>Load the language saved in local storage.\nIf no language is saved, the browser default language is used.\nIf the browser default language is not supported, english is used.</p>\n"
        },
        {
          "name": "loadPalette",
          "args": [],
          "optional": false,
          "returnType": "Palette | undefined",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nLoad the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.\n",
          "description": "<p>Load the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.</p>\n"
        },
        {
          "name": "loadTheme",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nLoad the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.\n",
          "description": "<p>Load the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.</p>\n"
        },
        {
          "name": "rememberTracking",
          "args": [
            {
              "name": "enabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nRemember if the user has enabled tracking for 90 days.\n",
          "description": "<p>Remember if the user has enabled tracking for 90 days.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2713,
                "end": 2720,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "enabled"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2707,
                "end": 2712,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "savePalette",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSave palette in local storage.\n",
          "description": "<p>Save palette in local storage.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2512,
                "end": 2519,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "palette"
              },
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2506,
                "end": 2511,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "toggleTheme",
          "args": [
            {
              "name": "dark",
              "type": "boolean | undefined",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nToggle between dark and light theme.\nForce dark or light mode with parameter.\n",
          "description": "<p>Toggle between dark and light theme.\nForce dark or light mode with parameter.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 949,
                "end": 953,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "dark"
              },
              "type": "boolean | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 943,
                "end": 948,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { EventEmitter, Injectable } from '@angular/core'\r\nimport { Palette } from '../models/palette.model'\r\nimport { TranslateService } from '@ngx-translate/core'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StorageService {\r\n  dark = false\r\n  language = 'en'\r\n\r\n  darkEmitter = new EventEmitter<boolean>()\r\n  languageEmitter = new EventEmitter<string>()\r\n\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  /**\r\n   * Load the theme if it is stored in local storage.\r\n   * If no theme was saved, the browser default theme is used.\r\n   */\r\n  loadTheme(): boolean {\r\n    if (!localStorage.getItem('theme')) {\r\n      return this.toggleTheme(\r\n        window.matchMedia('(prefers-color-scheme: dark)').matches\r\n      )\r\n    } else {\r\n      return this.toggleTheme(localStorage.getItem('theme') === 'dark')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle between dark and light theme.\r\n   * Force dark or light mode with parameter.\r\n   * @param dark\r\n   */\r\n  toggleTheme(dark: boolean | undefined): boolean {\r\n    document.body.classList.toggle('dark', dark)\r\n\r\n    dark = document.body.classList.contains('dark')\r\n    localStorage.setItem('theme', dark ? 'dark' : 'light')\r\n\r\n    this.darkEmitter.emit(dark)\r\n\r\n    return (this.dark = dark)\r\n  }\r\n\r\n  /**\r\n   * Load the language saved in local storage.\r\n   * If no language is saved, the browser default language is used.\r\n   * If the browser default language is not supported, english is used.\r\n   */\r\n  loadLanguage(): void {\r\n    if (localStorage.getItem('language')) {\r\n      this.applyLanguage(localStorage.getItem('language') ?? 'en')\r\n    } else {\r\n      this.applyLanguage(this.translate.getBrowserLang() ?? 'en')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply language to the app.\r\n   * @param language\r\n   */\r\n  applyLanguage(language: string) {\r\n    this.translate.use(language).subscribe(() => {\r\n      localStorage.setItem('language', language)\r\n      this.language = language\r\n      document.documentElement.setAttribute('lang', language)\r\n      this.languageEmitter.emit(language)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Load the palette saved in local storage.\r\n   * If no palette is saved a random one is going to be generated.\r\n   */\r\n  loadPalette(): Palette | undefined {\r\n    const stored = localStorage.getItem('palette')\r\n    if (stored) {\r\n      try {\r\n        return Palette.parsePalette(JSON.parse(stored))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Save palette in local storage.\r\n   * @param palette\r\n   */\r\n  savePalette(palette: Palette): void {\r\n    localStorage.setItem('palette', palette.toString())\r\n  }\r\n\r\n  /**\r\n   * Remember if the user has enabled tracking for 90 days.\r\n   * @param enabled\r\n   */\r\n  rememberTracking(enabled: boolean): void {\r\n    const item = {\r\n      value: enabled,\r\n      expiry: Date.now() + 1000 * 60 * 60 * 24 * 90,\r\n    }\r\n\r\n    localStorage.setItem('tracking', JSON.stringify(item))\r\n  }\r\n\r\n  /**\r\n   * Check if the user has disabled tracking.\r\n   * @returns {number} 0 = disabled, 1 = enabled, 2 = not set\r\n   */\r\n  hasTrackingAllowed(): number {\r\n    const item = localStorage.getItem('tracking')\r\n    if (item) {\r\n      try {\r\n        const parsed = JSON.parse(item)\r\n        if (parsed.expiry < Date.now()) {\r\n          localStorage.removeItem('tracking')\r\n          return 2\r\n        } else {\r\n          if (parsed.value) {\r\n            this.rememberTracking(true)\r\n          }\r\n\r\n          return parsed.value ? 1 : 0\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n    return 2\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [
    {
      "name": "Color",
      "id": "class-Color-cdf414d1d254f73db09b4ee0cb9800dbc52b9feaf7e4b6f15fb59df9fbc5f8a5b5f676fdd9656cd157d7a824fd4216655dee2bc0b5e145bc3afbf57497fe769e",
      "file": "src/app/models/color.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { ColorInterpolater } from '../class/color-interpolater'\r\nimport { Shade } from './shade.model'\r\nimport { ColorNamer } from '../class/color-namer'\r\n\r\nexport class Color {\r\n  name: string\r\n  shades: Shade[]\r\n\r\n  public constructor(name: string, hex: string)\r\n  public constructor(name: string, hexes: string[])\r\n  public constructor(name: string, shades: Shade[])\r\n\r\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\n  constructor(...args: any[]) {\r\n    this.name = args[0].startsWith('#') ? args[0].substring(1) : args[0]\r\n\r\n    if (typeof args[1] === 'string') {\r\n      this.shades = []\r\n      const shade = new Shade(-1, true, args[1])\r\n      this.shades.push(shade)\r\n    } else if (typeof args[1][0] === 'string') {\r\n      this.shades = []\r\n\r\n      for (const hex of args[1]) {\r\n        this.shades.push(new Shade(-1, true, hex))\r\n      }\r\n    } else {\r\n      this.shades = args[1]\r\n    }\r\n\r\n    ColorInterpolater.regenerateShades(this)\r\n  }\r\n\r\n  /**\r\n   * Get shade by index (50, 100, 200, ..., 900)\r\n   * @param index\r\n   */\r\n  public getShade(index: number): Shade {\r\n    return this.shades.find((s) => s.index === index) || this.shades[0]\r\n  }\r\n\r\n  /**\r\n   * Generate a random color with all shades.\r\n   */\r\n  public static generateRandomColor(): Color {\r\n    const shade = Shade.generateRandomShade()\r\n    return new Color(ColorNamer.nameColor(shade), shade.hex)\r\n  }\r\n\r\n  /**\r\n   * Stringify the color.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      name: this.name,\r\n      shades: this.shades,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a color.\r\n   * Throws exception if json object is no valid color object.\r\n   * @param json\r\n   */\r\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\n  public static parseColor(json: any): Color {\r\n    if (!json.name) throw 'Color has no name'\r\n    if (!json.shades || json.shades.length < 1)\r\n      throw 'Color has not enough shades'\r\n\r\n    const shades: Shade[] = []\r\n    for (const shade of json.shades) {\r\n      shades.push(Shade.parseShade(shade))\r\n    }\r\n\r\n    return new Color(json.name, shades)\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "args",
            "type": "any[]",
            "deprecated": false,
            "deprecationMessage": "",
            "dotDotDotToken": true
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "args",
            "type": "any[]",
            "deprecated": false,
            "deprecationMessage": "",
            "dotDotDotToken": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "shades",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Shade[]",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "methods": [
        {
          "name": "generateRandomColor",
          "args": [],
          "optional": false,
          "returnType": "Color",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nGenerate a random color with all shades.\n",
          "description": "<p>Generate a random color with all shades.</p>\n",
          "modifierKind": [124]
        },
        {
          "name": "getShade",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Shade",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nGet shade by index (50, 100, 200, ..., 900)\n",
          "description": "<p>Get shade by index (50, 100, 200, ..., 900)</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 1041,
                "end": 1046,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "index"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1035,
                "end": 1040,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "parseColor",
          "args": [
            {
              "name": "json",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Color",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nParse the json object to a color.\nThrows exception if json object is no valid color object.\n",
          "description": "<p>Parse the json object to a color.\nThrows exception if json object is no valid color object.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 1686,
                "end": 1690,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "json"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1680,
                "end": 1685,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "toString",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nStringify the color.\n",
          "description": "<p>Stringify the color.</p>\n",
          "modifierKind": [123]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ColorConverter",
      "id": "class-ColorConverter-1e4cb710a7c37b8dd9fbb023cab1ec1138b25381fa520e8d429c5cc53311f2114163c61ea7ed81a7ddc0f27104e54d7a734a5aa8560e7f26a3534646c2c69346",
      "file": "src/app/class/color-converter.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class ColorConverter {\r\n  static HEXtoRGB(hex: string) {\r\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\r\n      throw `Color ${hex} is not in form #RRGGBB.`\r\n\r\n    return {\r\n      red: parseInt(hex.substring(1, 3), 16),\r\n      green: parseInt(hex.substring(3, 5), 16),\r\n      blue: parseInt(hex.substring(5, 7), 16),\r\n    }\r\n  }\r\n\r\n  static HEXtoHSL(hex: string) {\r\n    const rgb = this.HEXtoRGB(hex)\r\n    return this.RGBtoHSL(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n\r\n  static HEXtoHSV(hex: string) {\r\n    const hsl = this.HEXtoHSL(hex)\r\n    return this.HSLtoHSV(hsl.hue, hsl.saturation, hsl.luminosity)\r\n  }\r\n\r\n  static HEXtoCMYK(hex: string) {\r\n    const rgb = this.HEXtoRGB(hex)\r\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n\r\n  static RGBtoHEX(red: number, green: number, blue: number) {\r\n    if (\r\n      red < 0 ||\r\n      red > 255 ||\r\n      green < 0 ||\r\n      green > 255 ||\r\n      blue < 0 ||\r\n      blue > 255\r\n    )\r\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\r\n\r\n    return `#${(red < 16 ? 0 : '') + red.toString(16).toUpperCase()}${\r\n      (green < 16 ? 0 : '') + green.toString(16).toUpperCase()\r\n    }${(blue < 16 ? 0 : '') + blue.toString(16).toUpperCase()}`\r\n  }\r\n\r\n  static RGBtoHSL(red: number, green: number, blue: number) {\r\n    if (\r\n      red < 0 ||\r\n      red > 255 ||\r\n      green < 0 ||\r\n      green > 255 ||\r\n      blue < 0 ||\r\n      blue > 255\r\n    )\r\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\r\n\r\n    const r = red / 255\r\n    const g = green / 255\r\n    const b = blue / 255\r\n\r\n    const cMax = Math.max(r, g, b)\r\n    const cMin = Math.min(r, g, b)\r\n    const delta = cMax - cMin\r\n\r\n    const luminosity = (cMax + cMin) * 50\r\n    const saturation =\r\n      delta === 0\r\n        ? 0\r\n        : (100 * delta) / (1 - Math.abs(2 * (luminosity / 100) - 1))\r\n\r\n    let hue\r\n    if (delta === 0) hue = 0\r\n    else if (cMax === r) hue = 60 * (((g - b) / delta) % 6)\r\n    else if (cMax === g) hue = 60 * ((b - r) / delta + 2)\r\n    else hue = 60 * ((r - g) / delta + 4)\r\n\r\n    if (hue < 0) hue += 360\r\n\r\n    return {\r\n      hue: Math.round(hue),\r\n      saturation: Math.round(saturation),\r\n      luminosity: Math.round(luminosity),\r\n    }\r\n  }\r\n\r\n  static RGBtoHSV(red: number, green: number, blue: number) {\r\n    const hsl = this.RGBtoHSL(red, green, blue)\r\n    return this.HSLtoHSV(hsl.hue, hsl.saturation, hsl.luminosity)\r\n  }\r\n\r\n  static RGBtoCMYK(red: number, green: number, blue: number) {\r\n    if (\r\n      red < 0 ||\r\n      red > 255 ||\r\n      green < 0 ||\r\n      green > 255 ||\r\n      blue < 0 ||\r\n      blue > 255\r\n    )\r\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\r\n\r\n    const r = red / 255\r\n    const g = green / 255\r\n    const b = blue / 255\r\n\r\n    const k = 1 - Math.max(r, g, b)\r\n    const c = (1 - r - k) / (1 - k)\r\n    const m = (1 - g - k) / (1 - k)\r\n    const y = (1 - b - k) / (1 - k)\r\n\r\n    return {\r\n      cyan: Math.round(c * 100),\r\n      magenta: Math.round(m * 100),\r\n      yellow: Math.round(y * 100),\r\n      key: Math.round(k * 100),\r\n    }\r\n  }\r\n\r\n  static HSLtoHEX(hue: number, saturation: number, luminosity: number): string {\r\n    const rgb = this.HSLtoRGB(hue, saturation, luminosity)\r\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n\r\n  static HSLtoRGB(hue: number, saturation: number, luminosity: number) {\r\n    if (\r\n      hue < 0 ||\r\n      hue > 360 ||\r\n      saturation < 0 ||\r\n      saturation > 100 ||\r\n      luminosity < 0 ||\r\n      luminosity > 100\r\n    )\r\n      throw `Color values [${hue}°, ${saturation}%, ${luminosity}%] are not in valid ranges.`\r\n\r\n    const h = hue\r\n    const s = saturation / 100\r\n    const l = luminosity / 100\r\n\r\n    const c = (1 - Math.abs(2 * l - 1)) * s\r\n    const x = c * (1 - Math.abs(((h / 60) % 2) - 1))\r\n    const m = l - c / 2\r\n\r\n    const r = h < 60 || h >= 300 ? c : h < 120 || h >= 240 ? x : 0\r\n    const g = h >= 240 ? 0 : h < 60 || h >= 180 ? x : c\r\n    const b = h < 120 ? 0 : h < 180 || h >= 300 ? x : c\r\n\r\n    return {\r\n      red: Math.round((r + m) * 255),\r\n      green: Math.round((g + m) * 255),\r\n      blue: Math.round((b + m) * 255),\r\n    }\r\n  }\r\n\r\n  static HSLtoHSV(hue: number, saturation: number, luminosity: number) {\r\n    if (\r\n      hue < 0 ||\r\n      hue > 360 ||\r\n      saturation < 0 ||\r\n      saturation > 100 ||\r\n      luminosity < 0 ||\r\n      luminosity > 100\r\n    )\r\n      throw `Color values [${hue}°, ${saturation}%, ${luminosity}%] are not in valid ranges.`\r\n\r\n    const v = luminosity + saturation * Math.min(luminosity, 1 - luminosity)\r\n\r\n    const s = v === 0 ? 0 : 2 * (1 - luminosity / v)\r\n\r\n    return {\r\n      hue: hue,\r\n      saturation: Math.round(s),\r\n      value: Math.round(v),\r\n    }\r\n  }\r\n\r\n  static HSLtoCMYK(hue: number, saturation: number, luminosity: number) {\r\n    const rgb = this.HSLtoRGB(hue, saturation, luminosity)\r\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n\r\n  static HSVtoHEX(hue: number, saturation: number, value: number) {\r\n    const rgb = this.HSVtoRGB(hue, saturation, value)\r\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n\r\n  static HSVtoRGB(hue: number, saturation: number, value: number) {\r\n    const hsl = this.HSVtoHSL(hue, saturation, value)\r\n    return this.HSLtoRGB(hsl.hue, hsl.saturation, hsl.luminosity)\r\n  }\r\n\r\n  static HSVtoHSL(hue: number, saturation: number, value: number) {\r\n    if (\r\n      hue < 0 ||\r\n      hue > 360 ||\r\n      saturation < 0 ||\r\n      saturation > 100 ||\r\n      value < 0 ||\r\n      value > 100\r\n    )\r\n      throw `Color values [${hue}°, ${saturation}%, ${value}%] are not in valid ranges.`\r\n\r\n    const l = value * (1 - saturation / 2)\r\n\r\n    const s = l === 0 || l === 1 ? 0 : (value - l) / Math.min(l, 1 - l)\r\n\r\n    return {\r\n      hue: hue,\r\n      saturation: Math.round(s),\r\n      luminosity: Math.round(l),\r\n    }\r\n  }\r\n\r\n  static HSVtoCMYK(hue: number, saturation: number, value: number) {\r\n    const rgb = this.HSVtoRGB(hue, saturation, value)\r\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n\r\n  static CMYKtoHEX(cyan: number, magenta: number, yellow: number, key: number) {\r\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\r\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n\r\n  static CMYKtoRGB(cyan: number, magenta: number, yellow: number, key: number) {\r\n    if (\r\n      cyan < 0 ||\r\n      cyan > 100 ||\r\n      magenta < 0 ||\r\n      magenta > 100 ||\r\n      yellow < 0 ||\r\n      yellow > 100 ||\r\n      key < 0 ||\r\n      key > 100\r\n    )\r\n      throw `[${cyan}, ${magenta}, ${yellow}, ${key}] is not in valid format.`\r\n\r\n    const c = cyan / 100\r\n    const m = magenta / 100\r\n    const y = yellow / 100\r\n    const k = key / 100\r\n\r\n    const r = (1 - c) * (1 - k)\r\n    const g = (1 - m) * (1 - k)\r\n    const b = (1 - y) * (1 - k)\r\n\r\n    return {\r\n      red: Math.round(255 * r),\r\n      green: Math.round(255 * g),\r\n      blue: Math.round(255 * b),\r\n    }\r\n  }\r\n\r\n  static CMYKtoHSL(cyan: number, magenta: number, yellow: number, key: number) {\r\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\r\n    return this.RGBtoHSL(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n\r\n  static CMYKtoHSV(cyan: number, magenta: number, yellow: number, key: number) {\r\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\r\n    return this.RGBtoHSV(rgb.red, rgb.green, rgb.blue)\r\n  }\r\n}\r\n",
      "properties": [],
      "methods": [
        {
          "name": "CMYKtoHEX",
          "args": [
            {
              "name": "cyan",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "magenta",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "yellow",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "key",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 216,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "cyan",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "magenta",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "yellow",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "key",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "CMYKtoHSL",
          "args": [
            {
              "name": "cyan",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "magenta",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "yellow",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "key",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ hue: any; saturation: any; luminosity: any; }",
          "typeParameters": [],
          "line": 250,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "cyan",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "magenta",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "yellow",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "key",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "CMYKtoHSV",
          "args": [
            {
              "name": "cyan",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "magenta",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "yellow",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "key",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ hue: number; saturation: any; value: any; }",
          "typeParameters": [],
          "line": 255,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "cyan",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "magenta",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "yellow",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "key",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "CMYKtoRGB",
          "args": [
            {
              "name": "cyan",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "magenta",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "yellow",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "key",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ red: any; green: any; blue: any; }",
          "typeParameters": [],
          "line": 221,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "cyan",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "magenta",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "yellow",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "key",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HEXtoCMYK",
          "args": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HEXtoHSL",
          "args": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ hue: any; saturation: any; luminosity: any; }",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HEXtoHSV",
          "args": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ hue: number; saturation: any; value: any; }",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HEXtoRGB",
          "args": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ red: any; green: any; blue: any; }",
          "typeParameters": [],
          "line": 2,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HSLtoCMYK",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
          "typeParameters": [],
          "line": 174,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HSLtoHEX",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 117,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HSLtoHSV",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ hue: number; saturation: any; value: any; }",
          "typeParameters": [],
          "line": 152,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HSLtoRGB",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ red: any; green: any; blue: any; }",
          "typeParameters": [],
          "line": 122,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HSVtoCMYK",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
          "typeParameters": [],
          "line": 211,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HSVtoHEX",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 179,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HSVtoHSL",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ hue: number; saturation: any; luminosity: any; }",
          "typeParameters": [],
          "line": 189,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "HSVtoRGB",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ red: any; green: any; blue: any; }",
          "typeParameters": [],
          "line": 184,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "RGBtoCMYK",
          "args": [
            {
              "name": "red",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "green",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "blue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "red",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "green",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "blue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "RGBtoHEX",
          "args": [
            {
              "name": "red",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "green",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "blue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "red",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "green",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "blue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "RGBtoHSL",
          "args": [
            {
              "name": "red",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "green",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "blue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ hue: any; saturation: any; luminosity: any; }",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "red",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "green",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "blue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "RGBtoHSV",
          "args": [
            {
              "name": "red",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "green",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "blue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ hue: number; saturation: any; value: any; }",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "red",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "green",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "blue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ColorInterpolater",
      "id": "class-ColorInterpolater-22b466d7bb6a1a72b963b3de57ee65051c6de8e77705369995ca891c76de794dafce408b0c245fb3ff14e6ca166f10b99a33a9307f8487052ddb40206068cd48",
      "file": "src/app/class/color-interpolater.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Shade } from '../models/shade.model'\r\nimport { Color } from '../models/color.model'\r\n\r\nexport class ColorInterpolater {\r\n  /**\r\n   * Regenerate every shade but the fixed ones.\r\n   * @param color\r\n   */\r\n  public static regenerateShades(color: Color) {\r\n    // Get all fixed shades sorted by perceived brightness\r\n    const shades = [...color.shades]\r\n      .filter((shade) => shade.fixed)\r\n      .sort((a, b) => b.brightness - a.brightness)\r\n\r\n    // Give each shade an index\r\n    const indices = [...Array(10).keys()].map((i) => i * 100)\r\n    indices[0] = 50\r\n    this.distributeIndices(shades, indices)\r\n\r\n    // Calculate minimal saturation\r\n    const minimum = this.calculateMinSaturation(shades)\r\n\r\n    // Create \"white\"\r\n    const white = this.createBorderShade(shades[0], minimum, true)\r\n    shades.unshift(white)\r\n\r\n    // Create \"black\"\r\n    const black = this.createBorderShade(\r\n      shades[shades.length - 1],\r\n      minimum,\r\n      false\r\n    )\r\n    shades.push(black)\r\n\r\n    // Create missing shades\r\n    for (const index of indices) {\r\n      // Shade already exists\r\n      if (shades.some((shade) => shade.index === index)) continue\r\n\r\n      // Find darker, lighter and third point\r\n      const lighter =\r\n        shades.findLast((shade) => shade.index < index && shade.fixed) || white\r\n      const darker =\r\n        shades.find((shade) => shade.index > index && shade.fixed) || black\r\n      let third = shades.findLast(\r\n        (shade) => shade.index < lighter.index && shade.fixed\r\n      )\r\n      if (!third)\r\n        third =\r\n          shades.find((shade) => shade.index > darker.index && shade.fixed) ||\r\n          black\r\n\r\n      // Interpolate properties\r\n      const hue =\r\n        this.mapNumbers(\r\n          index,\r\n          lighter.index,\r\n          darker.index,\r\n          darker.hue - lighter.hue > 180 ? lighter.hue + 360 : lighter.hue,\r\n          lighter.hue - darker.hue > 180 ? darker.hue + 360 : darker.hue\r\n        ) % 360\r\n      const luminosity = this.mapNumbers(\r\n        index,\r\n        lighter.index,\r\n        darker.index,\r\n        lighter.luminosity,\r\n        darker.luminosity\r\n      )\r\n      const saturation = this.calculateSaturation(\r\n        luminosity,\r\n        lighter,\r\n        darker,\r\n        third\r\n      )\r\n\r\n      // Add shade\r\n      const shade = new Shade(index, false, hue, saturation, luminosity)\r\n      shades.push(shade)\r\n    }\r\n\r\n    // Filter \"black\" and \"white\" and sort again by index\r\n    color.shades = shades\r\n      .filter((shade) => !(shade.index === 0 || shade.index === 1200))\r\n      .sort((a, b) => a.index - b.index)\r\n  }\r\n\r\n  /**\r\n   * Distribute fixed indices from `[50, 100, 200, ..., 900]` to all shades by perceived brightness.\r\n   * Every index will only appear once.\r\n   * This is done by shifting a duplicate index to the next one.\r\n   *\r\n   * **Help wanted:** This algorithm could be improved by calculating penalty points for shifting, generating multiple variants and choosing the one with the fewest penalty points.\r\n   * @param shades\r\n   * @param indices\r\n   */\r\n  private static distributeIndices(shades: Shade[], indices: number[]) {\r\n    shades.forEach((shade) => {\r\n      const mapBrightness = Math.max(\r\n        Math.min(1250 - 12.5 * shade.brightness, 999),\r\n        1\r\n      )\r\n      const index = indices.reduce((prev, curr) =>\r\n        Math.abs(mapBrightness - curr) < Math.abs(mapBrightness - prev)\r\n          ? curr\r\n          : prev\r\n      )\r\n      shade.setIndex(index)\r\n    })\r\n\r\n    this.offsetIndicesFromLightest(shades)\r\n  }\r\n\r\n  /**\r\n   * Offset indices from lightest to darkest so no index appears multiple times.\r\n   * @param shades\r\n   */\r\n  private static offsetIndicesFromLightest(shades: Shade[]) {\r\n    let minIndex = 0\r\n    for (let i = 0; i < shades.length; i++) {\r\n      const shade = shades[i]\r\n\r\n      if (minIndex >= shade.index) {\r\n        if (minIndex < 900) {\r\n          shade.setIndex(minIndex + 100 - (minIndex % 100))\r\n        } else {\r\n          shade.setIndex(900)\r\n          this.offsetIndicesFromDarkest(shades, i)\r\n        }\r\n      }\r\n\r\n      minIndex = shade.index\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Offset indices from darkest to lightest so the index of `shades[start]` is the biggest and no index appears multiple times.\r\n   * @param shades\r\n   * @param start\r\n   */\r\n  private static offsetIndicesFromDarkest(shades: Shade[], start: number) {\r\n    let maxIndex = shades[start].index\r\n    for (let j = start - 1; j >= 0; j--) {\r\n      const brighter = shades[j]\r\n\r\n      if (maxIndex > brighter.index) return\r\n\r\n      brighter.setIndex((maxIndex -= 100))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the lowest saturation using the current lowest offset with an adjusted one.\r\n   *\r\n   * Returns an object including the calculated saturation alongside the brightness of the shade with the lowest saturation.\r\n   * @param shades\r\n   */\r\n  private static calculateMinSaturation(shades: Shade[]) {\r\n    const shadeWithLowestSaturation = shades.reduce((prev, curr) =>\r\n      curr.saturation < prev.saturation ? curr : prev\r\n    )\r\n    const differenceFromMiddleSquared = Math.pow(\r\n      50 - shadeWithLowestSaturation.brightness,\r\n      2\r\n    )\r\n    const evenLowerSaturation = Math.max(\r\n      shadeWithLowestSaturation.saturation - 0.01 * differenceFromMiddleSquared,\r\n      0\r\n    )\r\n    return {\r\n      saturation: Math.round(\r\n        (shadeWithLowestSaturation.saturation + evenLowerSaturation) / 2\r\n      ),\r\n      brightness: shadeWithLowestSaturation.brightness,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the most extreme shades (\"black\" and \"white\").\r\n   * This is done with respect to the hue of the current lightest and darkest shades alongside the minimal saturation and brightness of the current color.\r\n   * @param shade\r\n   * @param minimum\r\n   * @param white\r\n   * @private\r\n   */\r\n  private static createBorderShade(\r\n    shade: Shade,\r\n    minimum: { saturation: number; brightness: number },\r\n    white: boolean\r\n  ) {\r\n    const index = white ? 0 : 1000\r\n    const hue = this.calculateHue(shade, white)\r\n    const saturation = this.calculateMaxSaturation(minimum, shade, index)\r\n    const luminosity = (1000 - index) / 10\r\n\r\n    return new Shade(white ? 0 : 1200, true, hue, saturation, luminosity)\r\n  }\r\n\r\n  /**\r\n   * Calculate the hue of the lightest and darkest shades with the hue of the nearest neighbor in mind.\r\n   * If we want to create a lighter shade, we rotate in direction 60, 180 and 300 degree respectively.\r\n   * If we want to create a darker shade, we rotate in direction 0, 120 and 240 degree respectively.\r\n   * @param shade\r\n   * @param white\r\n   */\r\n  private static calculateHue(shade: Shade, white: boolean) {\r\n    const hueAdjustmentDirection =\r\n      shade.hue < 60 ||\r\n      (120 < shade.hue && shade.hue < 180) ||\r\n      (240 < shade.hue && shade.hue < 300)\r\n        ? 1\r\n        : -1\r\n\r\n    let hue =\r\n      shade.hue +\r\n      (hueAdjustmentDirection *\r\n        (white ? 1 : -1) *\r\n        (white ? shade.index : 1000 - shade.index)) /\r\n        60\r\n\r\n    if (white) {\r\n      if ((shade.hue <= 60 && hue > 60) || (shade.hue >= 60 && hue < 60)) {\r\n        hue = 60\r\n      } else if (\r\n        (shade.hue <= 180 && hue > 180) ||\r\n        (shade.hue >= 180 && hue < 180)\r\n      ) {\r\n        hue = 180\r\n      } else if (\r\n        (shade.hue <= 300 && hue > 300) ||\r\n        (shade.hue >= 300 && hue < 300)\r\n      ) {\r\n        hue = 300\r\n      }\r\n    } else {\r\n      if (\r\n        (((shade.hue > 340 && shade.hue < 360) || shade.hue === 0) &&\r\n          hue > 0 &&\r\n          hue < 20) ||\r\n        (shade.hue >= 0 && shade.hue < 20 && hue < 0)\r\n      ) {\r\n        hue = 0\r\n      } else if (\r\n        (shade.hue <= 120 && hue > 120) ||\r\n        (shade.hue >= 120 && hue < 120)\r\n      ) {\r\n        hue = 120\r\n      } else if (\r\n        (shade.hue <= 240 && hue > 240) ||\r\n        (shade.hue >= 240 && hue < 240)\r\n      ) {\r\n        hue = 240\r\n      }\r\n    }\r\n\r\n    return Math.round(360 + hue) % 360\r\n  }\r\n\r\n  /**\r\n   * Calculate the highest saturation based on a neighbor with minimal saturation and the nearest neighbor.\r\n   * @param minimum\r\n   * @param neighbor\r\n   * @param index\r\n   */\r\n  private static calculateMaxSaturation(\r\n    minimum: { saturation: number; brightness: number },\r\n    neighbor: Shade,\r\n    index: number\r\n  ) {\r\n    if (neighbor.brightness === minimum.brightness)\r\n      return Math.round(\r\n        -0.01 * Math.pow(minimum.saturation, 2) + 2 * minimum.saturation\r\n      )\r\n\r\n    const a =\r\n      (neighbor.saturation - minimum.saturation) /\r\n      Math.pow(neighbor.brightness - minimum.brightness, 2)\r\n    const maxSaturation =\r\n      a * Math.pow(index / 10 - minimum.brightness, 2) + minimum.saturation\r\n\r\n    const minAdd =\r\n      -0.01 * Math.pow(neighbor.saturation, 2) + 2 * neighbor.saturation\r\n\r\n    return Math.min(Math.round(Math.max(maxSaturation, minAdd, 0)), 100)\r\n  }\r\n\r\n  /**\r\n   * Map numbers on a linear 1 dimensional scale\r\n   * @param x\r\n   * @param in_min\r\n   * @param in_max\r\n   * @param out_min\r\n   * @param out_max\r\n   */\r\n  private static mapNumbers(\r\n    x: number,\r\n    in_min: number,\r\n    in_max: number,\r\n    out_min: number,\r\n    out_max: number\r\n  ): number {\r\n    return Math.round(\r\n      ((x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Calculate the saturation by interpolating a value for the current luminosity on a quadratic 2 dimensional parable defined by three points (shades).\r\n   * @param luminosity\r\n   * @param left\r\n   * @param middle\r\n   * @param right\r\n   */\r\n  private static calculateSaturation(\r\n    luminosity: number,\r\n    left: Shade,\r\n    middle: Shade,\r\n    right: Shade\r\n  ) {\r\n    const ll2 = left.luminosity * left.luminosity\r\n    const ml2 = middle.luminosity * middle.luminosity\r\n    const rl2 = right.luminosity * right.luminosity\r\n\r\n    const delta =\r\n      ll2 * middle.luminosity +\r\n        left.luminosity * rl2 +\r\n        ml2 * right.luminosity -\r\n        middle.luminosity * rl2 -\r\n        ll2 * right.luminosity -\r\n        left.luminosity * ml2 || 0.01\r\n    const aNumerator =\r\n      left.saturation * middle.luminosity +\r\n      left.luminosity * right.saturation +\r\n      middle.saturation * right.luminosity -\r\n      middle.luminosity * right.saturation -\r\n      left.saturation * right.luminosity -\r\n      left.luminosity * middle.saturation\r\n    const bNumerator =\r\n      ll2 * middle.saturation +\r\n      left.saturation * rl2 +\r\n      ml2 * right.saturation -\r\n      middle.saturation * rl2 -\r\n      ll2 * right.saturation -\r\n      left.saturation * ml2\r\n    const cNumerator =\r\n      ll2 * middle.luminosity * right.saturation +\r\n      left.luminosity * middle.saturation * rl2 +\r\n      left.saturation * ml2 * right.luminosity -\r\n      left.saturation * middle.luminosity * rl2 -\r\n      ll2 * middle.saturation * right.luminosity -\r\n      left.luminosity * ml2 * right.saturation\r\n\r\n    const x = aNumerator / delta\r\n    const y = bNumerator / delta\r\n    const z = cNumerator / delta\r\n\r\n    const saturation = x * luminosity * luminosity + y * luminosity + z\r\n    return Math.max(Math.min(Math.round(saturation), 100), 0)\r\n  }\r\n}\r\n",
      "properties": [],
      "methods": [
        {
          "name": "calculateHue",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "white",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 205,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCalculate the hue of the lightest and darkest shades with the hue of the nearest neighbor in mind.\nIf we want to create a lighter shade, we rotate in direction 60, 180 and 300 degree respectively.\nIf we want to create a darker shade, we rotate in direction 0, 120 and 240 degree respectively.\n",
          "description": "<p>Calculate the hue of the lightest and darkest shades with the hue of the nearest neighbor in mind.\nIf we want to create a lighter shade, we rotate in direction 60, 180 and 300 degree respectively.\nIf we want to create a darker shade, we rotate in direction 0, 120 and 240 degree respectively.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 6578,
                "end": 6583,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shade"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6572,
                "end": 6577,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 6597,
                "end": 6602,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "white"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6591,
                "end": 6596,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "calculateMaxSaturation",
          "args": [
            {
              "name": "minimum",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "neighbor",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 264,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCalculate the highest saturation based on a neighbor with minimal saturation and the nearest neighbor.\n",
          "description": "<p>Calculate the highest saturation based on a neighbor with minimal saturation and the nearest neighbor.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 8096,
                "end": 8103,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "minimum"
              },
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8090,
                "end": 8095,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 8117,
                "end": 8125,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "neighbor"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8111,
                "end": 8116,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 8139,
                "end": 8144,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "index"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8133,
                "end": 8138,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "calculateMinSaturation",
          "args": [
            {
              "name": "shades",
              "type": "Shade[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ saturation: any; brightness: any; }",
          "typeParameters": [],
          "line": 157,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCalculate the lowest saturation using the current lowest offset with an adjusted one.\n\nReturns an object including the calculated saturation alongside the brightness of the shade with the lowest saturation.\n",
          "description": "<p>Calculate the lowest saturation using the current lowest offset with an adjusted one.</p>\n<p>Returns an object including the calculated saturation alongside the brightness of the shade with the lowest saturation.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 4850,
                "end": 4856,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shades"
              },
              "type": "Shade[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4844,
                "end": 4849,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "calculateSaturation",
          "args": [
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "left",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "middle",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "right",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 313,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCalculate the saturation by interpolating a value for the current luminosity on a quadratic 2 dimensional parable defined by three points (shades).\n",
          "description": "<p>Calculate the saturation by interpolating a value for the current luminosity on a quadratic 2 dimensional parable defined by three points (shades).</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 9468,
                "end": 9478,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "luminosity"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 9462,
                "end": 9467,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 9492,
                "end": 9496,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "left"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 9486,
                "end": 9491,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 9510,
                "end": 9516,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "middle"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 9504,
                "end": 9509,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 9530,
                "end": 9535,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "right"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 9524,
                "end": 9529,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "createBorderShade",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "minimum",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "white",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCreates the most extreme shades (\"black\" and \"white\").\nThis is done with respect to the hue of the current lightest and darkest shades alongside the minimal saturation and brightness of the current color.\n",
          "description": "<p>Creates the most extreme shades (&quot;black&quot; and &quot;white&quot;).\nThis is done with respect to the hue of the current lightest and darkest shades alongside the minimal saturation and brightness of the current color.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 5750,
                "end": 5755,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shade"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5744,
                "end": 5749,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 5769,
                "end": 5776,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "minimum"
              },
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5763,
                "end": 5768,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 5790,
                "end": 5795,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "white"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5784,
                "end": 5789,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 5803,
                "end": 5810,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 121,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "distributeIndices",
          "args": [
            {
              "name": "shades",
              "type": "Shade[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "indices",
              "type": "number[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nDistribute fixed indices from `[50, 100, 200, ..., 900]` to all shades by perceived brightness.\nEvery index will only appear once.\nThis is done by shifting a duplicate index to the next one.\n\n**Help wanted:** This algorithm could be improved by calculating penalty points for shifting, generating multiple variants and choosing the one with the fewest penalty points.\n",
          "description": "<p>Distribute fixed indices from <code>[50, 100, 200, ..., 900]</code> to all shades by perceived brightness.\nEvery index will only appear once.\nThis is done by shifting a duplicate index to the next one.</p>\n<p><strong>Help wanted:</strong> This algorithm could be improved by calculating penalty points for shifting, generating multiple variants and choosing the one with the fewest penalty points.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 3026,
                "end": 3032,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shades"
              },
              "type": "Shade[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3020,
                "end": 3025,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 3046,
                "end": 3053,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "indices"
              },
              "type": "number[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3040,
                "end": 3045,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "mapNumbers",
          "args": [
            {
              "name": "x",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "in_min",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "in_max",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "out_min",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "out_max",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 294,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMap numbers on a linear 1 dimensional scale\n",
          "description": "<p>Map numbers on a linear 1 dimensional scale</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 8945,
                "end": 8946,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "x"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8939,
                "end": 8944,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 8960,
                "end": 8966,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "in_min"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8954,
                "end": 8959,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 8980,
                "end": 8986,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "in_max"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8974,
                "end": 8979,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 9000,
                "end": 9007,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "out_min"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8994,
                "end": 8999,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 9021,
                "end": 9028,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "out_max"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 9015,
                "end": 9020,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "offsetIndicesFromDarkest",
          "args": [
            {
              "name": "shades",
              "type": "Shade[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "start",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 140,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOffset indices from darkest to lightest so the index of `shades[start]` is the biggest and no index appears multiple times.\n",
          "description": "<p>Offset indices from darkest to lightest so the index of <code>shades[start]</code> is the biggest and no index appears multiple times.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 4271,
                "end": 4277,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shades"
              },
              "type": "Shade[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4265,
                "end": 4270,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 4291,
                "end": 4296,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "start"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4285,
                "end": 4290,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "offsetIndicesFromLightest",
          "args": [
            {
              "name": "shades",
              "type": "Shade[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 117,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOffset indices from lightest to darkest so no index appears multiple times.\n",
          "description": "<p>Offset indices from lightest to darkest so no index appears multiple times.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 3645,
                "end": 3651,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shades"
              },
              "type": "Shade[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3639,
                "end": 3644,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "regenerateShades",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nRegenerate every shade but the fixed ones.\n",
          "description": "<p>Regenerate every shade but the fixed ones.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 198,
                "end": 203,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 192,
                "end": 197,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ColorNamer",
      "id": "class-ColorNamer-3d7e00753c2c9f7ea0fa6fd540cc0c6cd9f304257cf6d7ad5ba7b9c7c12baa3da9d3dd9a5e2ffd082570bb811a1f9badece52ecc5eafd19a10c38c3f322f141f",
      "file": "src/app/class/color-namer.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Shade } from '../models/shade.model'\r\nimport { HttpClient, HttpXhrBackend } from '@angular/common/http'\r\n\r\nexport class ColorNamer {\r\n  private static colorDictionary: Entry[] = []\r\n  private static grayDictionary: Entry[] = []\r\n\r\n  public static loadDictionary() {\r\n    const http = new HttpClient(\r\n      new HttpXhrBackend({\r\n        build: () => new XMLHttpRequest(),\r\n      })\r\n    )\r\n\r\n    http\r\n      .get('/assets/color_dictionary.csv', { responseType: 'text' })\r\n      .subscribe((data) => {\r\n        const list = data.split('\\n')\r\n        list.shift()\r\n\r\n        this.colorDictionary = list.map((entry) => {\r\n          const split = entry.split(';')\r\n          return {\r\n            name: split[0],\r\n            hue: parseInt(split[1]),\r\n            saturation: parseInt(split[2]),\r\n            luminosity: parseInt(split[3]),\r\n          }\r\n        })\r\n\r\n        this.grayDictionary.filter((color) => color.hue === -1)\r\n      })\r\n  }\r\n\r\n  public static nameColor(shade: Shade) {\r\n    if (this.colorDictionary.length + this.grayDictionary.length === 0) {\r\n      console.info('Color dictionary is not loaded (yet).')\r\n      return shade.hex.substring(1)\r\n    }\r\n\r\n    const dictionary =\r\n      shade.saturation === 0 ? this.grayDictionary : this.colorDictionary\r\n    const nearest = dictionary.reduce((prev, curr) =>\r\n      this.calculateDifference(curr, shade) <\r\n      this.calculateDifference(prev, shade)\r\n        ? curr\r\n        : prev\r\n    )\r\n    return nearest.name.replace(\r\n      /(\\w)(\\w*)/g,\r\n      (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase()\r\n    )\r\n  }\r\n\r\n  private static calculateDifference(\r\n    entry: { hue: number; saturation: number; luminosity: number },\r\n    shade: Shade\r\n  ) {\r\n    return (\r\n      10 * Math.abs(entry.hue - shade.hue) +\r\n      5 * Math.abs(entry.saturation - shade.saturation) +\r\n      Math.abs(entry.luminosity - shade.luminosity)\r\n    )\r\n  }\r\n}\r\n\r\ninterface Entry {\r\n  name: string\r\n  hue: number\r\n  saturation: number\r\n  luminosity: number\r\n}\r\n",
      "properties": [
        {
          "name": "colorDictionary",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Entry[]",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [121, 124]
        },
        {
          "name": "grayDictionary",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Entry[]",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [121, 124]
        }
      ],
      "methods": [
        {
          "name": "calculateDifference",
          "args": [
            {
              "name": "entry",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "entry",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadDictionary",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        },
        {
          "name": "nameColor",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ColorServiceMock",
      "id": "class-ColorServiceMock-e8edb03dddf1c6f17b829688f228efb9a51c5aa3895c256f247edf9ae0111430ee99a0605198ede566215e4de1726cea8266444f246e7d5c95499e88eeecb63c",
      "file": "src/app/mocks/color.service.mock.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Color } from '../models/color.model'\r\nimport { EventEmitter } from '@angular/core'\r\nimport { ChangeType, ColorService } from '../services/color.service'\r\nimport { Shade } from '../models/shade.model'\r\n\r\nexport class ColorServiceMock implements Partial<ColorService> {\r\n  private color?: Color\r\n  private shade?: Shade\r\n  private colorChangeEmitter = new EventEmitter<ChangeType>()\r\n\r\n  constructor() {\r\n    this.initColor()\r\n  }\r\n\r\n  initColor(): void {\r\n    window.setTimeout(() => {\r\n      this.loadColor(new Color('pawcode Blue', '#4472c4'))\r\n    }, 500)\r\n  }\r\n\r\n  loadColor(color: Color, shadeIndex?: number): void {\r\n    console.log(`ColorServiceMock.loadColor(${color.name}, ${shadeIndex})`)\r\n    this.color = Color.parseColor(color)\r\n    const newShadeIndex =\r\n      shadeIndex ?? this.color.shades.find((s) => s.fixed)?.index ?? 500\r\n    this.shade = this.color.getShade(newShadeIndex)\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  closeEditor(): void {\r\n    console.log('ColorServiceMock.closeEditor()')\r\n    this.color = undefined\r\n    this.shade = undefined\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n\r\n    this.initColor()\r\n  }\r\n\r\n  adjustShades(): void {\r\n    console.log('ColorServiceMock.adjustShades()')\r\n    this.colorChangeEmitter.emit(ChangeType.ADJUST)\r\n  }\r\n\r\n  saveColor(): void {\r\n    console.log('ColorServiceMock.saveColor()')\r\n    this.color = undefined\r\n    this.shade = undefined\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n\r\n    this.initColor()\r\n  }\r\n\r\n  getColor(): Color | undefined {\r\n    console.log('ColorServiceMock.getColor()')\r\n    return this.color\r\n  }\r\n\r\n  getShade(): Shade | undefined {\r\n    console.log('ColorServiceMock.getShade()')\r\n    return this.shade\r\n  }\r\n\r\n  getColorChangeEmitter(): EventEmitter<ChangeType> {\r\n    console.log('ColorServiceMock.getColorChangeEmitter()')\r\n    return this.colorChangeEmitter\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 9
      },
      "properties": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Color",
          "optional": true,
          "description": "",
          "line": 7,
          "modifierKind": [121]
        },
        {
          "name": "colorChangeEmitter",
          "defaultValue": "new EventEmitter<ChangeType>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [121]
        },
        {
          "name": "shade",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Shade",
          "optional": true,
          "description": "",
          "line": 8,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "adjustShades",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "closeEditor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getColor",
          "args": [],
          "optional": false,
          "returnType": "Color | undefined",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getColorChangeEmitter",
          "args": [],
          "optional": false,
          "returnType": "EventEmitter<ChangeType>",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getShade",
          "args": [],
          "optional": false,
          "returnType": "Shade | undefined",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "initColor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "loadColor",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "shadeIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "shadeIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveColor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["Partial"]
    },
    {
      "name": "CssCopyDialog",
      "id": "class-CssCopyDialog-a315c3438132a5468270b4cf068d67a44308e51dfa6749aa2cde3148c24ae9a315c78c6911b362006d27b1eb05b3b5aba3f2cad323f758985608a8e0a388cc0a",
      "file": "src/app/dialogs/css/css-copy.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { toUnicodeVariant } from '../../utils/to-unicode-variant.util'\r\n\r\nexport class CssCopyDialog {\r\n  constructor(private notification: EventEmitter<Dialog | undefined>) {}\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open(\r\n        'https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#using_the_root_pseudo-class',\r\n        '_blank'\r\n      )\r\n    })\r\n\r\n    return {\r\n      id: 'export-css-copy',\r\n      interpolateParams: {\r\n        root: toUnicodeVariant(':root', 'm'),\r\n        usage: toUnicodeVariant('color: var(--color-100);', 'm'),\r\n      },\r\n      actions: [\r\n        {\r\n          id: 'more',\r\n          action: docEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CssDialog",
      "id": "class-CssDialog-6ec1f1e5abeddf2a7c9632e44a888369c1e8929fe7405cbe37135411bdd1433f0546a91271cb9e582644845cbbfd26585a9ac1ea2134e0c6d38320ca36d59a48",
      "file": "src/app/dialogs/css/css.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { PaletteExporter } from '../../class/palette-exporter'\r\nimport { Palette } from '../../models/palette.model'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { CssCopyDialog } from './css-copy.dialog'\r\nimport { CssFileDialog } from './css-file.dialog'\r\n\r\nexport class CssDialog {\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) {}\r\n\r\n  getNotification(): Dialog {\r\n    const cssCopyEmitter = new EventEmitter()\r\n    cssCopyEmitter.subscribe(() => {\r\n      const css = PaletteExporter.exportPaletteToCSS(this.palette)\r\n      navigator.clipboard\r\n        .writeText(css)\r\n        .then(() => {\r\n          this.notification.emit(\r\n            new CssCopyDialog(this.notification).getNotification()\r\n          )\r\n        })\r\n        .catch((e) => {\r\n          this.notification.emit({\r\n            id: 'copy-error',\r\n            interpolateParams: {\r\n              error: e,\r\n            },\r\n          })\r\n        })\r\n    })\r\n\r\n    const cssFileEmitter = new EventEmitter()\r\n    cssFileEmitter.subscribe(() => {\r\n      const css = PaletteExporter.exportCSSFile(this.palette)\r\n      const blob = new Blob([css], { type: 'text/css' })\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = 'colors.css'\r\n      a.click()\r\n\r\n      this.notification.emit(\r\n        new CssFileDialog(this.notification).getNotification()\r\n      )\r\n    })\r\n\r\n    return {\r\n      id: 'export-css',\r\n      actions: [\r\n        {\r\n          id: 'copy',\r\n          action: cssCopyEmitter,\r\n        },\r\n        {\r\n          id: 'file',\r\n          action: cssFileEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "palette",
            "type": "Palette",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "palette",
            "type": "Palette",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CssFileDialog",
      "id": "class-CssFileDialog-6fd46bac9eda2a492f957e81a7221ced03664e39be0ba9951bd69c0a80b50175816c5af4c7720570d41a581eb17ea3f426933120b9d8940d1add87684a29393d",
      "file": "src/app/dialogs/css/css-file.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { toUnicodeVariant } from '../../utils/to-unicode-variant.util'\r\n\r\nexport class CssFileDialog {\r\n  constructor(private notification: EventEmitter<Dialog | undefined>) {}\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open(\r\n        'https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#using_the_root_pseudo-class',\r\n        '_blank'\r\n      )\r\n    })\r\n\r\n    return {\r\n      id: 'export-css-file',\r\n      interpolateParams: {\r\n        file: toUnicodeVariant('colors.css', 'm'),\r\n        link: toUnicodeVariant(\r\n          '<link rel=\"stylesheet\" href=\"/colors.css\">',\r\n          'm'\r\n        ),\r\n        usage: toUnicodeVariant('color: var(--color-100);', 'm'),\r\n      },\r\n      actions: [\r\n        {\r\n          id: 'more',\r\n          action: docEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ExportDialog",
      "id": "class-ExportDialog-e08ef501285bd3d6f4daa43b28607a972825c0d85087fbdcf7dfd73a616f8118ac181e0fdcb448726e495022b2b8438db1989e4368f7bdb4ed4887770901e0db",
      "file": "src/app/dialogs/export.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { Palette } from '../models/palette.model'\r\nimport { Dialog } from '../interfaces/dialog.interface'\r\nimport { CssDialog } from './css/css.dialog'\r\nimport { TailwindDialog } from './tailwind/tailwind.dialog'\r\nimport { ScssDialog } from './scss/scss.dialog'\r\n\r\nexport class ExportDialog {\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) {}\r\n\r\n  getNotification(): Dialog {\r\n    const cssEmitter = new EventEmitter()\r\n    cssEmitter.subscribe(() => {\r\n      this.notification.emit(\r\n        new CssDialog(this.notification, this.palette).getNotification()\r\n      )\r\n    })\r\n\r\n    const scssEmitter = new EventEmitter()\r\n    scssEmitter.subscribe(() => {\r\n      this.notification.emit(\r\n        new ScssDialog(this.notification, this.palette).getNotification()\r\n      )\r\n    })\r\n\r\n    const tailwindEmitter = new EventEmitter()\r\n    tailwindEmitter.subscribe(() => {\r\n      this.notification.emit(\r\n        new TailwindDialog(this.notification, this.palette).getNotification()\r\n      )\r\n    })\r\n\r\n    return {\r\n      id: 'export-palette',\r\n      actions: [\r\n        {\r\n          id: 'css',\r\n          action: cssEmitter,\r\n        },\r\n        {\r\n          id: 'scss',\r\n          action: scssEmitter,\r\n        },\r\n        {\r\n          id: 'tailwind',\r\n          action: tailwindEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "palette",
            "type": "Palette",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "palette",
            "type": "Palette",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "NotificationServiceMock",
      "id": "class-NotificationServiceMock-24b93393b60bea4eaa4f047278c0f935f5278492a2e5165bd1a084fa09a2165f61acefdd3e2db4ad5bd9e7df507bc017e8b50be90f001c63418baa73138d06bd",
      "file": "src/app/mocks/notification.service.mock.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { NotificationService } from '../services/notification.service'\r\nimport { EventEmitter } from '@angular/core'\r\nimport { Dialog } from '../interfaces/dialog.interface'\r\n\r\nexport class NotificationServiceMock implements Partial<NotificationService> {\r\n  notification = new EventEmitter<\r\n    | string\r\n    | { id: string; interpolateParams: { [key: string]: string } }\r\n    | undefined\r\n  >()\r\n\r\n  dialog = new EventEmitter<Dialog | undefined>()\r\n\r\n  constructor() {\r\n    this.initNotification()\r\n    this.initDialog()\r\n  }\r\n\r\n  initNotification() {\r\n    const message = 'test'\r\n\r\n    setTimeout(() => {\r\n      this.notification.emit(message)\r\n    }, 0)\r\n\r\n    this.notification.subscribe((nextMessage) => {\r\n      if (nextMessage) {\r\n        console.log('Show Notification\\n', nextMessage)\r\n      } else {\r\n        console.log('Close Notification')\r\n        setTimeout(() => {\r\n          this.notification.emit(message)\r\n        }, 1000)\r\n      }\r\n    })\r\n  }\r\n\r\n  initDialog() {\r\n    const wait = new EventEmitter()\r\n    const next = new EventEmitter()\r\n\r\n    const content: Dialog = {\r\n      id: 'test',\r\n      actions: [\r\n        {\r\n          id: 'wait',\r\n          action: wait,\r\n        },\r\n        {\r\n          id: 'next',\r\n          action: next,\r\n        },\r\n      ],\r\n    }\r\n\r\n    wait.subscribe(() => {\r\n      this.dialog.emit(undefined)\r\n      setTimeout(() => {\r\n        this.dialog.emit(content)\r\n      }, 2000)\r\n    })\r\n    next.subscribe(() => {\r\n      this.dialog.emit(content)\r\n    })\r\n\r\n    setTimeout(() => {\r\n      this.dialog.emit(content)\r\n    }, 0)\r\n\r\n    this.dialog.subscribe((notification) => {\r\n      if (notification) console.log('Show dialog\\n', notification.id)\r\n      else console.log('Close dialog')\r\n    })\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 12
      },
      "properties": [
        {
          "name": "dialog",
          "defaultValue": "new EventEmitter<Dialog | undefined>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "notification",
          "defaultValue": "new EventEmitter<\r\n    | string\r\n    | { id: string; interpolateParams: { [key: string]: string } }\r\n    | undefined\r\n  >()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "methods": [
        {
          "name": "initDialog",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "initNotification",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["Partial"]
    },
    {
      "name": "Palette",
      "id": "class-Palette-42d16d2862c34c7c2f8696bd0241ee0514c33f5cebe3f363be2ae359c4012cebbf23da209b3112502bd3897a866c8792572a0c861d7fe08c034a8fe80e645b2b",
      "file": "src/app/models/palette.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Color } from './color.model'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport class Palette {\r\n  title: string\r\n  id: string\r\n  colors: Color[] = []\r\n  order = false\r\n\r\n  constructor(title: string, id?: string) {\r\n    this.title = title\r\n    this.id = id || uuidv4()\r\n  }\r\n\r\n  /**\r\n   * Add a color to the beginning of the palette.\r\n   * @param color\r\n   * @param front\r\n   */\r\n  public addColor(color: Color, front = true) {\r\n    if (this.colors.find((c) => c.name === color.name)) {\r\n      this.colors[this.colors.findIndex((c) => c.name === color.name)] = color\r\n    } else {\r\n      if (front) this.colors.unshift(color)\r\n      else this.colors.push(color)\r\n    }\r\n\r\n    this.order = false\r\n  }\r\n\r\n  /**\r\n   * Remove the color from the palette\r\n   * @param color\r\n   */\r\n  public removeColor(color: Color) {\r\n    const index = this.colors.indexOf(color)\r\n    if (index > -1) {\r\n      this.colors.splice(index, 1)\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace color with same name\r\n   * @param color\r\n   */\r\n  replaceColor(color: Color) {\r\n    const index = this.colors.findIndex((c) => c.name === color.name)\r\n    if (index < 0) this.addColor(color, false)\r\n    else this.colors[index] = color\r\n  }\r\n\r\n  /**\r\n   * Sort all colors of the palette by hue\r\n   */\r\n  public sortColors() {\r\n    this.colors.sort((a, b) => {\r\n      if (this.order) return a.getShade(500).hue - b.getShade(500).hue\r\n      else return b.getShade(500).hue - a.getShade(500).hue\r\n    })\r\n    this.order = !this.order\r\n  }\r\n\r\n  /**\r\n   * Stringify the palette.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      id: this.id,\r\n      title: this.title,\r\n      colors: this.colors,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a palette.\r\n   * Throws exception if not all values are given.\r\n   * @param json\r\n   */\r\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\n  public static parsePalette(json: any): Palette {\r\n    if (!json.title) throw 'Palette has no title'\r\n    if (!json.id) throw 'Palette has no id'\r\n    if (!json.colors) throw 'Palette has no colors'\r\n\r\n    const palette = new Palette(json.title, json.id)\r\n\r\n    for (const color of json.colors) {\r\n      palette.addColor(Color.parseColor(color))\r\n    }\r\n    palette.colors.reverse()\r\n\r\n    return palette\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "title",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "id",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "title",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "colors",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Color[]",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "order",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "methods": [
        {
          "name": "addColor",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "front",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAdd a color to the beginning of the palette.\n",
          "description": "<p>Add a color to the beginning of the palette.</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 352,
                "end": 357,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 346,
                "end": 351,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 371,
                "end": 376,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "front"
              },
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "pos": 365,
                "end": 370,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "parsePalette",
          "args": [
            {
              "name": "json",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Palette",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nParse the json object to a palette.\nThrows exception if not all values are given.\n",
          "description": "<p>Parse the json object to a palette.\nThrows exception if not all values are given.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 1846,
                "end": 1850,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "json"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1840,
                "end": 1845,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "removeColor",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nRemove the color from the palette\n",
          "description": "<p>Remove the color from the palette</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 767,
                "end": 772,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 761,
                "end": 766,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "replaceColor",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nReplace color with same name\n",
          "description": "<p>Replace color with same name</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1045,
                "end": 1050,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1039,
                "end": 1044,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "sortColors",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSort all colors of the palette by hue\n",
          "description": "<p>Sort all colors of the palette by hue</p>\n",
          "modifierKind": [123]
        },
        {
          "name": "toString",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nStringify the palette.\n",
          "description": "<p>Stringify the palette.</p>\n",
          "modifierKind": [123]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "PaletteExporter",
      "id": "class-PaletteExporter-398822ce8403a0171a273f301d86deb2d63b3c6f82135e8e18f4e1d6e7241f10c102cdd4481627bc7f2b1c346392b30bc0ed7676b6758712e566315858322cfd",
      "file": "src/app/class/palette-exporter.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Palette } from '../models/palette.model'\r\nimport { Color } from '../models/color.model'\r\nimport { Shade } from '../models/shade.model'\r\n\r\nexport class PaletteExporter {\r\n  /**\r\n   * Export a palette for usage in a separate colors.css file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportCSSFile(palette: Palette) {\r\n    return `:root {\\n\\t${this.exportPaletteToCSS(palette).replace(\r\n      /\\n/g,\r\n      '\\n\\t'\r\n    )}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in plain CSS as CSS properties.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToCSS(palette: Palette) {\r\n    return `/* Color palette generated by ${\r\n      window.location.origin\r\n    } */\\n\\n${palette.colors.map((c) => this.exportColorToCSS(c)).join('\\n\\n')}`\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in plain CSS as CSS properties.\r\n   * @param color Color to export\r\n   * @private\r\n   */\r\n  private static exportColorToCSS(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return color.shades.map((s) => this.exportShadeToCSS(s, name)).join('\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in plain CSS as CSS property.\r\n   * @param shade Shade to export\r\n   * @param name Name of the color\r\n   * @private\r\n   */\r\n  private static exportShadeToCSS(shade: Shade, name: string) {\r\n    return `--${name}-${shade.index}:${shade.index < 100 ? ' ' : ''} ${\r\n      shade.hex\r\n    };`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in a separate _colors.scss file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportSCSSFile(palette: Palette) {\r\n    return `/* Import the variables into your SCSS files with\\n\\t@use 'colors';\\n*/\\n\\n${this.exportPaletteToSCSS(\r\n      palette\r\n    )}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in SCSS as variables.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToSCSS(palette: Palette) {\r\n    return `/* Color palette generated by ${\r\n      window.location.origin\r\n    } */\\n\\n${palette.colors\r\n      .map((c) => this.exportColorToSCSS(c))\r\n      .join('\\n\\n')}`\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in SCSS as variables.\r\n   * @param color Color to export\r\n   */\r\n  private static exportColorToSCSS(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return color.shades.map((s) => this.exportShadeToSCSS(s, name)).join('\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in SCSS as variable.\r\n   * @param shade Shade to export\r\n   * @param name Name of the color\r\n   */\r\n  private static exportShadeToSCSS(shade: Shade, name: string) {\r\n    return `$${name}-${shade.index}:${shade.index < 100 ? ' ' : ''} ${\r\n      shade.hex\r\n    };`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in a separate tailwind.colors.js file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportTailwindFile(palette: Palette) {\r\n    return `module.exports = {\\n\\t${this.exportPaletteToTailwind(\r\n      palette\r\n    ).replace(/\\n/g, '\\n\\t')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in TailwindCSS.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToTailwind(palette: Palette) {\r\n    return palette.colors.map((c) => this.exportColorToTailwind(c)).join(',\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in TailwindCSS.\r\n   * @param color Color to export\r\n   * @private\r\n   */\r\n  private static exportColorToTailwind(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return `'${name}': {\\n${color.shades\r\n      .map((s) => this.exportShadeToTailwind(s))\r\n      .join(',\\n')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in TailwindCSS.\r\n   * @param shade Shade to export\r\n   * @private\r\n   */\r\n  private static exportShadeToTailwind(shade: Shade) {\r\n    return `\\t${shade.index}:${shade.index < 100 ? ' ' : ''} '${shade.hex}'`\r\n  }\r\n}\r\n",
      "properties": [],
      "methods": [
        {
          "name": "exportColorToCSS",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 32,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a color for usage in plain CSS as CSS properties.\n",
          "description": "<p>Export a color for usage in plain CSS as CSS properties.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 869,
                "end": 874,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 863,
                "end": 868,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Color to export</p>\n"
            },
            {
              "tagName": {
                "pos": 898,
                "end": 905,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 121,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "exportColorToSCSS",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a color for usage in SCSS as variables.\n",
          "description": "<p>Export a color for usage in SCSS as variables.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 2170,
                "end": 2175,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2164,
                "end": 2169,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Color to export</p>\n"
            }
          ]
        },
        {
          "name": "exportColorToTailwind",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a color for usage in TailwindCSS.\n",
          "description": "<p>Export a color for usage in TailwindCSS.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 3319,
                "end": 3324,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3313,
                "end": 3318,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Color to export</p>\n"
            },
            {
              "tagName": {
                "pos": 3348,
                "end": 3355,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 121,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "exportCSSFile",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a palette for usage in a separate colors.css file.\n",
          "description": "<p>Export a palette for usage in a separate colors.css file.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 262,
                "end": 269,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "palette"
              },
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 256,
                "end": 261,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Palette to export</p>\n"
            }
          ]
        },
        {
          "name": "exportPaletteToCSS",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a palette for usage in plain CSS as CSS properties.\n",
          "description": "<p>Export a palette for usage in plain CSS as CSS properties.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 539,
                "end": 546,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "palette"
              },
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 533,
                "end": 538,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Palette to export</p>\n"
            }
          ]
        },
        {
          "name": "exportPaletteToSCSS",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a palette for usage in SCSS as variables.\n",
          "description": "<p>Export a palette for usage in SCSS as variables.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 1832,
                "end": 1839,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "palette"
              },
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1826,
                "end": 1831,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Palette to export</p>\n"
            }
          ]
        },
        {
          "name": "exportPaletteToTailwind",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a palette for usage in TailwindCSS.\n",
          "description": "<p>Export a palette for usage in TailwindCSS.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 3077,
                "end": 3084,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "palette"
              },
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3071,
                "end": 3076,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Palette to export</p>\n"
            }
          ]
        },
        {
          "name": "exportSCSSFile",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a palette for usage in a separate _colors.scss file.\n",
          "description": "<p>Export a palette for usage in a separate _colors.scss file.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 1532,
                "end": 1539,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "palette"
              },
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1526,
                "end": 1531,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Palette to export</p>\n"
            }
          ]
        },
        {
          "name": "exportShadeToCSS",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a shade for usage in plain CSS as CSS property.\n",
          "description": "<p>Export a shade for usage in plain CSS as CSS property.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 1195,
                "end": 1200,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shade"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1189,
                "end": 1194,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Shade to export</p>\n"
            },
            {
              "name": {
                "pos": 1230,
                "end": 1234,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "name"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1224,
                "end": 1229,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Name of the color</p>\n"
            },
            {
              "tagName": {
                "pos": 1260,
                "end": 1267,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 121,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "exportShadeToSCSS",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a shade for usage in SCSS as variable.\n",
          "description": "<p>Export a shade for usage in SCSS as variable.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 2474,
                "end": 2479,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shade"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2468,
                "end": 2473,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Shade to export</p>\n"
            },
            {
              "name": {
                "pos": 2509,
                "end": 2513,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "name"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2503,
                "end": 2508,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Name of the color</p>\n"
            }
          ]
        },
        {
          "name": "exportShadeToTailwind",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 126,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a shade for usage in TailwindCSS.\n",
          "description": "<p>Export a shade for usage in TailwindCSS.</p>\n",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": {
                "pos": 3674,
                "end": 3679,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shade"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3668,
                "end": 3673,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Shade to export</p>\n"
            },
            {
              "tagName": {
                "pos": 3703,
                "end": 3710,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 121,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "exportTailwindFile",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a palette for usage in a separate tailwind.colors.js file.\n",
          "description": "<p>Export a palette for usage in a separate tailwind.colors.js file.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 2802,
                "end": 2809,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "palette"
              },
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2796,
                "end": 2801,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Palette to export</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "PaletteGenerator",
      "id": "class-PaletteGenerator-5fc6175442beaa6f9bc8f3c73582516e3398430de1d56a97c9d142c7725acd0bcac79baf57ae6596487f9d7621c5b59939632994d66efd75c3da5b0b7be915c8",
      "file": "src/app/class/palette-generator.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Shade } from '../models/shade.model'\r\nimport { Palette } from '../models/palette.model'\r\nimport { Color } from '../models/color.model'\r\nimport { ColorNamer } from './color-namer'\r\n\r\nexport class PaletteGenerator {\r\n  static generatePalette(hex: string, scheme: PaletteScheme): Palette {\r\n    const shade = new Shade(-1, true, hex)\r\n\r\n    const values = Object.values(PaletteScheme)\r\n    const value = values.indexOf(scheme) % (values.length / 2)\r\n\r\n    switch (value) {\r\n      case PaletteScheme.MONOCHROMATIC:\r\n        return this.generateMonochromaticPalette(shade)\r\n      case PaletteScheme.ANALOGOUS:\r\n        return this.generateAnalogousPalette(shade)\r\n      case PaletteScheme.COMPLEMENTARY:\r\n        return this.generateComplementaryPalette(shade)\r\n      case PaletteScheme.SPLIT:\r\n        return this.generateSplitPalette(shade)\r\n      case PaletteScheme.TRIADIC:\r\n        return this.generateTriadicPalette(shade)\r\n      case PaletteScheme.COMPOUND:\r\n        return this.generateCompoundPalette(shade)\r\n      case PaletteScheme.RAINBOW:\r\n        return this.generateRainbowPalette(shade)\r\n      default:\r\n        return this.generatePalette(hex, this.getRandomScheme())\r\n    }\r\n  }\r\n\r\n  private static getRandomScheme(): PaletteScheme {\r\n    const schemes = Object.keys(PaletteScheme)\r\n    const index = schemes[Math.floor(Math.random() * schemes.length)]\r\n    // eslint-disable-next-line  @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    return PaletteScheme[index]\r\n  }\r\n\r\n  private static generateMonochromaticPalette(shade: Shade) {\r\n    const monochromatic = new Palette('Monochrom')\r\n\r\n    monochromatic.addColor(new Color('primary', [shade]))\r\n    monochromatic.addColor(\r\n      new Color('muted', [new Shade(-1, true, shade.hue, 30, 50)]),\r\n      false\r\n    )\r\n    monochromatic.addColor(\r\n      new Color('gray', [new Shade(-1, true, shade.hue, 2, 50)]),\r\n      false\r\n    )\r\n\r\n    return monochromatic\r\n  }\r\n\r\n  private static generateAnalogousPalette(shade: Shade) {\r\n    const analogous = new Palette('Analogous')\r\n\r\n    analogous.addColor(new Color('primary', [shade]))\r\n\r\n    analogous.addColor(\r\n      new Color('secondary', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 315),\r\n          Math.max(shade.saturation - 20, 0),\r\n          40\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n    analogous.addColor(\r\n      new Color('secondary muted', [\r\n        new Shade(-1, true, this.changeHueOnWheel(shade.hue, 270), 25, 20),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    analogous.addColor(\r\n      new Color('accent', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 45),\r\n          shade.saturation,\r\n          50\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n    analogous.addColor(\r\n      new Color('accent muted', [\r\n        new Shade(-1, true, this.changeHueOnWheel(shade.hue, 90) % 360, 25, 20),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    return analogous\r\n  }\r\n\r\n  private static generateComplementaryPalette(shade: Shade) {\r\n    const complementary = new Palette('Complementary')\r\n\r\n    complementary.addColor(new Color('primary', [shade]))\r\n\r\n    complementary.addColor(\r\n      new Color('gray', [new Shade(-1, true, shade.hue, 3, 50)]),\r\n      false\r\n    )\r\n\r\n    complementary.addColor(\r\n      new Color('secondary', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 180),\r\n          Math.max(shade.saturation - 20, 0),\r\n          40\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    return complementary\r\n  }\r\n\r\n  private static generateSplitPalette(shade: Shade) {\r\n    const split = new Palette('Split')\r\n\r\n    split.addColor(new Color('primary', [shade]))\r\n\r\n    split.addColor(\r\n      new Color('secondary', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 20),\r\n          Math.max(shade.saturation - 20, 0),\r\n          40\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n    split.addColor(\r\n      new Color('gray', [\r\n        new Shade(-1, true, this.changeHueOnWheel(shade.hue, 20), 3, 50),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    split.addColor(\r\n      new Color('accent', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 180),\r\n          shade.saturation,\r\n          80\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    return split\r\n  }\r\n\r\n  private static generateTriadicPalette(shade: Shade) {\r\n    const triadic = new Palette('Triadic')\r\n\r\n    triadic.addColor(new Color('primary', [shade]))\r\n\r\n    triadic.addColor(\r\n      new Color('primary muted', [new Shade(-1, true, shade.hue, 20, 30)]),\r\n      false\r\n    )\r\n\r\n    triadic.addColor(\r\n      new Color('secondary', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 120),\r\n          Math.max(shade.saturation - 20, 0),\r\n          40\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n    triadic.addColor(\r\n      new Color('secondary muted', [\r\n        new Shade(-1, true, this.changeHueOnWheel(shade.hue, 120), 20, 30),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    triadic.addColor(\r\n      new Color('accent', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 240),\r\n          shade.saturation,\r\n          20\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    return triadic\r\n  }\r\n\r\n  private static generateCompoundPalette(shade: Shade) {\r\n    const compound = new Palette('Compound')\r\n\r\n    compound.addColor(new Color('primary', [shade]))\r\n\r\n    compound.addColor(\r\n      new Color('secondary', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 210),\r\n          Math.max(shade.saturation - 20, 0),\r\n          40\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    compound.addColor(\r\n      new Color('accent', [\r\n        new Shade(\r\n          -1,\r\n          true,\r\n          this.changeHueOnWheel(shade.hue, 150),\r\n          shade.saturation,\r\n          50\r\n        ),\r\n      ]),\r\n      false\r\n    )\r\n\r\n    return compound\r\n  }\r\n\r\n  private static generateRainbowPalette(shade: Shade) {\r\n    const rainbow = new Palette('Rainbow')\r\n\r\n    rainbow.addColor(new Color('primary', [shade]))\r\n\r\n    const hues = [4, 26, 55, 95, 149, 200, 253]\r\n    let currentHue = hues.reduce((prev, curr) =>\r\n      Math.abs(curr - shade.hue) < Math.abs(prev - shade.hue) ? curr : prev\r\n    )\r\n    if (currentHue === 253 && shade.hue > 308) currentHue = 4\r\n\r\n    hues.forEach((hue) => {\r\n      if (hue !== currentHue) {\r\n        const newHue = (shade.hue + (hue - currentHue) + 360) % 360\r\n        const newShade = new Shade(\r\n          -1,\r\n          true,\r\n          newHue,\r\n          Math.min(\r\n            100,\r\n            Math.max(0, shade.saturation - 20 + Math.floor(Math.random() * 40))\r\n          ),\r\n          Math.min(\r\n            100,\r\n            Math.max(0, shade.luminosity - 20 + Math.floor(Math.random() * 40))\r\n          )\r\n        )\r\n        rainbow.addColor(\r\n          new Color(ColorNamer.nameColor(newShade), [newShade]),\r\n          false\r\n        )\r\n      }\r\n    })\r\n\r\n    return rainbow\r\n  }\r\n\r\n  private static changeHueOnWheel(hue: number, change: number) {\r\n    let wheel\r\n    if (hue < 60) wheel = 2 * hue\r\n    else if (hue < 120) wheel = hue + 60\r\n    else if (hue < 240) wheel = 0.5 * hue + 120\r\n    else wheel = hue\r\n\r\n    wheel += change\r\n    wheel %= 360\r\n\r\n    let newHue\r\n    if (wheel < 120) newHue = 0.5 * wheel\r\n    else if (wheel < 180) newHue = wheel + 300\r\n    else if (wheel < 240) newHue = 2 * wheel + 120\r\n    else newHue = wheel\r\n\r\n    return newHue % 360\r\n  }\r\n}\r\n\r\nexport enum PaletteScheme {\r\n  RAINBOW,\r\n  SURPRISE_ME,\r\n  MONOCHROMATIC,\r\n  ANALOGOUS,\r\n  COMPLEMENTARY,\r\n  SPLIT,\r\n  TRIADIC,\r\n  COMPOUND,\r\n}\r\n",
      "properties": [],
      "methods": [
        {
          "name": "changeHueOnWheel",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "change",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 285,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "change",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateAnalogousPalette",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateComplementaryPalette",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 103,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateCompoundPalette",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 214,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateMonochromaticPalette",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generatePalette",
          "args": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "scheme",
              "type": "PaletteScheme",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Palette",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "scheme",
              "type": "PaletteScheme",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateRainbowPalette",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 248,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateSplitPalette",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateTriadicPalette",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 169,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124],
          "jsdoctags": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRandomScheme",
          "args": [],
          "optional": false,
          "returnType": "PaletteScheme",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 124]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "PaletteServiceMock",
      "id": "class-PaletteServiceMock-76f003a7c5a65157415b9eb7ad4e7b8592a63fcc416cc39957f836ca9c6fd7120fe2db604560ee903fb55fae88296724264e8d25e5eb70caae5ba8f67c2d03dd",
      "file": "src/app/mocks/palette.service.mock.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { PaletteGenerator, PaletteScheme } from '../class/palette-generator'\r\nimport { Palette } from '../models/palette.model'\r\nimport { EventEmitter } from '@angular/core'\r\nimport { PaletteService } from '../services/palette.service'\r\n\r\nexport class PaletteServiceMock implements Partial<PaletteService> {\r\n  hex?: string\r\n  scheme: PaletteScheme = PaletteScheme.RAINBOW\r\n  private palette?: Palette\r\n  private paletteChangeEmitter: EventEmitter<Palette | undefined> =\r\n    new EventEmitter()\r\n\r\n  generatePalette(hex: string, scheme: PaletteScheme): void {\r\n    console.log(`PaletteServiceMock.generatePalette(${hex}, ${scheme})`)\r\n    this.hex = hex\r\n    this.scheme = Object.values(PaletteScheme).indexOf(scheme) % 8\r\n    this.palette = PaletteGenerator.generatePalette(hex, scheme)\r\n    this.paletteChangeEmitter.emit(this.palette)\r\n  }\r\n\r\n  loadPalette(palette: Palette): void {\r\n    console.log(`PaletteServiceMock.loadPalette(${palette})`)\r\n    this.hex = palette.colors[0].getShade(500).hex\r\n    this.palette = palette\r\n    this.paletteChangeEmitter.emit(palette)\r\n  }\r\n\r\n  clearPalette(): void {\r\n    console.log('PaletteServiceMock.clearPalette()')\r\n    this.palette = undefined\r\n    this.paletteChangeEmitter.emit(undefined)\r\n  }\r\n\r\n  getPalette(): Palette | undefined {\r\n    console.log('PaletteServiceMock.getPalette()')\r\n    return this.palette\r\n  }\r\n\r\n  hasPalette(): boolean {\r\n    console.log('PaletteServiceMock.hasPalette()')\r\n    return !!this.palette\r\n  }\r\n\r\n  getPaletteChangeEmitter(): EventEmitter<Palette | undefined> {\r\n    console.log('PaletteServiceMock.getPaletteChangeEmitter()')\r\n    return this.paletteChangeEmitter\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "hex",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "palette",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Palette",
          "optional": true,
          "description": "",
          "line": 9,
          "modifierKind": [121]
        },
        {
          "name": "paletteChangeEmitter",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EventEmitter<Palette | undefined>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        },
        {
          "name": "scheme",
          "defaultValue": "PaletteScheme.RAINBOW",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "PaletteScheme",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "methods": [
        {
          "name": "clearPalette",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "generatePalette",
          "args": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "scheme",
              "type": "PaletteScheme",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "scheme",
              "type": "PaletteScheme",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPalette",
          "args": [],
          "optional": false,
          "returnType": "Palette | undefined",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getPaletteChangeEmitter",
          "args": [],
          "optional": false,
          "returnType": "EventEmitter<Palette | undefined>",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "hasPalette",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "loadPalette",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["Partial"]
    },
    {
      "name": "ScssCopyDialog",
      "id": "class-ScssCopyDialog-6c7d2232849edc916210d220a2d114d780d39de1cfe06104c8f1a66220d556cd25f35ad5363d2554c770bd24ce212174f6a15d2a5cd920dd02053a3017d138fc",
      "file": "src/app/dialogs/scss/scss-copy.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { toUnicodeVariant } from '../../utils/to-unicode-variant.util'\r\n\r\nexport class ScssCopyDialog {\r\n  constructor(private notification: EventEmitter<Dialog | undefined>) {}\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://sass-lang.com/documentation/variables', '_blank')\r\n    })\r\n\r\n    return {\r\n      id: 'export-scss-copy',\r\n      interpolateParams: {\r\n        usage: toUnicodeVariant('color: $color-500;', 'm'),\r\n      },\r\n      actions: [\r\n        {\r\n          id: 'more',\r\n          action: docEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ScssDialog",
      "id": "class-ScssDialog-1d4075c7abcd7b657724ee1bf1de0e46a73a41244c62e7ff87ffc703e9f146f8b71f34e8bd2c45ea32f5bae61e7c1fc16d6ffda895e356c93f549fb683c583fe",
      "file": "src/app/dialogs/scss/scss.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { PaletteExporter } from '../../class/palette-exporter'\r\nimport { Palette } from '../../models/palette.model'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { ScssCopyDialog } from './scss-copy.dialog'\r\nimport { ScssFileDialog } from './scss-file.dialog'\r\n\r\nexport class ScssDialog {\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) {}\r\n\r\n  getNotification(): Dialog {\r\n    const scssCopyEmitter = new EventEmitter()\r\n    scssCopyEmitter.subscribe(() => {\r\n      const scss = PaletteExporter.exportPaletteToSCSS(this.palette)\r\n      navigator.clipboard\r\n        .writeText(scss)\r\n        .then(() => {\r\n          this.notification.emit(\r\n            new ScssCopyDialog(this.notification).getNotification()\r\n          )\r\n        })\r\n        .catch((e) => {\r\n          this.notification.emit({\r\n            id: 'copy-error',\r\n            interpolateParams: {\r\n              error: e,\r\n            },\r\n          })\r\n        })\r\n    })\r\n\r\n    const scssFileEmitter = new EventEmitter()\r\n    scssFileEmitter.subscribe(() => {\r\n      const scss = PaletteExporter.exportSCSSFile(this.palette)\r\n      const blob = new Blob([scss], { type: 'text/scss' })\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = '_colors.scss'\r\n      a.click()\r\n\r\n      this.notification.emit(\r\n        new ScssFileDialog(this.notification).getNotification()\r\n      )\r\n    })\r\n\r\n    return {\r\n      id: 'export-scss',\r\n      actions: [\r\n        {\r\n          id: 'copy',\r\n          action: scssCopyEmitter,\r\n        },\r\n        {\r\n          id: 'file',\r\n          action: scssFileEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "palette",
            "type": "Palette",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "palette",
            "type": "Palette",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ScssFileDialog",
      "id": "class-ScssFileDialog-dc5883a06b2965163bcd260ca195aaed8a804af88deec375dc14186b179b7c757289d0a04feaecd78d4a9397938b1e2ee4a2f398e2fe15b834209cefa96ec3e2",
      "file": "src/app/dialogs/scss/scss-file.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { toUnicodeVariant } from '../../utils/to-unicode-variant.util'\r\n\r\nexport class ScssFileDialog {\r\n  constructor(private notification: EventEmitter<Dialog | undefined>) {}\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://sass-lang.com/documentation/at-rules/use', '_blank')\r\n    })\r\n\r\n    return {\r\n      id: 'export-scss-file',\r\n      interpolateParams: {\r\n        file: toUnicodeVariant('_colors.scss', 'm'),\r\n        link: toUnicodeVariant(\"@use 'colors'\", 'm'),\r\n        usage: toUnicodeVariant('color: $color-500;', 'm'),\r\n      },\r\n      actions: [\r\n        {\r\n          id: 'more',\r\n          action: docEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Shade",
      "id": "class-Shade-c1047f83ccd7f3204cb6dc4f930faa3ae8f69fa65f559407c64f528116df9564bf736e657d52dd25fc821e98bc5a0e76a15813e52356858b212380e11cb2f890",
      "file": "src/app/models/shade.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { ColorConverter } from '../class/color-converter'\r\n\r\nexport class Shade {\r\n  index: number\r\n  hex: string\r\n  hue: number\r\n  saturation: number\r\n  luminosity: number\r\n  brightness = 0\r\n  fixed: boolean\r\n\r\n  public constructor(index: number, fixed: boolean, hex: string)\r\n  public constructor(\r\n    index: number,\r\n    fixed: boolean,\r\n    hue: number,\r\n    saturation: number,\r\n    luminosity: number\r\n  )\r\n  public constructor(\r\n    index: number,\r\n    fixed: boolean,\r\n    hex: string,\r\n    hue: number,\r\n    saturation: number,\r\n    luminosity: number\r\n  )\r\n\r\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\n  constructor(...args: any[]) {\r\n    this.index = args[0]\r\n    this.fixed = args[1]\r\n\r\n    if (args.length === 3) {\r\n      if (!args[2].match(/^#[0-9A-Fa-f]{6}$/))\r\n        throw `Color ${args[2]} is not in form #RRGGBB.`\r\n\r\n      this.hex = args[2].toUpperCase()\r\n      const hsl = ColorConverter.HEXtoHSL(this.hex)\r\n      this.hue = hsl.hue\r\n      this.saturation = hsl.saturation\r\n      this.luminosity = hsl.luminosity\r\n      this.updateBrightness()\r\n    } else if (args.length === 5) {\r\n      this.hue = args[2]\r\n      this.saturation = args[3]\r\n      this.luminosity = args[4]\r\n      this.hex = ColorConverter.HSLtoHEX(\r\n        this.hue,\r\n        this.saturation,\r\n        this.luminosity\r\n      )\r\n      this.updateBrightness()\r\n    } else {\r\n      if (!args[2].match(/^#[0-9A-Fa-f]{6}$/))\r\n        throw `Color ${args[2]} is not in form #RRGGBB.`\r\n\r\n      this.hex = args[2].toUpperCase()\r\n      this.hue = args[3]\r\n      this.saturation = args[4]\r\n      this.luminosity = args[5]\r\n      this.updateBrightness()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the shades index\r\n   * @param index\r\n   */\r\n  public setIndex(index: number) {\r\n    this.index = index\r\n  }\r\n\r\n  /**\r\n   * Set the shades HEX value and update all other properties\r\n   * @param hex\r\n   * @param fixed\r\n   */\r\n  public setHEX(hex: string, fixed = false) {\r\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\r\n      throw `Color ${hex} is not in form #RRGGBB.`\r\n\r\n    this.fixed = fixed\r\n    this.hex = hex.toUpperCase()\r\n    const hsl = ColorConverter.HEXtoHSL(this.hex)\r\n    this.hue = hsl.hue\r\n    this.saturation = hsl.saturation\r\n    this.luminosity = hsl.luminosity\r\n    this.updateBrightness()\r\n  }\r\n\r\n  /**\r\n   * Set the shades HSL values and update all other properties\r\n   * @param hue\r\n   * @param saturation\r\n   * @param luminosity\r\n   * @param fixed\r\n   */\r\n  public setHSL(\r\n    hue: number,\r\n    saturation: number,\r\n    luminosity: number,\r\n    fixed = false\r\n  ) {\r\n    this.fixed = fixed\r\n    this.hue = hue\r\n    this.saturation = saturation\r\n    this.luminosity = luminosity\r\n    this.hex = ColorConverter.HSLtoHEX(\r\n      this.hue,\r\n      this.saturation,\r\n      this.luminosity\r\n    )\r\n    this.updateBrightness()\r\n  }\r\n\r\n  /**\r\n   * Update perceived brightness\r\n   * @private\r\n   */\r\n  private updateBrightness() {\r\n    const rgb = ColorConverter.HEXtoRGB(this.hex)\r\n    this.brightness = Math.round(\r\n      Math.sqrt(\r\n        0.299 * rgb.red * rgb.red +\r\n          0.587 * rgb.green * rgb.green +\r\n          0.114 * rgb.blue * rgb.blue\r\n      ) / 2.55\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Generate a random shade.\r\n   */\r\n  public static generateRandomShade(): Shade {\r\n    return new Shade(\r\n      0,\r\n      true,\r\n      Math.floor(Math.random() * 360),\r\n      30 + Math.floor(Math.random() * 60),\r\n      25 + Math.floor(Math.random() * 50)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a shade.\r\n   * Throws exception if json object is no valid shade object.\r\n   * @param json\r\n   */\r\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\n  public static parseShade(json: any): Shade {\r\n    if (\r\n      (!json.index && json.index !== 0) ||\r\n      !json.hex ||\r\n      (!json.hue && json.hue !== 0) ||\r\n      (!json.saturation && json.saturation !== 0) ||\r\n      (!json.luminosity && json.luminosity !== 0)\r\n    )\r\n      throw 'Not all parameters for shade are set'\r\n\r\n    return new Shade(\r\n      json.index,\r\n      json.fixed,\r\n      json.hex.toUpperCase(),\r\n      json.hue,\r\n      json.saturation,\r\n      json.luminosity\r\n    )\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "args",
            "type": "any[]",
            "deprecated": false,
            "deprecationMessage": "",
            "dotDotDotToken": true
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "args",
            "type": "any[]",
            "deprecated": false,
            "deprecationMessage": "",
            "dotDotDotToken": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "brightness",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "fixed",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "hex",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "hue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "index",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "luminosity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "saturation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "methods": [
        {
          "name": "generateRandomShade",
          "args": [],
          "optional": false,
          "returnType": "Shade",
          "typeParameters": [],
          "line": 135,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nGenerate a random shade.\n",
          "description": "<p>Generate a random shade.</p>\n",
          "modifierKind": [124]
        },
        {
          "name": "parseShade",
          "args": [
            {
              "name": "json",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Shade",
          "typeParameters": [],
          "line": 151,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nParse the json object to a shade.\nThrows exception if json object is no valid shade object.\n",
          "description": "<p>Parse the json object to a shade.\nThrows exception if json object is no valid shade object.</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 3586,
                "end": 3590,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "json"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3580,
                "end": 3585,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "setHEX",
          "args": [
            {
              "name": "hex",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fixed",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSet the shades HEX value and update all other properties\n",
          "description": "<p>Set the shades HEX value and update all other properties</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 1882,
                "end": 1885,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "hex"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1876,
                "end": 1881,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 1899,
                "end": 1904,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "fixed"
              },
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "pos": 1893,
                "end": 1898,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "setHSL",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saturation",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "luminosity",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fixed",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSet the shades HSL values and update all other properties\n",
          "description": "<p>Set the shades HSL values and update all other properties</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 2384,
                "end": 2387,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "hue"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2378,
                "end": 2383,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 2401,
                "end": 2411,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "saturation"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2395,
                "end": 2400,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 2425,
                "end": 2435,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "luminosity"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2419,
                "end": 2424,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 2449,
                "end": 2454,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "fixed"
              },
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "pos": 2443,
                "end": 2448,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "setIndex",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSet the shades index\n",
          "description": "<p>Set the shades index</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 1719,
                "end": 1724,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "index"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1713,
                "end": 1718,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "updateBrightness",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate perceived brightness\n",
          "description": "<p>Update perceived brightness</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 2882,
                "end": 2889,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 121,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "StorageServiceMock",
      "id": "class-StorageServiceMock-d50aa83acad4e279c5e1d2becb09848d9818d6ea6e60fd25f0207b32295518616181d7f337132d87aee478107e4e1faa4a3c9796d3914933606feea4893d5f54",
      "file": "src/app/mocks/storage.service.mock.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { Palette } from '../models/palette.model'\r\nimport { Color } from '../models/color.model'\r\nimport { StorageService } from '../services/storage.service'\r\n\r\nexport class StorageServiceMock implements Partial<StorageService> {\r\n  dark = false\r\n  language = 'en'\r\n\r\n  darkEmitter = new EventEmitter<boolean>()\r\n  languageEmitter = new EventEmitter<string>()\r\n\r\n  loadTheme(): boolean {\r\n    console.log('StorageServiceMock.loadTheme()')\r\n    this.dark = false\r\n    this.darkEmitter.emit(false)\r\n    return false\r\n  }\r\n\r\n  toggleTheme(dark: boolean | undefined): boolean {\r\n    console.log(`StorageServiceMock.toggleTheme(${dark})`)\r\n    this.dark = dark ?? true\r\n    this.darkEmitter.emit(dark ?? true)\r\n    return dark ?? true\r\n  }\r\n\r\n  loadLanguage(): void {\r\n    console.log('StorageServiceMock.loadLanguage()')\r\n    this.language = 'en'\r\n    this.languageEmitter.emit('en')\r\n  }\r\n\r\n  applyLanguage(language: string): void {\r\n    console.log(`StorageServiceMock.applyLanguage(${language})`)\r\n    this.language = language\r\n    this.languageEmitter.emit(language)\r\n  }\r\n\r\n  loadPalette(): Palette | undefined {\r\n    console.log('StorageServiceMock.loadPalette()')\r\n    const palette = new Palette('loadedPalette')\r\n    palette.addColor(new Color('pawcode Blue', '#4472c4'))\r\n    return palette\r\n  }\r\n\r\n  savePalette(palette: Palette): void {\r\n    console.log(`StorageServiceMock.savePalette(${palette.title})`)\r\n  }\r\n\r\n  rememberTracking(enabled: boolean): void {\r\n    console.log(`StorageServiceMock.rememberTracking(${enabled})`)\r\n  }\r\n\r\n  hasTrackingAllowed(): number {\r\n    console.log('StorageServiceMock.hasTrackingAllowed()')\r\n    return 2\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "dark",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "darkEmitter",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "language",
          "defaultValue": "'en'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "languageEmitter",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methods": [
        {
          "name": "applyLanguage",
          "args": [
            {
              "name": "language",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "language",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "hasTrackingAllowed",
          "args": [],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "loadLanguage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "loadPalette",
          "args": [],
          "optional": false,
          "returnType": "Palette | undefined",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "loadTheme",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "rememberTracking",
          "args": [
            {
              "name": "enabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "enabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "savePalette",
          "args": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "palette",
              "type": "Palette",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleTheme",
          "args": [
            {
              "name": "dark",
              "type": "boolean | undefined",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "dark",
              "type": "boolean | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["Partial"]
    },
    {
      "name": "TailwindCopyDialog",
      "id": "class-TailwindCopyDialog-27d7588f6c7bf2d091d50d0eba4ccd4ecb2b0c5220278afa14e25c053499d4b26700f13960b2a5a1d132ea22ccfd05125c69f4bc7f1a98883ea770c328e8ac38",
      "file": "src/app/dialogs/tailwind/tailwind-copy.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { toUnicodeVariant } from '../../utils/to-unicode-variant.util'\r\n\r\nexport class TailwindCopyDialog {\r\n  constructor(private notification: EventEmitter<Dialog | undefined>) {}\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open(\r\n        'https://tailwindcss.com/docs/customizing-colors#color-object-syntax',\r\n        '_blank'\r\n      )\r\n    })\r\n\r\n    return {\r\n      id: 'export-tailwind-copy',\r\n      interpolateParams: {\r\n        config: toUnicodeVariant('tailwind.config.js', 'm'),\r\n      },\r\n      actions: [\r\n        {\r\n          id: 'more',\r\n          action: docEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TailwindDialog",
      "id": "class-TailwindDialog-6ee41278910c22149969c7be7adb9124a506afa322f0e0d34cdd01fb5cb828a0719a7450d3152fb4ec0bd947fa1ea3c15046c8720216ea204627e609335ce75d",
      "file": "src/app/dialogs/tailwind/tailwind.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { PaletteExporter } from '../../class/palette-exporter'\r\nimport { Palette } from '../../models/palette.model'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { TailwindCopyDialog } from './tailwind-copy.dialog'\r\nimport { TailwindFileDialog } from './tailwind-file.dialog'\r\nimport { toUnicodeVariant } from '../../utils/to-unicode-variant.util'\r\n\r\nexport class TailwindDialog {\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) {}\r\n\r\n  getNotification(): Dialog {\r\n    const tailwindCopyEmitter = new EventEmitter()\r\n    tailwindCopyEmitter.subscribe(() => {\r\n      const tailwind = PaletteExporter.exportPaletteToTailwind(this.palette)\r\n      navigator.clipboard\r\n        .writeText(tailwind)\r\n        .then(() => {\r\n          this.notification.emit(\r\n            new TailwindCopyDialog(this.notification).getNotification()\r\n          )\r\n        })\r\n        .catch((e) => {\r\n          this.notification.emit({\r\n            id: 'copy-error',\r\n            interpolateParams: {\r\n              error: e,\r\n            },\r\n          })\r\n        })\r\n    })\r\n\r\n    const tailwindFileEmitter = new EventEmitter()\r\n    tailwindFileEmitter.subscribe(() => {\r\n      const tailwind = PaletteExporter.exportTailwindFile(this.palette)\r\n      const blob = new Blob([tailwind], { type: 'text/javascript' })\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = 'tailwind.colors.js'\r\n      a.click()\r\n\r\n      this.notification.emit(\r\n        new TailwindFileDialog(this.notification).getNotification()\r\n      )\r\n    })\r\n\r\n    return {\r\n      id: 'export-tailwind',\r\n      interpolateParams: {\r\n        file: toUnicodeVariant('tailwind.colors.js', 'm'),\r\n      },\r\n      actions: [\r\n        {\r\n          id: 'copy',\r\n          action: tailwindCopyEmitter,\r\n        },\r\n        {\r\n          id: 'file',\r\n          action: tailwindFileEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "palette",
            "type": "Palette",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "palette",
            "type": "Palette",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TailwindFileDialog",
      "id": "class-TailwindFileDialog-8c4191fe59401e8329ee6a655dc790bec8139935cb2eaf0acd23b009cb1c484a50f5aeba0581ede17794c58ac14208298ed54d41e180f725937b5e37bac3d861",
      "file": "src/app/dialogs/tailwind/tailwind-file.dialog.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { EventEmitter } from '@angular/core'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { toUnicodeVariant } from '../../utils/to-unicode-variant.util'\r\n\r\nexport class TailwindFileDialog {\r\n  constructor(private notification: EventEmitter<Dialog | undefined>) {}\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open(\r\n        'https://tailwindcss.com/docs/customizing-colors#using-the-default-colors',\r\n        '_blank'\r\n      )\r\n    })\r\n\r\n    return {\r\n      id: 'export-tailwind-file',\r\n      interpolateParams: {\r\n        file: toUnicodeVariant('tailwind.colors.js', 'm'),\r\n        config: toUnicodeVariant('tailwind.config.js', 'm'),\r\n        import: toUnicodeVariant(\"colors: require('./tailwind.colors'),\", 'm'),\r\n      },\r\n      actions: [\r\n        {\r\n          id: 'more',\r\n          action: docEmitter,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "notification",
            "type": "EventEmitter<Dialog | undefined>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [
        {
          "name": "getNotification",
          "args": [],
          "optional": false,
          "returnType": "Dialog",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [],
  "components": [
    {
      "name": "AnalyticsComponent",
      "id": "component-AnalyticsComponent-7257de47d96d7dc7cdbac3a52f2a27ebfbf55751e1dcd10ecdf6a11210943e580a253cddc73b9a07dcdca9490038c390af941c5cbd04e17e8abd59de191bf600",
      "file": "src/app/pages/analytics/analytics.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-analytics",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./analytics.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "getMatomoLink",
          "defaultValue": "getMatomoLink(this.translate)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "trackingAllowed",
          "defaultValue": "2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15
        }
      ],
      "methodsClass": [
        {
          "name": "allowTracking",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAllow tracking and remember the consent for 90 days\n",
          "description": "<p>Allow tracking and remember the consent for 90 days</p>\n"
        },
        {
          "name": "disableTracking",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nDisable tracking and remember the choice for 90 days\n",
          "description": "<p>Disable tracking and remember the choice for 90 days</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core'\r\nimport { StorageService } from '../../services/storage.service'\r\nimport { MatomoTracker } from '@ngx-matomo/tracker'\r\nimport { NotificationService } from '../../services/notification.service'\r\nimport { getMatomoLink } from '../../utils/links.util'\r\nimport { TranslateService } from '@ngx-translate/core'\r\n\r\n@Component({\r\n  selector: 'app-analytics',\r\n  templateUrl: './analytics.component.html',\r\n})\r\nexport class AnalyticsComponent {\r\n  getMatomoLink = getMatomoLink(this.translate)\r\n\r\n  trackingAllowed = 2\r\n\r\n  constructor(\r\n    private readonly storage: StorageService,\r\n    private readonly notificationService: NotificationService,\r\n    private readonly translate: TranslateService,\r\n    private readonly tracker: MatomoTracker\r\n  ) {\r\n    this.trackingAllowed = this.storage.hasTrackingAllowed()\r\n  }\r\n\r\n  /**\r\n   * Allow tracking and remember the consent for 90 days\r\n   */\r\n  allowTracking() {\r\n    this.storage.rememberTracking(true)\r\n    this.tracker.setConsentGiven()\r\n    this.notificationService.notification.emit('tracking-allowed')\r\n    this.trackingAllowed = 1\r\n  }\r\n\r\n  /**\r\n   * Disable tracking and remember the choice for 90 days\r\n   */\r\n  disableTracking() {\r\n    this.storage.rememberTracking(false)\r\n    this.tracker.forgetConsentGiven()\r\n    this.trackingAllowed = 0\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div>\r\n  <article class=\"mx-auto max-w-lg px-4 text-justify\">\r\n    <h2 id=\"statistics\">{{ 'analytics.statistics.title' | translate }}</h2>\r\n\r\n    <p class=\"dark:text-gray-300 mb-2\">\r\n      {{ 'analytics.statistics.description' | translate }}\r\n    </p>\r\n\r\n    <section *ngIf=\"trackingAllowed === 0\">\r\n      <p class=\"dark:text-gray-300\">\r\n        {{ 'analytics.support.enable.text' | translate }}\r\n      </p>\r\n\r\n      <div class=\"flex items-center justify-center mt-4\">\r\n        <button\r\n          (click)=\"allowTracking()\"\r\n          class=\"py-2 px-4 bg-primary-700 font-medium text-primary-100 rounded cursor-pointer transition-colors duration-500 hover:bg-primary-800 hover:text-primary-200 dark:hover:bg-primary-600 dark:hover:text-primary-50\"\r\n          type=\"submit\"\r\n          [title]=\"'analytics.support.enable.title' | translate\">\r\n          {{ 'analytics.support.enable.button' | translate }}\r\n        </button>\r\n      </div>\r\n    </section>\r\n  </article>\r\n\r\n  <article\r\n    class=\"mx-auto max-w-3xl px-4 text-justify mt-20 pt-10 border-t border-t-gray-300 dark:border-t-gray-600\">\r\n    <h2>\r\n      {{ 'analytics.analytics.title' | translate }}\r\n    </h2>\r\n\r\n    <div>\r\n      <h3>\r\n        {{ 'analytics.analytics.info.title' | translate }}\r\n      </h3>\r\n\r\n      <p\r\n        class=\"dark:text-gray-300 mb-2\"\r\n        [innerHtml]=\"\r\n          'analytics.analytics.info.description'\r\n            | translate\r\n              : {\r\n                  matomo: getMatomoLink()\r\n                }\r\n        \"></p>\r\n    </div>\r\n\r\n    <div>\r\n      <h3 class=\"pb-0\">\r\n        {{ 'analytics.tracking.title' | translate }}\r\n      </h3>\r\n\r\n      <section\r\n        class=\"grid sm:grid-cols-[12rem_1fr] gap-y-2 gap-x-1 items-baseline\">\r\n        <ng-container\r\n          *ngFor=\"\r\n            let feature of [\r\n              'language',\r\n              'theme',\r\n              'pwa',\r\n              'export',\r\n              'scheme',\r\n              'save'\r\n            ]\r\n          \">\r\n          <h4 class=\"pb-0 -mb-1\">\r\n            {{ 'analytics.tracking.feature.' + feature + '.label' | translate }}\r\n          </h4>\r\n          <p class=\"dark:text-gray-300\">\r\n            {{\r\n              'analytics.tracking.feature.' + feature + '.reason' | translate\r\n            }}\r\n          </p>\r\n        </ng-container>\r\n      </section>\r\n    </div>\r\n\r\n    <div>\r\n      <h3>\r\n        {{ 'analytics.tracking.other.title' | translate }}\r\n      </h3>\r\n\r\n      <ul class=\"list-disc list-inside dark:text-gray-300\">\r\n        <ng-container\r\n          *ngFor=\"\r\n            let data of ['ip', 'country', 'device', 'os', 'browser', 'duration']\r\n          \">\r\n          <li>\r\n            {{ 'analytics.tracking.other.data.' + data | translate }}\r\n          </li>\r\n        </ng-container>\r\n      </ul>\r\n    </div>\r\n  </article>\r\n\r\n  <article class=\"mx-auto max-w-lg p-4 text-justify\">\r\n    <section *ngIf=\"trackingAllowed === 1\">\r\n      <p class=\"dark:text-gray-300\">\r\n        {{ 'analytics.support.disable.text' | translate }}\r\n      </p>\r\n\r\n      <div class=\"flex items-center justify-center mt-4\">\r\n        <button\r\n          (click)=\"disableTracking()\"\r\n          class=\"py-2 px-4 bg-gray-300 font-medium text-gray-800 rounded cursor-pointer transition-colors duration-500 hover:bg-gray-400 hover:text-gray-900\"\r\n          type=\"reset\"\r\n          [title]=\"'analytics.support.disable.title' | translate\">\r\n          {{ 'analytics.support.disable.button' | translate }}\r\n        </button>\r\n      </div>\r\n    </section>\r\n\r\n    <section *ngIf=\"trackingAllowed === 0\">\r\n      <p class=\"dark:text-gray-300\">\r\n        {{ 'analytics.support.enable.text' | translate }}\r\n      </p>\r\n\r\n      <div class=\"flex items-center justify-center mt-4\">\r\n        <button\r\n          (click)=\"allowTracking()\"\r\n          class=\"py-2 px-4 bg-primary-700 font-medium text-primary-100 rounded cursor-pointer transition-colors duration-500 hover:bg-primary-800 hover:text-primary-200 dark:hover:bg-primary-600 dark:hover:text-primary-50\"\r\n          type=\"submit\"\r\n          [title]=\"'analytics.support.enable.title' | translate\">\r\n          {{ 'analytics.support.enable.button' | translate }}\r\n        </button>\r\n      </div>\r\n    </section>\r\n  </article>\r\n</div>\r\n"
    },
    {
      "name": "AppComponent",
      "id": "component-AppComponent-7407493eb3be9c79d0b4e9e0837ec870403f1ce447f43a005ffe2878ac3a0522c35fd70858aa82a416ae9199382c9e523dc1b9d9f4139efc46d83408b349be8c",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dark",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "getMatomoLink",
          "defaultValue": "getMatomoLink(this.translate)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "navigation",
          "defaultValue": "[\r\n    {\r\n      link: '/',\r\n      id: 'home',\r\n      icon:\r\n        '<path d=\"M2.25 4.125c0-1.036.84-1.875 1.875-1.875h5.25c1.036 0 1.875.84 1.875 1.875V17.25a4.5 4.5 0 11-9 0V4.125zm4.5 14.25a1.125 1.125 0 100-2.25 1.125 1.125 0 000 2.25z\" />' +\r\n        '<path d=\"M10.719 21.75h9.156c1.036 0 1.875-.84 1.875-1.875v-5.25c0-1.036-.84-1.875-1.875-1.875h-.14l-8.742 8.743c-.09.089-.18.175-.274.257zM12.738 17.625l6.474-6.474a1.875 1.875 0 000-2.651L15.5 4.787a1.875 1.875 0 00-2.651 0l-.1.099V17.25c0 .126-.003.251-.01.375z\" />',\r\n    },\r\n    {\r\n      link: '/edit',\r\n      id: 'edit',\r\n      icon: '<path d=\"M18.75 12.75h1.5a.75.75 0 000-1.5h-1.5a.75.75 0 000 1.5zM12 6a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 0112 6zM12 18a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 0112 18zM3.75 6.75h1.5a.75.75 0 100-1.5h-1.5a.75.75 0 000 1.5zM5.25 18.75h-1.5a.75.75 0 010-1.5h1.5a.75.75 0 010 1.5zM3 12a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 013 12zM9 3.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5zM12.75 12a2.25 2.25 0 114.5 0 2.25 2.25 0 01-4.5 0zM9 15.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5z\" />',\r\n    },\r\n    {\r\n      link: '/preview',\r\n      id: 'preview',\r\n      icon: '<path fill-rule=\"evenodd\" d=\"M1.5 7.125c0-1.036.84-1.875 1.875-1.875h6c1.036 0 1.875.84 1.875 1.875v3.75c0 1.036-.84 1.875-1.875 1.875h-6A1.875 1.875 0 011.5 10.875v-3.75zm12 1.5c0-1.036.84-1.875 1.875-1.875h5.25c1.035 0 1.875.84 1.875 1.875v8.25c0 1.035-.84 1.875-1.875 1.875h-5.25a1.875 1.875 0 01-1.875-1.875v-8.25zM3 16.125c0-1.036.84-1.875 1.875-1.875h5.25c1.036 0 1.875.84 1.875 1.875v2.25c0 1.035-.84 1.875-1.875 1.875h-5.25A1.875 1.875 0 013 18.375v-2.25z\" clip-rule=\"evenodd\" />',\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "paletteService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "PaletteService",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [123]
        },
        {
          "name": "router",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Router",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [123]
        },
        {
          "name": "showTrackingNotice",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "title",
          "defaultValue": "'Rainbow Palette | Get your own color palette from just a single color'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "version",
          "defaultValue": "environment.version",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21
        }
      ],
      "methodsClass": [
        {
          "name": "allowTracking",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAllow tracking and remember the consent for 90 days\n",
          "description": "<p>Allow tracking and remember the consent for 90 days</p>\n"
        },
        {
          "name": "disableTracking",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nDisable tracking and remember the choice for 90 days\n",
          "description": "<p>Disable tracking and remember the choice for 90 days</p>\n"
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, OnInit } from '@angular/core'\r\nimport { environment } from '../environments/environment'\r\nimport { StorageService } from './services/storage.service'\r\nimport { PaletteService } from './services/palette.service'\r\nimport { Router } from '@angular/router'\r\nimport { ColorNamer } from './class/color-namer'\r\nimport { TranslateService } from '@ngx-translate/core'\r\nimport { Title } from '@angular/platform-browser'\r\nimport { MatomoTracker } from '@ngx-matomo/tracker'\r\nimport { NotificationService } from './services/notification.service'\r\nimport { getMatomoLink } from './utils/links.util'\r\nimport { SwUpdate } from '@angular/service-worker'\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title =\r\n    'Rainbow Palette | Get your own color palette from just a single color'\r\n  version = environment.version\r\n  dark = false\r\n  showTrackingNotice = false\r\n\r\n  getMatomoLink = getMatomoLink(this.translate)\r\n\r\n  navigation = [\r\n    {\r\n      link: '/',\r\n      id: 'home',\r\n      icon:\r\n        '<path d=\"M2.25 4.125c0-1.036.84-1.875 1.875-1.875h5.25c1.036 0 1.875.84 1.875 1.875V17.25a4.5 4.5 0 11-9 0V4.125zm4.5 14.25a1.125 1.125 0 100-2.25 1.125 1.125 0 000 2.25z\" />' +\r\n        '<path d=\"M10.719 21.75h9.156c1.036 0 1.875-.84 1.875-1.875v-5.25c0-1.036-.84-1.875-1.875-1.875h-.14l-8.742 8.743c-.09.089-.18.175-.274.257zM12.738 17.625l6.474-6.474a1.875 1.875 0 000-2.651L15.5 4.787a1.875 1.875 0 00-2.651 0l-.1.099V17.25c0 .126-.003.251-.01.375z\" />',\r\n    },\r\n    {\r\n      link: '/edit',\r\n      id: 'edit',\r\n      icon: '<path d=\"M18.75 12.75h1.5a.75.75 0 000-1.5h-1.5a.75.75 0 000 1.5zM12 6a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 0112 6zM12 18a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 0112 18zM3.75 6.75h1.5a.75.75 0 100-1.5h-1.5a.75.75 0 000 1.5zM5.25 18.75h-1.5a.75.75 0 010-1.5h1.5a.75.75 0 010 1.5zM3 12a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 013 12zM9 3.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5zM12.75 12a2.25 2.25 0 114.5 0 2.25 2.25 0 01-4.5 0zM9 15.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5z\" />',\r\n    },\r\n    {\r\n      link: '/preview',\r\n      id: 'preview',\r\n      icon: '<path fill-rule=\"evenodd\" d=\"M1.5 7.125c0-1.036.84-1.875 1.875-1.875h6c1.036 0 1.875.84 1.875 1.875v3.75c0 1.036-.84 1.875-1.875 1.875h-6A1.875 1.875 0 011.5 10.875v-3.75zm12 1.5c0-1.036.84-1.875 1.875-1.875h5.25c1.035 0 1.875.84 1.875 1.875v8.25c0 1.035-.84 1.875-1.875 1.875h-5.25a1.875 1.875 0 01-1.875-1.875v-8.25zM3 16.125c0-1.036.84-1.875 1.875-1.875h5.25c1.036 0 1.875.84 1.875 1.875v2.25c0 1.035-.84 1.875-1.875 1.875h-5.25A1.875 1.875 0 013 18.375v-2.25z\" clip-rule=\"evenodd\" />',\r\n    },\r\n  ]\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    public paletteService: PaletteService,\r\n    public router: Router,\r\n    private translate: TranslateService,\r\n    private titleService: Title,\r\n    private notificationService: NotificationService,\r\n    private tracker: MatomoTracker,\r\n    private updates: SwUpdate\r\n  ) {\r\n    // Load theme from local storage and subscribe to changes\r\n    this.dark = storage.loadTheme()\r\n    this.storage.darkEmitter.subscribe((d) => (this.dark = d.valueOf()))\r\n\r\n    // Load color name dictionary\r\n    ColorNamer.loadDictionary()\r\n\r\n    // Setup translation pipe\r\n    this.translate.setDefaultLang('en')\r\n    this.storage.languageEmitter.subscribe(() => {\r\n      this.title = `Rainbow Palette | ${this.translate.instant('app.title')}`\r\n      this.titleService.setTitle(this.title)\r\n    })\r\n    this.storage.loadLanguage()\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Setup tracking\r\n    switch (this.storage.hasTrackingAllowed()) {\r\n      case 1:\r\n        // Tracking is allowed\r\n        this.tracker.setConsentGiven()\r\n        break\r\n      case 2:\r\n        // No preference given yet\r\n        this.showTrackingNotice = true\r\n        break\r\n      default:\r\n        // Tracking is disallowed\r\n        break\r\n    }\r\n\r\n    // Setup Service Worker update\r\n    this.updates.versionUpdates.subscribe((event) => {\r\n      if (event.type === 'VERSION_READY') {\r\n        const closeEvent = new EventEmitter()\r\n        closeEvent.subscribe(() => {\r\n          this.notificationService.dialog.emit(undefined)\r\n        })\r\n\r\n        const updateEvent = new EventEmitter()\r\n        updateEvent.subscribe(() => {\r\n          // Save current palette before reload\r\n          const palette = this.paletteService.getPalette()\r\n          if (palette) {\r\n            this.storage.savePalette(palette)\r\n          }\r\n\r\n          this.tracker.trackEvent('pwa', 'update-complete')\r\n          document.location.reload()\r\n        })\r\n\r\n        this.notificationService.dialog.emit({\r\n          id: 'update-available',\r\n          actions: [\r\n            {\r\n              id: 'not-now',\r\n              action: closeEvent,\r\n            },\r\n            {\r\n              id: 'update',\r\n              action: updateEvent,\r\n            },\r\n          ],\r\n        })\r\n      } else if (event.type === 'VERSION_INSTALLATION_FAILED') {\r\n        this.notificationService.notification.emit('update-failed')\r\n        this.tracker.trackEvent('pwa', 'update-failed')\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Allow tracking and remember the consent for 90 days\r\n   */\r\n  allowTracking() {\r\n    this.showTrackingNotice = false\r\n    this.storage.rememberTracking(true)\r\n    this.tracker.setConsentGiven()\r\n    this.notificationService.notification.emit('tracking-allowed')\r\n  }\r\n\r\n  /**\r\n   * Disable tracking and remember the choice for 90 days\r\n   */\r\n  disableTracking() {\r\n    this.showTrackingNotice = false\r\n    this.storage.rememberTracking(false)\r\n    this.tracker.forgetConsentGiven()\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "paletteService",
            "type": "PaletteService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "titleService",
            "type": "Title",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "updates",
            "type": "SwUpdate",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 45,
        "jsdoctags": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "paletteService",
            "type": "PaletteService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "titleService",
            "type": "Title",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "updates",
            "type": "SwUpdate",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div\r\n  class=\"min-h-screen grid grid-rows-site content-between py-6 text-gray-900 bg-gradient-to-r from-gray-100 to-gray-50 dark:text-gray-100 dark:from-gray-900 dark:to-gray-900 transition-colors duration-500\">\r\n  <header\r\n    class=\"w-full grid grid-cols-1 sm:grid-cols-7 lg:grid-cols-4 gap-4 px-8 items-center mb-10\">\r\n    <h1 class=\"mx-auto sm:ml-0 col-span-1 sm:col-span-2 lg:col-span-1\">\r\n      <img\r\n        alt=\"Rainbow Palette\"\r\n        height=\"50\"\r\n        width=\"179\"\r\n        [src]=\"\r\n          '/assets/rainbow-palette-' + (dark ? 'light' : 'dark') + '.svg'\r\n        \" />\r\n    </h1>\r\n\r\n    <nav class=\"col-span-1 sm:col-span-4 lg:col-span-2\">\r\n      <div class=\"mx-auto w-fit\">\r\n        <ul\r\n          *ngIf=\"paletteService.hasPalette()\"\r\n          class=\"flex flex-wrap gap-2 md:gap-4 font-medium text-gray-700 dark:text-gray-200\">\r\n          <li *ngFor=\"let nav of navigation\">\r\n            <a\r\n              class=\"inline-flex py-2 px-4 items-center rounded cursor-pointer transition-colors duration-500\"\r\n              [class]=\"\r\n                router.url === nav.link\r\n                  ? 'text-primary-800 bg-primary-200 dark:text-primary-900 dark:bg-primary-500'\r\n                  : 'hover:text-gray-900 hover:bg-gray-100 dark:hover:text-gray-50 dark:hover:bg-gray-800'\r\n              \"\r\n              [routerLink]=\"nav.link\"\r\n              [title]=\"'app.navigation.' + nav.id + '.title' | translate\">\r\n              <svg\r\n                class=\"w-6 h-6 mr-2 hidden md:block\"\r\n                viewBox=\"0 0 24 24\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"currentColor\"\r\n                [innerHTML]=\"nav.icon | safeHtml\"></svg>\r\n              {{ 'app.navigation.' + nav.id + '.label' | translate }}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n\r\n    <div class=\"flex items-center gap-4 justify-center md:justify-end\">\r\n      <app-language-selector></app-language-selector>\r\n      <app-light-switch\r\n        class=\"flex items-center\"\r\n        [dark]=\"dark\"></app-light-switch>\r\n    </div>\r\n  </header>\r\n\r\n  <main>\r\n    <router-outlet></router-outlet>\r\n  </main>\r\n\r\n  <section\r\n    *ngIf=\"showTrackingNotice\"\r\n    class=\"fixed bottom-0 bg-gray-200/95 dark:bg-gray-800/95 p-4 mx-auto max-w-screen-md md:rounded-tr-md md:w-[60vw] text-sm\">\r\n    <span class=\"font-medium\">{{ 'app.analytics.title' | translate }}</span>\r\n    <p>\r\n      <span\r\n        class=\"inline-block\"\r\n        [innerHtml]=\"\r\n          'app.analytics.description' | translate : { matomo: getMatomoLink() }\r\n        \"></span>\r\n      <a\r\n        routerLink=\"/analytics\"\r\n        [title]=\"'app.analytics.more-info-title' | translate\"\r\n        class=\"underline block text-right\">\r\n        {{ 'app.analytics.more-info' | translate }}\r\n      </a>\r\n    </p>\r\n    <div class=\"flex items-center justify-center gap-4 mt-4\">\r\n      <button\r\n        (click)=\"disableTracking()\"\r\n        class=\"py-2 px-4 bg-gray-300 font-medium text-gray-800 rounded cursor-pointer transition-colors duration-500 hover:bg-gray-400 hover:text-gray-900\"\r\n        type=\"reset\"\r\n        [title]=\"'app.analytics.decline-title' | translate\">\r\n        {{ 'app.analytics.decline' | translate }}\r\n      </button>\r\n      <button\r\n        (click)=\"allowTracking()\"\r\n        class=\"py-2 px-4 bg-primary-700 font-medium text-primary-100 rounded cursor-pointer transition-colors duration-500 hover:bg-primary-800 hover:text-primary-200 dark:hover:bg-primary-600 dark:hover:text-primary-50\"\r\n        type=\"submit\"\r\n        [title]=\"'app.analytics.accept' | translate\">\r\n        {{ 'app.analytics.accept' | translate }}\r\n      </button>\r\n    </div>\r\n  </section>\r\n\r\n  <footer\r\n    class=\"flex gap-4 flex-col sm:flex-row px-8 pt-16 items-center justify-between text-center w-full max-w-4xl mx-auto mt-10\">\r\n    <a\r\n      class=\"underline\"\r\n      href=\"https://github.com/pawcoding/tailwind-color-generator\"\r\n      rel=\"noreferrer noopener\"\r\n      target=\"_blank\"\r\n      [title]=\"'app.footer.source-code' | translate\">\r\n      {{ 'app.footer.github' | translate }}\r\n    </a>\r\n\r\n    <a\r\n      routerLink=\"/analytics\"\r\n      class=\"underline\"\r\n      [title]=\"'app.analytics.analytics-link' | translate\">\r\n      {{ 'app.footer.analytics' | translate }}\r\n    </a>\r\n\r\n    <span class=\"cursor-default\">\r\n      {{ 'app.footer.version' | translate : { version: version } }}\r\n    </span>\r\n\r\n    <a\r\n      href=\"https://pawcode.de\"\r\n      target=\"_blank\"\r\n      [title]=\"\r\n        'app.footer.created' | translate : { pawcode: 'pawcode Development' }\r\n      \">\r\n      <img\r\n        height=\"32\"\r\n        width=\"139\"\r\n        alt=\"pawcode&nbsp;Development\"\r\n        [src]=\"'/assets/pawcode-' + (dark ? 'light' : 'dark') + '.svg'\" />\r\n    </a>\r\n  </footer>\r\n\r\n  <app-custom-dialog class=\"fixed top-0 left-0\"></app-custom-dialog>\r\n\r\n  <app-notification class=\"fixed bottom-0 right-0\"></app-notification>\r\n</div>\r\n"
    },
    {
      "name": "ColorEditorComponent",
      "id": "component-ColorEditorComponent-d42bb009a07c02e04529a07d2f7f0dcd4ca5d66e13c84e6036e5269b530703cd9ce3c79080e24e73865c95952db116b037624fa340e3eaaa3f23cafab3856937",
      "file": "src/app/components/color-editor/color-editor.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-color-editor",
      "styleUrls": ["./color-editor.component.css"],
      "styles": [],
      "templateUrl": ["./color-editor.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "dark",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Color | undefined",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "colorService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ColorService",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [123]
        },
        {
          "name": "shade",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Shade | undefined",
          "optional": false,
          "description": "",
          "line": 15
        }
      ],
      "methodsClass": [
        {
          "name": "changeShade",
          "args": [
            {
              "name": "shadeIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nChange a shade to be edited\n",
          "description": "<p>Change a shade to be edited</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2617,
                "end": 2627,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shadeIndex"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2611,
                "end": 2616,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "hueToWheel",
          "args": [
            {
              "name": "hue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 130,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCalculate from hue to color wheel degree\n",
          "description": "<p>Calculate from hue to color wheel degree</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3515,
                "end": 3518,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "hue"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3509,
                "end": 3514,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "releaseShade",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "$event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nRelease a shade and let it be interpolated instead\n",
          "description": "<p>Release a shade and let it be interpolated instead</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2829,
                "end": 2834,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shade"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2823,
                "end": 2828,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 2848,
                "end": 2854,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "$event"
              },
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2842,
                "end": 2847,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "updateColor",
          "args": [
            {
              "name": "type",
              "type": "UpdateType",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "string | number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate current shade. The property with type is changed to the new value.\n",
          "description": "<p>Update current shade. The property with type is changed to the new value.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1012,
                "end": 1016,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 151,
                "escapedText": "type"
              },
              "type": "UpdateType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1006,
                "end": 1011,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Property to change</p>\n"
            },
            {
              "name": {
                "pos": 1049,
                "end": 1054,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "value"
              },
              "type": "string | number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1043,
                "end": 1048,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Value to change to</p>\n"
            }
          ]
        },
        {
          "name": "updateProperties",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate all css properties to the values of the current selected shade.\n",
          "description": "<p>Update all css properties to the values of the current selected shade.</p>\n"
        },
        {
          "name": "wheelToHue",
          "args": [
            {
              "name": "wheel",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 116,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCalculate from color wheel degree to hue\n",
          "description": "<p>Calculate from color wheel degree to hue</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3186,
                "end": 3191,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "wheel"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3180,
                "end": 3185,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, OnInit } from '@angular/core'\r\nimport { Color } from '../../models/color.model'\r\nimport { Shade } from '../../models/shade.model'\r\nimport { ChangeType, ColorService } from '../../services/color.service'\r\n\r\n@Component({\r\n  selector: 'app-color-editor',\r\n  templateUrl: './color-editor.component.html',\r\n  styleUrls: ['./color-editor.component.css'],\r\n})\r\nexport class ColorEditorComponent implements OnInit {\r\n  @Input()\r\n  dark = false\r\n\r\n  shade: Shade | undefined\r\n  color: Color | undefined\r\n\r\n  constructor(public colorService: ColorService) {\r\n    this.colorService.getColorChangeEmitter().subscribe((changeType) => {\r\n      if (changeType === ChangeType.LOAD) {\r\n        this.color = this.colorService.getColor()\r\n        this.shade = this.colorService.getShade()\r\n      }\r\n\r\n      this.updateProperties()\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.updateProperties()\r\n  }\r\n\r\n  /**\r\n   * Update current shade. The property with type is changed to the new value.\r\n   * @param type Property to change\r\n   * @param value Value to change to\r\n   */\r\n  updateColor(type: UpdateType, value: string | number) {\r\n    if (!this.shade) return\r\n\r\n    if (type === UpdateType.HEX && isNaN(+value)) {\r\n      if (`${value}`.match(/^#[0-9A-Fa-f]{6}$/))\r\n        this.shade.setHEX(`${value}`, true)\r\n      else return\r\n    } else if (!isNaN(+value)) {\r\n      value = parseInt(`${value}`)\r\n      if (type === UpdateType.HUE)\r\n        this.shade.setHSL(\r\n          this.wheelToHue(value),\r\n          this.shade.saturation,\r\n          this.shade.luminosity,\r\n          true\r\n        )\r\n      else if (type === UpdateType.SATURATION)\r\n        this.shade.setHSL(this.shade.hue, value, this.shade.luminosity, true)\r\n      else if (type === UpdateType.LUMINOSITY)\r\n        this.shade.setHSL(\r\n          this.shade.hue,\r\n          this.shade.saturation,\r\n          100 - value,\r\n          true\r\n        )\r\n    }\r\n\r\n    this.colorService.adjustShades()\r\n  }\r\n\r\n  /**\r\n   * Update all css properties to the values of the current selected shade.\r\n   */\r\n  updateProperties() {\r\n    if (!this.shade) return\r\n\r\n    document.documentElement.style.setProperty('--selected-hex', this.shade.hex)\r\n    document.documentElement.style.setProperty(\r\n      '--selected-hue',\r\n      String(this.shade.hue)\r\n    )\r\n    document.documentElement.style.setProperty(\r\n      '--selected-saturation',\r\n      this.shade.saturation + '%'\r\n    )\r\n    document.documentElement.style.setProperty(\r\n      '--selected-luminosity',\r\n      this.shade.luminosity + '%'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Change a shade to be edited\r\n   * @param shadeIndex\r\n   */\r\n  changeShade(shadeIndex: number) {\r\n    if (this.color) this.colorService.loadColor(this.color, shadeIndex)\r\n  }\r\n\r\n  /**\r\n   * Release a shade and let it be interpolated instead\r\n   * @param shade\r\n   * @param $event\r\n   */\r\n  releaseShade(shade: Shade, $event: MouseEvent) {\r\n    $event.preventDefault()\r\n    if (!this.color) return\r\n\r\n    if (this.color.shades.filter((s) => s.fixed).length > 1) {\r\n      shade.fixed = false\r\n      this.colorService.adjustShades()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate from color wheel degree to hue\r\n   * @param wheel\r\n   */\r\n  wheelToHue(wheel: number) {\r\n    let newHue\r\n    if (wheel < 120) newHue = 0.5 * wheel\r\n    else if (wheel < 180) newHue = wheel + 300\r\n    else if (wheel < 240) newHue = 2 * wheel + 120\r\n    else newHue = wheel\r\n\r\n    return newHue % 360\r\n  }\r\n\r\n  /**\r\n   * Calculate from hue to color wheel degree\r\n   * @param hue\r\n   */\r\n  hueToWheel(hue: number) {\r\n    let wheel\r\n    if (hue < 60) wheel = 2 * hue\r\n    else if (hue < 120) wheel = hue + 60\r\n    else if (hue < 240) wheel = 0.5 * hue + 120\r\n    else wheel = hue\r\n\r\n    return wheel % 360\r\n  }\r\n}\r\n\r\nenum UpdateType {\r\n  HEX,\r\n  HUE,\r\n  SATURATION,\r\n  LUMINOSITY,\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "input[type='range']::-webkit-slider-thumb {\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\ninput[type='range']::-moz-range-thumb {\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\n#hueInput {\r\n  background: linear-gradient(\r\n    90deg,\r\n    hsl(0, var(--selected-saturation), var(--selected-luminosity)) 0%,\r\n    hsl(60, var(--selected-saturation), var(--selected-luminosity)) 33.3%,\r\n    hsl(120, var(--selected-saturation), var(--selected-luminosity)) 50%,\r\n    hsl(240, var(--selected-saturation), var(--selected-luminosity)) 66.6%,\r\n    hsl(360, var(--selected-saturation), var(--selected-luminosity)) 100%\r\n  );\r\n}\r\n\r\n#saturationInput {\r\n  background: linear-gradient(\r\n    90deg,\r\n    hsl(var(--selected-hue), 0%, var(--selected-luminosity)) 0%,\r\n    hsl(var(--selected-hue), 100%, var(--selected-luminosity)) 100%\r\n  );\r\n}\r\n\r\n#luminosityInput {\r\n  background: linear-gradient(\r\n    90deg,\r\n    hsl(var(--selected-hue), var(--selected-saturation), 100%) 0%,\r\n    hsl(var(--selected-hue), var(--selected-saturation), 50%) 50%,\r\n    hsl(var(--selected-hue), var(--selected-saturation), 0%) 100%\r\n  );\r\n}\r\n",
          "styleUrl": "./color-editor.component.css"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "colorService",
            "type": "ColorService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "colorService",
            "type": "ColorService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div [class]=\"dark ? 'dark' : ''\" *ngIf=\"shade && color\" class=\"w-full\">\r\n  <section\r\n    class=\"fixed w-full h-full top-0 left-0 flex items-center justify-center z-20 px-4 bg-gray-900/50 dark:bg-gray-900/90\"\r\n    (click)=\"colorService.closeEditor()\">\r\n    <article\r\n      class=\"w-full max-w-sm mx-auto p-4 grid gap-2 font-medium bg-gray-100 text-gray-900 dark:bg-gray-700 dark:text-gray-100 rounded\"\r\n      (click)=\"$event.stopPropagation()\">\r\n      <h2 class=\"mb-2\">{{ color.name }}</h2>\r\n\r\n      <!-- Edit Hex -->\r\n      <div class=\"flex\">\r\n        <input\r\n          type=\"color\"\r\n          [title]=\"'color-editor.pick' | translate\"\r\n          id=\"hexInput\"\r\n          #hexInput\r\n          class=\"w-1/5 h-10 rounded-l rounded-r-none overflow-clip\"\r\n          [value]=\"shade.hex\"\r\n          (input)=\"updateColor(0, hexInput.value)\" />\r\n\r\n        <input\r\n          type=\"text\"\r\n          [title]=\"'color-editor.hex' | translate\"\r\n          id=\"hexCode\"\r\n          #hexCode\r\n          placeholder=\"#4472C4\"\r\n          class=\"w-4/5 rounded-r text-medium text-gray-900 bg-gray-200 dark:text-gray-200 dark:bg-gray-800 transition-colors duration-500 border-0 focus:ring-0\"\r\n          [value]=\"shade.hex\"\r\n          (input)=\"updateColor(0, hexCode.value)\" />\r\n      </div>\r\n\r\n      <!-- Edit Hue -->\r\n      <div>\r\n        <label for=\"hueInput\" class=\"flex justify-between\">\r\n          <span class=\"font-semibold\">{{\r\n            'color-editor.hue' | translate\r\n          }}</span>\r\n          <span id=\"hueLabel\" #hueLabel>{{ shade.hue }}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          [title]=\"'color-editor.hue-adjust' | translate\"\r\n          id=\"hueInput\"\r\n          #hueInput\r\n          min=\"0\"\r\n          max=\"360\"\r\n          step=\"1\"\r\n          [value]=\"hueToWheel(shade.hue)\"\r\n          (input)=\"updateColor(1, hueInput.value)\" />\r\n      </div>\r\n\r\n      <!-- Edit Saturation -->\r\n      <div>\r\n        <label for=\"saturationInput\" class=\"flex justify-between\">\r\n          <span class=\"font-semibold\">{{\r\n            'color-editor.saturation' | translate\r\n          }}</span>\r\n          <span id=\"saturationLabel\" #saturationLabel>{{\r\n            shade.saturation\r\n          }}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          [title]=\"'color-editor.saturation-adjust' | translate\"\r\n          id=\"saturationInput\"\r\n          #saturationInput\r\n          min=\"0\"\r\n          max=\"100\"\r\n          step=\"1\"\r\n          [value]=\"shade.saturation\"\r\n          (input)=\"updateColor(2, saturationInput.value)\" />\r\n      </div>\r\n\r\n      <!-- Edit Luminosity -->\r\n      <div>\r\n        <label for=\"luminosityInput\" class=\"flex justify-between\">\r\n          <span class=\"font-semibold\">{{\r\n            'color-editor.luminosity' | translate\r\n          }}</span>\r\n          <span id=\"luminosityLabel\" #luminosityLabel>{{\r\n            shade.luminosity\r\n          }}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          [title]=\"'color-editor.luminosity-adjust' | translate\"\r\n          id=\"luminosityInput\"\r\n          #luminosityInput\r\n          min=\"0\"\r\n          max=\"100\"\r\n          step=\"1\"\r\n          [value]=\"100 - shade.luminosity\"\r\n          (input)=\"updateColor(3, luminosityInput.value)\" />\r\n      </div>\r\n\r\n      <!-- Preview Color -->\r\n      <section\r\n        class=\"grow grid grid-cols-10 mt-8 text-center overflow-clip cursor-default\">\r\n        <span\r\n          *ngFor=\"let shadeToShow of color.shades\"\r\n          [ngStyle]=\"{\r\n            'background-color': shadeToShow.hex,\r\n            'border-color':\r\n              shadeToShow === shade ? 'currentColor' : shadeToShow.hex,\r\n            color: color.shades[shadeToShow.brightness > 51 ? 9 : 0].hex,\r\n            'font-weight': shadeToShow.fixed ? 'bold' : 'inherit'\r\n          }\"\r\n          [class]=\"\r\n            shadeToShow.index === 50\r\n              ? 'rounded-l'\r\n              : shadeToShow.index === 900\r\n              ? 'rounded-r'\r\n              : ''\r\n          \"\r\n          class=\"flex w-full h-14 items-center justify-center cursor-pointer border-4\"\r\n          [title]=\"'color-editor.edit-shade' | translate\"\r\n          (click)=\"changeShade(shadeToShow.index)\"\r\n          (contextmenu)=\"releaseShade(shadeToShow, $event)\">\r\n          {{ shadeToShow.fixed ? '■' : '' }}\r\n        </span>\r\n      </section>\r\n\r\n      <!-- Buttons -->\r\n      <section class=\"ml-auto\">\r\n        <button\r\n          class=\"py-2 px-4 mt-4 font-medium bg-gray-200 dark:bg-gray-800 rounded transition-all duration-200\"\r\n          type=\"reset\"\r\n          [title]=\"'color-editor.cancel-title' | translate\"\r\n          (click)=\"colorService.closeEditor()\">\r\n          {{ 'color-editor.cancel' | translate }}\r\n        </button>\r\n\r\n        <button\r\n          class=\"py-2 px-4 mt-4 ml-2 font-medium text-primary-100 bg-primary-700 dark:bg-primary-600 rounded transition-all duration-200\"\r\n          type=\"submit\"\r\n          [title]=\"'color-editor.save-title' | translate\"\r\n          (click)=\"colorService.saveColor()\">\r\n          {{ 'color-editor.save' | translate }}\r\n        </button>\r\n      </section>\r\n    </article>\r\n  </section>\r\n</div>\r\n"
    },
    {
      "name": "ColorViewerComponent",
      "id": "component-ColorViewerComponent-a62ba13fe69b713a34010fc562cc21e29f31b0d3d1bcd432cc1c5b43bc5f524d77c153070867e724329aa91d34242bbf3aeff68348abe77e59df329d31dbd00f",
      "file": "src/app/components/color-viewer/color-viewer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-color-viewer",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./color-viewer.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "Color | undefined",
          "decorators": []
        },
        {
          "name": "dark",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onRemove",
          "defaultValue": "new EventEmitter<Color>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "colorService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ColorService",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [123]
        },
        {
          "name": "editingState",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "editName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLInputElement> | undefined",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'editName'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "closeEditor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 61,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nClose color name editor\n",
          "description": "<p>Close color name editor</p>\n"
        },
        {
          "name": "copyToClipboard",
          "args": [
            {
              "name": "shade",
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "$event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCopy a shades hex to clipboard.\n",
          "description": "<p>Copy a shades hex to clipboard.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1681,
                "end": 1686,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shade"
              },
              "type": "Shade",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1675,
                "end": 1680,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 1700,
                "end": 1706,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "$event"
              },
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1694,
                "end": 1699,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "editShade",
          "args": [
            {
              "name": "shadeIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOpen editor with the shade with the given index\n",
          "description": "<p>Open editor with the shade with the given index</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1086,
                "end": 1096,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "shadeIndex"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1080,
                "end": 1085,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "openEditor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOpen color name editor\n",
          "description": "<p>Open color name editor</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core'\r\nimport { Color } from '../../models/color.model'\r\nimport { ColorService } from '../../services/color.service'\r\nimport { Shade } from '../../models/shade.model'\r\nimport { toUnicodeVariant } from '../../utils/to-unicode-variant.util'\r\nimport { NotificationService } from '../../services/notification.service'\r\nimport { TranslateService } from '@ngx-translate/core'\r\n\r\n@Component({\r\n  selector: 'app-color-viewer',\r\n  templateUrl: './color-viewer.component.html',\r\n})\r\nexport class ColorViewerComponent {\r\n  @Input()\r\n  color: Color | undefined\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Color>()\r\n\r\n  editingState = false\r\n\r\n  @ViewChild('editName')\r\n  editName: ElementRef<HTMLInputElement> | undefined\r\n\r\n  constructor(\r\n    public colorService: ColorService,\r\n    private notificationService: NotificationService,\r\n    private translate: TranslateService\r\n  ) {}\r\n\r\n  /**\r\n   * Open editor with the shade with the given index\r\n   * @param shadeIndex\r\n   */\r\n  editShade(shadeIndex: number) {\r\n    if (this.color) this.colorService.loadColor(this.color, shadeIndex)\r\n  }\r\n\r\n  /**\r\n   * Open color name editor\r\n   */\r\n  openEditor() {\r\n    this.editingState = true\r\n    setTimeout(() => {\r\n      this.editName?.nativeElement.focus()\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Close color name editor\r\n   */\r\n  closeEditor() {\r\n    this.editingState = false\r\n    if (this.color)\r\n      this.color.name =\r\n        this.editName?.nativeElement.value || this.translate.instant('random')\r\n  }\r\n\r\n  /**\r\n   * Copy a shades hex to clipboard.\r\n   * @param shade\r\n   * @param $event\r\n   */\r\n  copyToClipboard(shade: Shade, $event: MouseEvent) {\r\n    $event.preventDefault()\r\n    navigator.clipboard\r\n      .writeText(shade.hex)\r\n      .then(() => {\r\n        this.notificationService.notification.emit({\r\n          id: 'copied',\r\n          interpolateParams: {\r\n            color: toUnicodeVariant(shade.hex, 'm'),\r\n          },\r\n        })\r\n      })\r\n      .catch((e) => {\r\n        console.error('Error while copying to clipboard: ', e)\r\n        this.notificationService.notification.emit('copy-error')\r\n      })\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "colorService",
            "type": "ColorService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 32,
        "jsdoctags": [
          {
            "name": "colorService",
            "type": "ColorService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div [class]=\"dark ? 'dark' : ''\">\r\n  <article\r\n    *ngIf=\"color\"\r\n    class=\"my-8 items-center cursor-default overflow-clip grid grid-cols-2 sm:grid-cols-5 lg:grid-cols-10 grid-areas-color-square sm:grid-areas-color-semi lg:grid-areas-color-wide\">\r\n    <!-- Name of the color -->\r\n    <div class=\"grid-in-name flex gap-4 items-center mb-2\">\r\n      <h3\r\n        *ngIf=\"!editingState\"\r\n        class=\"inline-block py-2 cursor-pointer\"\r\n        (click)=\"openEditor()\">\r\n        {{ color.name }}\r\n      </h3>\r\n\r\n      <input\r\n        *ngIf=\"editingState\"\r\n        type=\"text\"\r\n        #editName\r\n        [placeholder]=\"'color-viewer.name-placeholder' | translate\"\r\n        class=\"bg-transparent p-0 mb-1.5 mt-2 text-lg font-bold border-0 focus:border-b-primary-700 border-b-2 focus:ring-0 transition-all duration-200\"\r\n        (focusout)=\"closeEditor()\"\r\n        (keydown.enter)=\"closeEditor()\"\r\n        [value]=\"color.name\" />\r\n\r\n      <span\r\n        *ngIf=\"!editingState\"\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        [title]=\"'color-viewer.edit-name' | translate\"\r\n        (click)=\"openEditor()\">\r\n        <img\r\n          src=\"/assets/icons/edit.svg\"\r\n          [alt]=\"'color-viewer.edit-name' | translate\"\r\n          class=\"icon\" />\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Action Buttons -->\r\n    <div class=\"grid-in-button flex gap-2 h-full justify-end items-center\">\r\n      <span\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        [title]=\"'color-viewer.tune' | translate\"\r\n        (click)=\"colorService.loadColor(color)\">\r\n        <img\r\n          class=\"icon\"\r\n          src=\"/assets/icons/tune.svg\"\r\n          [alt]=\"'color-viewer.tune' | translate\" />\r\n      </span>\r\n\r\n      <span\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        [title]=\"'color-viewer.remove' | translate\"\r\n        (click)=\"onRemove.emit(color)\">\r\n        <img\r\n          class=\"icon\"\r\n          src=\"/assets/icons/delete.svg\"\r\n          [alt]=\"'color-viewer.remove' | translate\" />\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Display all shades -->\r\n    <div\r\n      class=\"grid-in-shade grid grid-cols-10 sm:grid-cols-5 lg:grid-cols-10 sm:gap-2\">\r\n      <span\r\n        *ngFor=\"let shade of color.shades; index as i\"\r\n        [title]=\"'color-viewer.tune-shade' | translate\"\r\n        class=\"block w-full py-4 text-center text-lg cursor-pointer sm:rounded\"\r\n        [class]=\"\r\n          i === 0\r\n            ? 'rounded-l'\r\n            : i === color.shades.length - 1\r\n            ? 'rounded-r'\r\n            : ''\r\n        \"\r\n        [ngStyle]=\"{\r\n          'background-color': shade.hex,\r\n          color: color.shades[shade.brightness > 51 ? 9 : 0].hex\r\n        }\"\r\n        (click)=\"editShade(shade.index)\"\r\n        (contextmenu)=\"copyToClipboard(shade, $event)\">\r\n        <span class=\"opacity-0 sm:opacity-100\">\r\n          <span class=\"font-semibold\">\r\n            {{ shade.index }}\r\n          </span>\r\n          <br />\r\n          {{ shade.hex.toUpperCase().substring(1) }}\r\n        </span>\r\n      </span>\r\n    </div>\r\n  </article>\r\n</div>\r\n"
    },
    {
      "name": "DialogComponent",
      "id": "component-DialogComponent-fd19e93a92b5721f627f69b1386a03d663defceb820ffe1b670885c3315a742d4f59f2d3adf6044f46c05490369419e042fe500b6bbaae64a59ab4074cde7192",
      "file": "src/app/components/dialog/dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-custom-dialog",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./dialog.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "dark",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Dialog | undefined",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methodsClass": [
        {
          "name": "closeNotification",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core'\r\nimport { NotificationService } from '../../services/notification.service'\r\nimport { Dialog } from '../../interfaces/dialog.interface'\r\nimport { MatomoTracker } from '@ngx-matomo/tracker'\r\n\r\n@Component({\r\n  selector: 'app-custom-dialog',\r\n  templateUrl: './dialog.component.html',\r\n})\r\nexport class DialogComponent {\r\n  @Input()\r\n  dark = false\r\n\r\n  content: Dialog | undefined\r\n\r\n  constructor(\r\n    private notificationService: NotificationService,\r\n    private tracker: MatomoTracker\r\n  ) {\r\n    notificationService.dialog.subscribe((dialogContent) => {\r\n      this.content = dialogContent\r\n\r\n      if (\r\n        dialogContent &&\r\n        /export-(css|tailwind)-(copy|file)/.test(dialogContent.id)\r\n      ) {\r\n        const [category, action, name] = dialogContent.id.split('-')\r\n        this.tracker.trackEvent(category, action, name)\r\n      }\r\n    })\r\n  }\r\n\r\n  closeNotification() {\r\n    this.notificationService.dialog.emit(undefined)\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div\r\n  tabindex=\"-1\"\r\n  *ngIf=\"content\"\r\n  (click)=\"closeNotification()\"\r\n  class=\"flex overflow-y-auto overflow-x-hidden z-40 h-modal h-screen w-screen justify-center items-center bg-gray-900/50 dark:bg-gray-900/75 cursor-pointer\"\r\n  [class]=\"dark ? 'dark' : ''\"\r\n  aria-hidden=\"true\">\r\n  <div\r\n    class=\"relative p-4 w-full max-w-2xl cursor-default\"\r\n    (click)=\"$event.stopPropagation()\">\r\n    <article\r\n      class=\"relative bg-gray-100 text-gray-900 rounded dark:bg-gray-700 dark:text-gray-100 p-6\">\r\n      <button\r\n        type=\"button\"\r\n        (click)=\"closeNotification()\"\r\n        [title]=\"'dialog.close' | translate\"\r\n        class=\"absolute top-3 right-2.5 bg-transparent hover:bg-gray-200 rounded text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 transition-colors duration-200\">\r\n        <svg\r\n          aria-hidden=\"true\"\r\n          class=\"w-5 h-5\"\r\n          fill=\"currentColor\"\r\n          viewBox=\"0 0 20 20\"\r\n          xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path\r\n            d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\r\n            clip-rule=\"evenodd\"></path>\r\n        </svg>\r\n        <span class=\"sr-only\">{{ 'dialog.close' | translate }}</span>\r\n      </button>\r\n\r\n      <div class=\"mt-4 text-center\">\r\n        <p\r\n          class=\"text-lg font-normal py-2 lg:py-3\"\r\n          [innerHtml]=\"\r\n            'dialog.message.' + content.id\r\n              | translate : content.interpolateParams\r\n          \"></p>\r\n\r\n        <button\r\n          *ngFor=\"let action of content.actions\"\r\n          type=\"button\"\r\n          class=\"mt-2 mx-2 bg-gray-200 hover:bg-gray-300 focus:ring-0 focus:outline-none rounded text-sm font-medium px-5 py-2.5 focus:z-10 dark:bg-gray-800 dark:hover:bg-gray-900 transition-all duration-200\"\r\n          [title]=\"'dialog.action.' + action.id + '.title' | translate\"\r\n          (click)=\"action.action.emit(undefined)\">\r\n          {{ 'dialog.action.' + action.id + '.label' | translate }}\r\n        </button>\r\n      </div>\r\n    </article>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "EditComponent",
      "id": "component-EditComponent-4ab61aa17ae02fc9ce136241765d3c72be5b54d72f18967870f440cfebc03fb2b76a57be628d33093daa52942896a5e4b135c817ac54bf8cc664588e1289600f",
      "file": "src/app/pages/edit/edit.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-edit",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./edit.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "palette",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Palette | undefined",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core'\r\nimport { Palette } from '../../models/palette.model'\r\nimport { PaletteService } from '../../services/palette.service'\r\n\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html',\r\n})\r\nexport class EditComponent {\r\n  palette: Palette | undefined\r\n\r\n  constructor(private paletteService: PaletteService) {\r\n    paletteService.getPaletteChangeEmitter().subscribe((palette) => {\r\n      this.palette = palette\r\n    })\r\n    this.palette = paletteService.getPalette()\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "paletteService",
            "type": "PaletteService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "paletteService",
            "type": "PaletteService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div *ngIf=\"palette\">\r\n  <app-color-editor></app-color-editor>\r\n\r\n  <section class=\"py-2 max-w-screen-xl mx-auto\">\r\n    <app-palette-viewer [palette]=\"palette\"></app-palette-viewer>\r\n  </section>\r\n</div>\r\n"
    },
    {
      "name": "HomeComponent",
      "id": "component-HomeComponent-7731d78eca43df127a6e410df704bf3bb0d7e690455adeadeaff5e9ef5067ecb49dcb7282bf851db1345fb1010bcce3853b2844d62f766e90e55d588fecade13",
      "file": "src/app/pages/home/home.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-home",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./home.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dropdown",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "getDiscordLink",
          "defaultValue": "getDiscordLink(this.translate)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "getGitHubLink",
          "defaultValue": "getGitHubLink(this.translate)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "loadBar",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLSpanElement> | undefined",
          "optional": false,
          "description": "",
          "line": 27,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'loadBar'"
            }
          ]
        },
        {
          "name": "loadContainer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLDivElement> | undefined",
          "optional": false,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'loadContainer'"
            }
          ]
        },
        {
          "name": "loading",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "progress",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "scheme",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "PaletteScheme",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "schemes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type[]",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methodsClass": [
        {
          "name": "generatePalette",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "updateScheme",
          "args": [
            {
              "name": "scheme",
              "type": "PaletteScheme",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "scheme",
              "type": "PaletteScheme",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateValue",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, ViewChild } from '@angular/core'\r\nimport { Shade } from '../../models/shade.model'\r\nimport { NotificationService } from '../../services/notification.service'\r\nimport { PaletteScheme } from '../../class/palette-generator'\r\nimport { PaletteService } from '../../services/palette.service'\r\nimport { Router } from '@angular/router'\r\nimport { TranslateService } from '@ngx-translate/core'\r\nimport { getDiscordLink, getGitHubLink } from '../../utils/links.util'\r\nimport { MatomoTracker } from '@ngx-matomo/tracker'\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n  value: string\r\n  scheme: PaletteScheme\r\n  schemes: { index: number; for: string; name: string; scheme: PaletteScheme }[]\r\n  invalid = false\r\n  dropdown = false\r\n  loading = false\r\n  progress = 0\r\n\r\n  @ViewChild('loadContainer')\r\n  loadContainer: ElementRef<HTMLDivElement> | undefined\r\n  @ViewChild('loadBar')\r\n  loadBar: ElementRef<HTMLSpanElement> | undefined\r\n\r\n  getGitHubLink = getGitHubLink(this.translate)\r\n  getDiscordLink = getDiscordLink(this.translate)\r\n\r\n  constructor(\r\n    private notificationService: NotificationService,\r\n    private paletteService: PaletteService,\r\n    private router: Router,\r\n    private translate: TranslateService,\r\n    private tracker: MatomoTracker\r\n  ) {\r\n    this.value =\r\n      paletteService.hex || Shade.generateRandomShade().hex.toUpperCase()\r\n    let i = 0\r\n    this.schemes = Object.values(PaletteScheme)\r\n      .filter((s) => s.toString().length > 1)\r\n      .map((s) => ({\r\n        index: i++,\r\n        for:\r\n          'scheme' +\r\n          s\r\n            .toString()\r\n            .replace('_', ' ')\r\n            .replace(\r\n              /(\\w)(\\w*)/g,\r\n              (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase()\r\n            )\r\n            .replace(' ', ''),\r\n        name: s.toString(),\r\n        scheme: s as PaletteScheme,\r\n      }))\r\n\r\n    this.scheme = paletteService.scheme % this.schemes.length\r\n  }\r\n\r\n  updateValue(value: string) {\r\n    this.invalid = !value.match(/^#[0-9A-Fa-f]{6}$/)\r\n    if (!this.invalid) this.value = value.toUpperCase()\r\n  }\r\n\r\n  updateScheme(scheme: PaletteScheme) {\r\n    this.scheme = scheme\r\n    this.dropdown = false\r\n  }\r\n\r\n  generatePalette() {\r\n    if (this.invalid) {\r\n      this.notificationService.notification.emit(\r\n        this.translate.instant('home.generation.invalid-hex')\r\n      )\r\n      return\r\n    }\r\n\r\n    this.tracker.trackEvent('palette', 'generate', this.scheme.toString())\r\n\r\n    this.loading = true\r\n    const interval = window.setInterval(() => {\r\n      this.progress =\r\n        (this.loadBar?.nativeElement.clientWidth || 0) /\r\n        (this.loadContainer?.nativeElement.clientWidth || 100)\r\n    }, 50)\r\n\r\n    setTimeout(async () => {\r\n      clearInterval(interval)\r\n      this.paletteService.generatePalette(this.value, this.scheme)\r\n      await this.router.navigate(['edit'])\r\n    }, 5100)\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "paletteService",
            "type": "PaletteService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 30,
        "jsdoctags": [
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "paletteService",
            "type": "PaletteService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div>\r\n  <article class=\"px-4 text-center text-lg\">\r\n    <div *ngIf=\"!loading\">\r\n      <div\r\n        class=\"flex items-center justify-center\"\r\n        style=\"min-height: calc(80svh - 170px)\">\r\n        <section>\r\n          <p class=\"font-bold\">\r\n            {{ 'home.text1' | translate }}\r\n          </p>\r\n\r\n          <p>\r\n            {{ 'home.text2' | translate }}\r\n          </p>\r\n\r\n          <div class=\"relative mx-auto mt-4 flex flex-col max-w-xxs\">\r\n            <span class=\"flex\">\r\n              <input\r\n                type=\"color\"\r\n                [title]=\"'color-editor.pick' | translate\"\r\n                id=\"color\"\r\n                #color\r\n                class=\"h-10 w-1/5 overflow-clip rounded-r-none rounded-l\"\r\n                [value]=\"value\"\r\n                (input)=\"updateValue(color.value)\" />\r\n\r\n              <input\r\n                type=\"text\"\r\n                [title]=\"'color-editor.hex' | translate\"\r\n                id=\"hexCode\"\r\n                #hexCode\r\n                placeholder=\"#4472C4\"\r\n                class=\"w-4/5 rounded-r text-medium text-gray-900 bg-gray-100 dark:text-gray-200 dark:bg-gray-800 transition-colors duration-500 border-0 focus:ring-0\"\r\n                [value]=\"value\"\r\n                (input)=\"updateValue(hexCode.value)\" />\r\n            </span>\r\n\r\n            <button\r\n              class=\"py-2 px-4 mt-2 inline-flex items-center text-primary-100 bg-primary-700 font-medium rounded transition-colors duration-500\"\r\n              type=\"submit\"\r\n              [disabled]=\"invalid\">\r\n              <span\r\n                class=\"grow text-center\"\r\n                [class]=\"invalid ? 'cursor-not-allowed' : 'cursor-pointer'\"\r\n                [title]=\"\r\n                  invalid\r\n                    ? 'You need a 6-digit hex code'\r\n                    : 'Generate a color palette'\r\n                \"\r\n                (click)=\"generatePalette()\">\r\n                {{ 'home.generation.start' | translate }}\r\n              </span>\r\n\r\n              <svg\r\n                class=\"ml-4 h-6 w-6 cursor-pointer\"\r\n                fill=\"currentColor\"\r\n                viewBox=\"0 0 48 48\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                (click)=\"dropdown = !dropdown\">\r\n                <path\r\n                  d=\"M24 30.95q-.45 0-.875-.175t-.775-.525l-9.9-9.9q-.65-.65-.625-1.65.025-1 .675-1.7.75-.75 1.675-.675.925.075 1.625.725l8.2 8.2 8.2-8.2q.7-.65 1.7-.7 1-.05 1.65.7.75.7.675 1.675-.075.975-.725 1.675l-9.85 9.85q-.35.35-.775.525-.425.175-.875.175Z\" />\r\n              </svg>\r\n            </button>\r\n\r\n            <div\r\n              class=\"w-64 mt-1 p-2 absolute top-full text-gray-800 bg-gray-200 dark:text-gray-100 dark:bg-gray-700 rounded\"\r\n              [class]=\"dropdown ? '' : 'hidden'\"\r\n              (mouseleave)=\"dropdown = false\">\r\n              <span class=\"mb-1 block p-2 text-left text-base font-medium\">\r\n                {{ 'home.scheme.pick' | translate }}:\r\n              </span>\r\n\r\n              <section\r\n                class=\"h-32 overflow-y-auto text-sm scrollbar-thin scrollbar-thumb-primary-600 scrollbar-track-gray-300 dark:scrollbar-track-gray-600 sm:h-48\">\r\n                <label\r\n                  *ngFor=\"let schemeToShow of schemes\"\r\n                  class=\"block p-2 mb-1 mr-4 hover:bg-gray-300 dark:hover:bg-gray-600 rounded cursor-pointer transition-colors duration-500\"\r\n                  [htmlFor]=\"schemeToShow.for\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"scheme\"\r\n                    class=\"hidden peer\"\r\n                    [checked]=\"schemeToShow.index === scheme\"\r\n                    [id]=\"schemeToShow.for\"\r\n                    [value]=\"schemeToShow.name\"\r\n                    (change)=\"updateScheme(schemeToShow.scheme)\" />\r\n\r\n                  <span\r\n                    class=\"peer-checked:font-bold peer-checked:text-primary-700 dark:peer-checked:text-primary-500\">\r\n                    {{ 'home.scheme.' + schemeToShow.name | translate }}\r\n                  </span>\r\n                </label>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n\r\n      <div class=\"border-t border-t-gray-300 pt-16 dark:border-t-gray-600\">\r\n        <section\r\n          class=\"mx-auto max-w-xl text-justify text-base lg:max-w-7xl lg:px-4\">\r\n          <h2 class=\"mb-8 text-center\">\r\n            {{ 'home.tutorial.title' | translate }}\r\n          </h2>\r\n\r\n          <div class=\"grid gap-8 lg:grid-cols-3 lg:gap-16\">\r\n            <article class=\"xs:grid lg:block grid-cols-3 items-center\">\r\n              <div\r\n                class=\"text-center text-primary-900 dark:text-primary-300 lg:mb-4\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke-width=\"1.5\"\r\n                  stroke=\"currentColor\"\r\n                  class=\"mx-auto h-16 w-16\">\r\n                  <path\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    d=\"M4.098 19.902a3.75 3.75 0 005.304 0l6.401-6.402M6.75 21A3.75 3.75 0 013 17.25V4.125C3 3.504 3.504 3 4.125 3h5.25c.621 0 1.125.504 1.125 1.125v4.072M6.75 21a3.75 3.75 0 003.75-3.75V8.197M6.75 21h13.125c.621 0 1.125-.504 1.125-1.125v-5.25c0-.621-.504-1.125-1.125-1.125h-4.072M10.5 8.197l2.88-2.88c.438-.439 1.15-.439 1.59 0l3.712 3.713c.44.44.44 1.152 0 1.59l-2.879 2.88M6.75 17.25h.008v.008H6.75v-.008z\" />\r\n                </svg>\r\n\r\n                <h3>{{ 'home.tutorial.generation.title' | translate }}</h3>\r\n              </div>\r\n\r\n              <p class=\"col-span-2\">\r\n                {{ 'home.tutorial.generation.text' | translate }}\r\n              </p>\r\n            </article>\r\n\r\n            <article class=\"xs:grid lg:block grid-cols-3 items-center\">\r\n              <div\r\n                class=\"order-last text-center text-primary-900 dark:text-primary-300 lg:order-1 lg:mb-4\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke-width=\"1.5\"\r\n                  stroke=\"currentColor\"\r\n                  class=\"mx-auto h-16 w-16\">\r\n                  <path\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    d=\"M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75\" />\r\n                </svg>\r\n\r\n                <h3>{{ 'home.tutorial.editing.title' | translate }}</h3>\r\n              </div>\r\n\r\n              <p class=\"col-span-2 lg:order-last\">\r\n                {{ 'home.tutorial.editing.text' | translate }}\r\n              </p>\r\n            </article>\r\n\r\n            <article class=\"xs:grid lg:block grid-cols-3 items-center\">\r\n              <div\r\n                class=\"text-center text-primary-900 dark:text-primary-300 lg:mb-4\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke-width=\"1.5\"\r\n                  stroke=\"currentColor\"\r\n                  class=\"mx-auto h-16 w-16\">\r\n                  <path\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    d=\"M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5m8.25 3v6.75m0 0l-3-3m3 3l3-3M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z\" />\r\n                </svg>\r\n\r\n                <h3>{{ 'home.tutorial.export.title' | translate }}</h3>\r\n              </div>\r\n\r\n              <p class=\"col-span-2\">\r\n                {{ 'home.tutorial.export.text' | translate }}\r\n              </p>\r\n            </article>\r\n          </div>\r\n\r\n          <p class=\"mt-8 text-center\">\r\n            <b>{{ 'home.tutorial.end.title' | translate }}</b\r\n            ><br />\r\n            {{ 'home.tutorial.end.subtitle' | translate }}\r\n          </p>\r\n        </section>\r\n\r\n        <section class=\"mx-auto mt-16 max-w-xl text-justify text-base\">\r\n          <h2>{{ 'home.additions.title' | translate }}</h2>\r\n\r\n          <h3 class=\"pb-0.5\">\r\n            {{ 'home.additions.development.title' | translate }}\r\n          </h3>\r\n          <p\r\n            class=\"dark:text-gray-200\"\r\n            [innerHtml]=\"\r\n              'home.additions.development.text'\r\n                | translate\r\n                  : { github: getGitHubLink(), discord: getDiscordLink() }\r\n            \"></p>\r\n\r\n          <h3 class=\"pb-0.5\">\r\n            {{ 'home.additions.planned.title' | translate }}\r\n          </h3>\r\n          <p class=\"dark:text-gray-200\">\r\n            {{ 'home.additions.planned.text' | translate }}\r\n          </p>\r\n          <ul\r\n            class=\"list-inside list-disc space-y-1 md:space-y-0 text-left mt-2 dark:text-gray-200\">\r\n            <ng-container *ngFor=\"let issue of ['15', '17', '18', '19', '22']\">\r\n              <li>\r\n                {{ 'home.additions.planned.list.' + issue | translate }} (<a\r\n                  [href]=\"\r\n                    'https://github.com/pawcoding/Rainbow-Palette/issues/' +\r\n                    issue\r\n                  \"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer noopener\"\r\n                  class=\"underline\"\r\n                  [title]=\"'home.additions.planned.issue' | translate\"\r\n                  >#{{ issue }}</a\r\n                >)\r\n              </li>\r\n            </ng-container>\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    </div>\r\n\r\n    <article class=\"mx-auto max-w-md\" *ngIf=\"loading\">\r\n      <p>\r\n        <b>{{ 'home.generation.note' | translate }}:</b><br />\r\n        <span [innerHtml]=\"'home.generation.perfection' | translate\"></span>\r\n      </p>\r\n\r\n      <div\r\n        #loadContainer\r\n        class=\"h-6 w-full mt-10 rounded-full bg-gray-200 dark:bg-gray-800\">\r\n        <span\r\n          #loadBar\r\n          class=\"flex h-6 items-center justify-center rounded-full text-sm font-bold text-primary-50 bg-primary-700 animate-load\">\r\n          {{ progress | percent : '2.0' }}\r\n        </span>\r\n      </div>\r\n    </article>\r\n  </article>\r\n</div>\r\n"
    },
    {
      "name": "LanguageSelectorComponent",
      "id": "component-LanguageSelectorComponent-0dd3e40e80acc0a966a51a9a1227192e2a9e375217059200dc0485eb105ea882e0a7045cf8e9b1cd4965fc214b54dfda73f964f1fedf50c68d39bfc9f7540e24",
      "file": "src/app/components/language-selector/language-selector.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-language-selector",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./language-selector.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "language",
          "defaultValue": "'en'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "LANGUAGES",
          "defaultValue": "LANGUAGES",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "languageToCountryCode",
          "defaultValue": "languageToCountryCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [122, 144]
        },
        {
          "name": "showMenu",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15
        }
      ],
      "methodsClass": [
        {
          "name": "switchLanguage",
          "args": [
            {
              "name": "language",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSwitch the language of the app.\n",
          "description": "<p>Switch the language of the app.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 775,
                "end": 783,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "language"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 769,
                "end": 774,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core'\r\nimport { StorageService } from '../../services/storage.service'\r\nimport { languageToCountryCode } from '../../utils/language-to-countrycode.util'\r\nimport { LANGUAGES } from '../../constants/languages.constant'\r\nimport { MatomoTracker } from '@ngx-matomo/tracker'\r\n\r\n@Component({\r\n  selector: 'app-language-selector',\r\n  templateUrl: './language-selector.component.html',\r\n})\r\nexport class LanguageSelectorComponent {\r\n  LANGUAGES = LANGUAGES\r\n\r\n  language = 'en'\r\n  showMenu = false\r\n\r\n  constructor(private storage: StorageService, private tracker: MatomoTracker) {\r\n    this.storage.languageEmitter.subscribe((language) => {\r\n      this.language = language\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Switch the language of the app.\r\n   * @param language\r\n   */\r\n  switchLanguage(language: string) {\r\n    this.storage.applyLanguage(language)\r\n    this.showMenu = false\r\n    this.tracker.trackPageView()\r\n  }\r\n\r\n  protected readonly languageToCountryCode = languageToCountryCode\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<section class=\"relative w-7 mx-auto\">\r\n  <span\r\n    class=\"block h-7 w-7 cursor-pointer rounded-full fib fis\"\r\n    [class]=\"'fi-' + languageToCountryCode(language)\"\r\n    [title]=\"'language-selector.' + language | translate\"\r\n    (click)=\"showMenu = !showMenu\">\r\n    <span class=\"sr-only\">{{\r\n      'language-selector.' + language | translate\r\n    }}</span>\r\n  </span>\r\n\r\n  <article\r\n    *ngIf=\"showMenu\"\r\n    class=\"mt-2 p-2 absolute top-full left-1/2 -translate-x-1/2 md:left-full md:-translate-x-full text-gray-800 bg-gray-200 dark:text-gray-100 dark:bg-gray-700 rounded\"\r\n    (mouseleave)=\"showMenu = false\">\r\n    <section class=\"text-sm\">\r\n      <label\r\n        *ngFor=\"let language of LANGUAGES\"\r\n        class=\"p-2 hover:bg-gray-300 dark:hover:bg-gray-600 rounded cursor-pointer transition-colors duration-500 flex gap-2 items-center\"\r\n        (click)=\"switchLanguage(language)\">\r\n        <span\r\n          class=\"block h-6 w-6 rounded-full fib fis\"\r\n          [class]=\"'fi-' + languageToCountryCode(language)\"></span>\r\n        <span>{{ 'language-selector.' + language | translate }}</span>\r\n      </label>\r\n    </section>\r\n  </article>\r\n</section>\r\n"
    },
    {
      "name": "LightSwitchComponent",
      "id": "component-LightSwitchComponent-e4c2ea50ae5bbea0e7ed827e84e6e35e9367039554dcb5ad1e9c4573a192753cf5ac2305ff77cd822ea59f946f33c5588f763e2f78b6e3fcd89dd8a8e7890173",
      "file": "src/app/components/light-switch/light-switch.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-light-switch",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./light-switch.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "dark",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "boolean | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "toggleTheme",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nToggle between light and dark theme.\n",
          "description": "<p>Toggle between light and dark theme.</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core'\r\nimport { StorageService } from '../../services/storage.service'\r\nimport { MatomoTracker } from '@ngx-matomo/tracker'\r\n\r\n@Component({\r\n  selector: 'app-light-switch',\r\n  templateUrl: './light-switch.component.html',\r\n})\r\nexport class LightSwitchComponent {\r\n  @Input()\r\n  dark: boolean | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    private tracker: MatomoTracker\r\n  ) {}\r\n\r\n  /**\r\n   * Toggle between light and dark theme.\r\n   */\r\n  toggleTheme(): void {\r\n    this.dark = this.storage.toggleTheme(!this.dark)\r\n    this.tracker.trackPageView()\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<label\r\n  for=\"light-switch\"\r\n  class=\"inline-flex relative items-center cursor-pointer\"\r\n  [title]=\"'light-switch.' + (dark ? 'to-light' : 'to-dark') | translate\">\r\n  <input\r\n    type=\"checkbox\"\r\n    id=\"light-switch\"\r\n    class=\"sr-only peer\"\r\n    [checked]=\"dark\"\r\n    (change)=\"toggleTheme()\" />\r\n\r\n  <div\r\n    class=\"w-14 h-7 rounded-full bg-gray-100 peer-checked:bg-gray-800 transition-all duration-500 peer-focus:outline-none peer peer-checked:after:translate-x-full after:content-[url('/assets/icons/sun.svg')] peer-checked:after:content-[url('/assets/icons/moon.svg')] after:absolute after:top-0.5 after:left-[4px] after:rounded-full after:h-6 after:w-6 after:transition-all after:duration-500\"></div>\r\n</label>\r\n"
    },
    {
      "name": "NotificationComponent",
      "id": "component-NotificationComponent-3a3bb5da61aa3803cbfd8c58afd36d4fa4a00ec988951af2107601b703088e03a492b389712850f398a7202c645b9fc6708c3c782c989458f1600e33e243e990",
      "file": "src/app/components/notification/notification.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-notification",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./notification.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "dark",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "complexNotification",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type | undefined",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "timeout",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | undefined",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methodsClass": [
        {
          "name": "closeNotification",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core'\r\nimport { NotificationService } from '../../services/notification.service'\r\n\r\n@Component({\r\n  selector: 'app-notification',\r\n  templateUrl: './notification.component.html',\r\n})\r\nexport class NotificationComponent {\r\n  @Input()\r\n  dark = false\r\n\r\n  message: string | undefined\r\n  complexNotification:\r\n    | { id: string; interpolateParams: { [key: string]: string } }\r\n    | undefined\r\n  timeout: number | undefined\r\n\r\n  constructor(private notificationService: NotificationService) {\r\n    notificationService.notification.subscribe((notification) => {\r\n      if (typeof notification === 'string') {\r\n        this.message = notification\r\n        this.complexNotification = undefined\r\n      } else {\r\n        this.complexNotification = notification\r\n        this.message = undefined\r\n      }\r\n\r\n      if (notification) {\r\n        clearTimeout(this.timeout)\r\n        this.timeout = window.setTimeout(() => {\r\n          this.closeNotification()\r\n        }, 5000)\r\n      } else {\r\n        clearTimeout(this.timeout)\r\n        this.timeout = undefined\r\n      }\r\n    })\r\n  }\r\n\r\n  closeNotification() {\r\n    this.notificationService.notification.emit(undefined)\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div\r\n  *ngIf=\"message || complexNotification\"\r\n  [class]=\"dark ? 'dark' : ''\"\r\n  class=\"mb-6 mr-6 z-50\">\r\n  <article\r\n    class=\"flex items-center p-4 w-full max-w-xs bg-gray-100 rounded dark:bg-gray-800 text-gray-800 dark:text-gray-100\"\r\n    role=\"alert\">\r\n    <p class=\"mr-4 text-sm cursor-default\">\r\n      <ng-template [ngIf]=\"complexNotification\">\r\n        {{\r\n          'notification.' + complexNotification.id\r\n            | translate : complexNotification.interpolateParams\r\n        }}\r\n      </ng-template>\r\n      <ng-template [ngIf]=\"message\">\r\n        {{ 'notification.' + message | translate }}\r\n      </ng-template>\r\n    </p>\r\n\r\n    <button\r\n      type=\"button\"\r\n      (click)=\"closeNotification()\"\r\n      [title]=\"'notification.close' | translate\"\r\n      class=\"ml-auto -mx-1.5 -my-1.5 bg-transparent rounded p-1.5 hover:bg-gray-200 inline-flex h-8 w-8 dark:hover:bg-gray-900 transition-all duration-200\"\r\n      aria-label=\"Close\">\r\n      <span class=\"sr-only\">{{ 'notification.close' | translate }}</span>\r\n      <svg\r\n        aria-hidden=\"true\"\r\n        class=\"w-5 h-5\"\r\n        fill=\"currentColor\"\r\n        viewBox=\"0 0 20 20\"\r\n        xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\r\n          clip-rule=\"evenodd\"></path>\r\n      </svg>\r\n    </button>\r\n  </article>\r\n</div>\r\n"
    },
    {
      "name": "PaletteViewerComponent",
      "id": "component-PaletteViewerComponent-bc07e4f9fd2697a3d20dd576ac8d3948a517209bc2b505a824a4959dad524c8cae979ec49dbd631a7845be7a53837e8c902c09c3e5968b5ec77cfef88cf93c8c",
      "file": "src/app/components/palette-viewer/palette-viewer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-palette-viewer",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./palette-viewer.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "dark",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "palette",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "Palette | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onRemove",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "adding",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "editingState",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "editTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLInputElement> | undefined",
          "optional": false,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'editTitle'"
            }
          ]
        },
        {
          "name": "saving",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32
        }
      ],
      "methodsClass": [
        {
          "name": "addRandomColor",
          "args": [
            {
              "name": "$event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAdd a random color to the palette.\n",
          "description": "<p>Add a random color to the palette.</p>\n",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "closeEditor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nClose editor for palette name.\n",
          "description": "<p>Close editor for palette name.</p>\n"
        },
        {
          "name": "exportPalette",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 146,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nExport a palette for download and usage as plain CSS or Tailwind config.\n",
          "description": "<p>Export a palette for download and usage as plain CSS or Tailwind config.</p>\n"
        },
        {
          "name": "openEditor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 126,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOpen editor for palette name.\n",
          "description": "<p>Open editor for palette name.</p>\n"
        },
        {
          "name": "removeColor",
          "args": [
            {
              "name": "color",
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nRemove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.\n",
          "description": "<p>Remove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2059,
                "end": 2064,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "color"
              },
              "type": "Color",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2053,
                "end": 2058,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Color to remove from palette</p>\n"
            }
          ]
        },
        {
          "name": "removePalette",
          "args": [
            {
              "name": "$event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAsk user for confirmation an trigger onRemove event handler.\n",
          "description": "<p>Ask user for confirmation an trigger onRemove event handler.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1233,
                "end": 1239,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "$event"
              },
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1227,
                "end": 1232,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>MouseEvent</p>\n"
            }
          ]
        },
        {
          "name": "savePalette",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSave current palette to local storage.\n",
          "description": "<p>Save current palette to local storage.</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core'\r\nimport { Palette } from '../../models/palette.model'\r\nimport { Color } from '../../models/color.model'\r\nimport { StorageService } from '../../services/storage.service'\r\nimport { NotificationService } from '../../services/notification.service'\r\nimport { ExportDialog } from '../../dialogs/export.dialog'\r\nimport { TranslateService } from '@ngx-translate/core'\r\nimport { MatomoTracker } from '@ngx-matomo/tracker'\r\n\r\n@Component({\r\n  selector: 'app-palette-viewer',\r\n  templateUrl: './palette-viewer.component.html',\r\n})\r\nexport class PaletteViewerComponent {\r\n  @Input()\r\n  palette: Palette | undefined\r\n\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Event>()\r\n\r\n  editingState = false\r\n  saving = false\r\n  adding = false\r\n\r\n  @ViewChild('editTitle')\r\n  editTitle: ElementRef<HTMLInputElement> | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    private notificationService: NotificationService,\r\n    private translate: TranslateService,\r\n    private tracker: MatomoTracker\r\n  ) {}\r\n\r\n  /**\r\n   * Ask user for confirmation an trigger onRemove event handler.\r\n   * @param $event MouseEvent\r\n   */\r\n  removePalette($event: MouseEvent) {\r\n    const removeEmitter = new EventEmitter()\r\n    removeEmitter.subscribe(() => {\r\n      this.notificationService.dialog.emit(undefined)\r\n      this.onRemove.emit($event)\r\n    })\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notificationService.dialog.emit(undefined)\r\n    })\r\n\r\n    this.notificationService.dialog.emit({\r\n      id: 'delete-palette',\r\n      actions: [\r\n        {\r\n          id: 'cancel',\r\n          action: closeEmitter,\r\n        },\r\n        {\r\n          id: 'delete',\r\n          action: removeEmitter,\r\n        },\r\n      ],\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove color from palette and save the current palette to local storage.\r\n   * If color is not present in palette nothing happens.\r\n   * @param color Color to remove from palette\r\n   */\r\n  removeColor(color: Color) {\r\n    this.palette?.removeColor(color)\r\n  }\r\n\r\n  /**\r\n   * Add a random color to the palette.\r\n   */\r\n  addRandomColor($event: MouseEvent) {\r\n    const target = $event.target as HTMLButtonElement\r\n    this.adding = true\r\n    setTimeout(() => {\r\n      this.palette?.addColor(Color.generateRandomColor(), false)\r\n      this.adding = false\r\n      setTimeout(() => {\r\n        window.scroll({\r\n          behavior: 'smooth',\r\n          top:\r\n            window.scrollY +\r\n            target.getBoundingClientRect().bottom -\r\n            window.innerHeight +\r\n            20,\r\n        })\r\n      }, 10)\r\n    }, 2000)\r\n  }\r\n\r\n  /**\r\n   * Save current palette to local storage.\r\n   */\r\n  savePalette() {\r\n    this.saving = true\r\n\r\n    if (this.palette) {\r\n      this.storage.savePalette(this.palette)\r\n      this.tracker.trackEvent('palette', 'save')\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.notificationService.notification.emit('saved')\r\n      this.saving = false\r\n    }, 2000)\r\n  }\r\n\r\n  /**\r\n   * Open editor for palette name.\r\n   */\r\n  openEditor() {\r\n    this.editingState = true\r\n    setTimeout(() => {\r\n      this.editTitle?.nativeElement.focus()\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Close editor for palette name.\r\n   */\r\n  closeEditor() {\r\n    this.editingState = false\r\n    if (this.palette)\r\n      this.palette.title =\r\n        this.editTitle?.nativeElement.value || this.translate.instant('random')\r\n  }\r\n\r\n  /**\r\n   * Export a palette for download and usage as plain CSS or Tailwind config.\r\n   */\r\n  exportPalette() {\r\n    if (this.palette) {\r\n      this.notificationService.dialog.emit(\r\n        new ExportDialog(\r\n          this.notificationService.dialog,\r\n          this.palette\r\n        ).getNotification()\r\n      )\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 36,
        "jsdoctags": [
          {
            "name": "storage",
            "type": "StorageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "notificationService",
            "type": "NotificationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tracker",
            "type": "MatomoTracker",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div [class]=\"dark ? 'dark' : ''\">\r\n  <section *ngIf=\"palette\" class=\"px-4\">\r\n    <div class=\"flex flex-col sm:flex-row items-center gap-4 mb-6\">\r\n      <!-- Palette name -->\r\n      <div class=\"flex gap-4 items-end\">\r\n        <h2\r\n          *ngIf=\"!editingState\"\r\n          class=\"inline-block cursor-pointer\"\r\n          (click)=\"openEditor()\">\r\n          {{ palette.title }}\r\n        </h2>\r\n\r\n        <!-- Palette name input -->\r\n        <input\r\n          *ngIf=\"editingState\"\r\n          type=\"text\"\r\n          #editTitle\r\n          [placeholder]=\"'palette-viewer.title-placeholder' | translate\"\r\n          class=\"bg-transparent p-0 text-xl font-bold border-0 focus:border-b-primary-700 border-b-2 focus:ring-0 transition-all duration-200\"\r\n          (focusout)=\"closeEditor()\"\r\n          (keydown.enter)=\"closeEditor()\"\r\n          [value]=\"palette.title\" />\r\n\r\n        <span\r\n          *ngIf=\"!editingState\"\r\n          class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n          [title]=\"'palette-viewer.edit-title' | translate\"\r\n          (click)=\"openEditor()\">\r\n          <img\r\n            src=\"/assets/icons/edit.svg\"\r\n            alt=\"Edit title\"\r\n            class=\"icon !h-8 !w-8\" />\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Export Button -->\r\n      <div class=\"sm:ml-auto\">\r\n        <button\r\n          class=\"py-2 px-4 inline-flex items-center text-primary-100 bg-primary-700 font-medium rounded cursor-pointer\"\r\n          type=\"button\"\r\n          [title]=\"'palette-viewer.export-title' | translate\"\r\n          (click)=\"exportPalette()\">\r\n          <svg\r\n            class=\"w-6 h-6 mr-2\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path\r\n              fill=\"currentColor\"\r\n              d=\"M3.375 3C2.339 3 1.5 3.84 1.5 4.875v.75c0 1.036.84 1.875 1.875 1.875h17.25c1.035 0 1.875-.84 1.875-1.875v-.75C22.5 3.839 21.66 3 20.625 3H3.375z\" />\r\n            <path\r\n              fill=\"currentColor\"\r\n              fill-rule=\"evenodd\"\r\n              d=\"M3.087 9l.54 9.176A3 3 0 006.62 21h10.757a3 3 0 002.995-2.824L20.913 9H3.087zM12 10.5a.75.75 0 01.75.75v4.94l1.72-1.72a.75.75 0 111.06 1.06l-3 3a.75.75 0 01-1.06 0l-3-3a.75.75 0 111.06-1.06l1.72 1.72v-4.94a.75.75 0 01.75-.75z\"\r\n              clip-rule=\"evenodd\" />\r\n          </svg>\r\n\r\n          {{ 'palette-viewer.export' | translate }}\r\n        </button>\r\n\r\n        <!-- Save Button -->\r\n        <button\r\n          class=\"py-2 px-4 ml-4 inline-flex items-center text-primary-100 bg-primary-700 font-medium rounded cursor-pointer\"\r\n          type=\"button\"\r\n          [title]=\"\r\n            'palette-viewer.' + (saving ? 'saving' : 'save') + '-title'\r\n              | translate\r\n          \"\r\n          (click)=\"savePalette()\">\r\n          <svg\r\n            *ngIf=\"!saving\"\r\n            class=\"w-6 h-6 mr-2\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path\r\n              fill=\"currentColor\"\r\n              fill-rule=\"evenodd\"\r\n              d=\"M6.32 2.577a49.255 49.255 0 0111.36 0c1.497.174 2.57 1.46 2.57 2.93V21a.75.75 0 01-1.085.67L12 18.089l-7.165 3.583A.75.75 0 013.75 21V5.507c0-1.47 1.073-2.756 2.57-2.93z\"\r\n              clip-rule=\"evenodd\" />\r\n          </svg>\r\n\r\n          <svg\r\n            *ngIf=\"saving\"\r\n            class=\"w-6 h-6 mr-2 animate-processing\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path\r\n              fill=\"currentColor\"\r\n              fill-rule=\"evenodd\"\r\n              d=\"M4.755 10.059a7.5 7.5 0 0112.548-3.364l1.903 1.903h-3.183a.75.75 0 100 1.5h4.992a.75.75 0 00.75-.75V4.356a.75.75 0 00-1.5 0v3.18l-1.9-1.9A9 9 0 003.306 9.67a.75.75 0 101.45.388zm15.408 3.352a.75.75 0 00-.919.53 7.5 7.5 0 01-12.548 3.364l-1.902-1.903h3.183a.75.75 0 000-1.5H2.984a.75.75 0 00-.75.75v4.992a.75.75 0 001.5 0v-3.18l1.9 1.9a9 9 0 0015.059-4.035.75.75 0 00-.53-.918z\"\r\n              clip-rule=\"evenodd\" />\r\n          </svg>\r\n\r\n          {{ 'palette-viewer.' + (saving ? 'saving' : 'save') | translate }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Display all colors -->\r\n    <app-color-viewer\r\n      *ngFor=\"let color of palette.colors\"\r\n      [color]=\"color\"\r\n      (onRemove)=\"removeColor(color)\"></app-color-viewer>\r\n\r\n    <!-- Add random color to palette -->\r\n    <button\r\n      class=\"py-2 px-4 mt-4 mx-auto flex items-center font-medium text-primary-100 bg-primary-700 rounded transition-all duration-200\"\r\n      type=\"button\"\r\n      [title]=\"\r\n        'palette-viewer.' + (adding ? 'adding' : 'add') + '-title' | translate\r\n      \"\r\n      (click)=\"addRandomColor($event)\">\r\n      <svg\r\n        *ngIf=\"!adding\"\r\n        class=\"w-6 h-6 mr-2\"\r\n        viewBox=\"0 0 48 48\"\r\n        xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n          fill=\"currentColor\"\r\n          d=\"M27 29.1q.65 0 1.075-.425.425-.425.425-1.075v-5.1h5.1q.65 0 1.075-.425.425-.425.425-1.075 0-.65-.425-1.075-.425-.425-1.075-.425h-5.1v-5.1q0-.65-.425-1.075Q27.65 12.9 27 12.9q-.65 0-1.075.425-.425.425-.425 1.075v5.1h-5.1q-.65 0-1.075.425Q18.9 20.35 18.9 21q0 .65.425 1.075.425.425 1.075.425h5.1v5.1q0 .65.425 1.075.425.425 1.075.425ZM13 38q-1.2 0-2.1-.9-.9-.9-.9-2.1V7q0-1.2.9-2.1.9-.9 2.1-.9h28q1.2 0 2.1.9.9.9.9 2.1v28q0 1.2-.9 2.1-.9.9-2.1.9Zm0-3h28V7H13v28Zm-6 9q-1.2 0-2.1-.9Q4 42.2 4 41V11.5q0-.65.425-1.075Q4.85 10 5.5 10q.65 0 1.075.425Q7 10.85 7 11.5V41h29.5q.65 0 1.075.425Q38 41.85 38 42.5q0 .65-.425 1.075Q37.15 44 36.5 44Zm6-37v28V7Z\" />\r\n      </svg>\r\n\r\n      <svg\r\n        *ngIf=\"adding\"\r\n        class=\"w-6 h-6 mr-2 animate-processing\"\r\n        viewBox=\"0 0 48 48\"\r\n        xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n          fill=\"currentColor\"\r\n          d=\"M8.25 30.1q-.6-1.45-.85-2.975Q7.15 25.6 7.15 24q0-6.75 4.9-11.75t11.6-5h2.15l-2.3-2.3q-.45-.45-.45-1.15t.5-1.2q.45-.45 1.175-.45.725 0 1.225.45l5.25 5.35q.35.35.55.775.2.425.2.875t-.2.875q-.2.425-.55.775l-5.25 5.3q-.5.5-1.225.5-.725 0-1.225-.5-.5-.5-.5-1.225 0-.725.5-1.225l2.2-2.15h-1.95q-4.85 0-8.375 3.575Q11.85 19.1 11.85 24q0 1.2.175 2.25t.475 2q.2.65.05 1.325-.15.675-.55 1.125-.95.95-2.125.775Q8.7 31.3 8.25 30.1Zm13.8 15.4-5.35-5.25q-.35-.35-.525-.775Q16 39.05 16 38.6q0-.5.175-.9t.525-.75l5.35-5.35q.45-.45 1.15-.45t1.2.45q.45.5.45 1.175T24.4 33.9l-2.3 2.3h2.15q4.85 0 8.375-3.575Q36.15 29.05 36.15 24.1q0-1.15-.175-2.225Q35.8 20.8 35.5 19.85q-.2-.6-.075-1.25t.525-1.1q.95-.95 2.125-.8 1.175.15 1.675 1.3.55 1.5.825 3.025.275 1.525.275 3.075 0 6.8-4.9 11.825-4.9 5.025-11.55 5.025h-2.3l2.25 2.25q.45.45.45 1.15t-.45 1.15q-.5.5-1.175.5t-1.125-.5Z\" />\r\n      </svg>\r\n\r\n      {{ 'palette-viewer.' + (adding ? 'adding' : 'add') | translate }}\r\n    </button>\r\n  </section>\r\n</div>\r\n"
    },
    {
      "name": "PreviewComponent",
      "id": "component-PreviewComponent-630664770f4495cc6b625e02f155b5053da3c19c49390700662f52354fb87707b4601f2bcb39352f285adc97c1260510b0c5289a3a2ae0dd1c19ffeb65a99295",
      "file": "src/app/pages/preview/preview.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-preview",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./preview.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "getDiscordLink",
          "defaultValue": "getDiscordLink(this.translate)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "getGitHubLink",
          "defaultValue": "getGitHubLink(this.translate)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core'\r\nimport { getGitHubLink, getDiscordLink } from '../../utils/links.util'\r\nimport { TranslateService } from '@ngx-translate/core'\r\n\r\n@Component({\r\n  selector: 'app-preview',\r\n  templateUrl: './preview.component.html',\r\n})\r\nexport class PreviewComponent {\r\n  getGitHubLink = getGitHubLink(this.translate)\r\n  getDiscordLink = getDiscordLink(this.translate)\r\n\r\n  constructor(private translate: TranslateService) {}\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div>\r\n  <article class=\"mx-auto max-w-lg px-4 text-justify text-lg\">\r\n    <h2>{{ 'preview.title' | translate }}</h2>\r\n\r\n    <p class=\"dark:text-gray-300\">\r\n      {{ 'preview.description' | translate }}\r\n    </p>\r\n\r\n    <p\r\n      class=\"dark:text-gray-300 mt-4\"\r\n      [innerHtml]=\"\r\n        'preview.more-info'\r\n          | translate : { github: getGitHubLink(), discord: getDiscordLink() }\r\n      \"></p>\r\n  </article>\r\n</div>\r\n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-eacbcaa883052ed4dc199252b8a57f8bbced4de125a682dd8b6df765a2504f12467a1b115567dff08f9e62f5a015031101c12baf62cc14bbfdc0ffc893425be5",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core'\r\nimport { BrowserModule } from '@angular/platform-browser'\r\n\r\nimport { AppComponent } from './app.component'\r\nimport { ColorViewerComponent } from './components/color-viewer/color-viewer.component'\r\nimport { PaletteViewerComponent } from './components/palette-viewer/palette-viewer.component'\r\nimport { StorageService } from './services/storage.service'\r\nimport { LightSwitchComponent } from './components/light-switch/light-switch.component'\r\nimport { ColorEditorComponent } from './components/color-editor/color-editor.component'\r\nimport { ColorService } from './services/color.service'\r\nimport { DialogComponent } from './components/dialog/dialog.component'\r\nimport { NotificationComponent } from './components/notification/notification.component'\r\nimport { HomeComponent } from './pages/home/home.component'\r\nimport { AppRoutingModule } from './app-routing.module'\r\nimport { EditComponent } from './pages/edit/edit.component'\r\nimport { SafeHtmlPipe } from './pipes/safe-html.pipe'\r\nimport { PreviewComponent } from './pages/preview/preview.component'\r\nimport { ServiceWorkerModule } from '@angular/service-worker'\r\nimport { environment } from '../environments/environment'\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http'\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core'\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader'\r\nimport { LanguageSelectorComponent } from './components/language-selector/language-selector.component'\r\nimport { MatomoConsentMode, NgxMatomoTrackerModule } from '@ngx-matomo/tracker'\r\nimport { NgxMatomoRouterModule } from '@ngx-matomo/router'\r\nimport { AnalyticsInterceptor } from './interceptors/analytics.interceptor'\r\nimport { AnalyticsComponent } from './pages/analytics/analytics.component'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ColorEditorComponent,\r\n    ColorViewerComponent,\r\n    DialogComponent,\r\n    HomeComponent,\r\n    LightSwitchComponent,\r\n    NotificationComponent,\r\n    PaletteViewerComponent,\r\n    EditComponent,\r\n    SafeHtmlPipe,\r\n    PreviewComponent,\r\n    LanguageSelectorComponent,\r\n    AnalyticsComponent,\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient],\r\n      },\r\n    }),\r\n    ServiceWorkerModule.register('ngsw-worker.js', {\r\n      enabled: environment.production,\r\n      // Register the ServiceWorker as soon as the application is stable\r\n      // or after 30 seconds (whichever comes first).\r\n      registrationStrategy: 'registerWhenStable:30000',\r\n    }),\r\n    NgxMatomoTrackerModule.forRoot({\r\n      siteId: 1,\r\n      trackerUrl: 'https://analytics.apps.pawcode.de/',\r\n      enableJSErrorTracking: true,\r\n      acceptDoNotTrack: true,\r\n      requireConsent: MatomoConsentMode.TRACKING,\r\n      disabled: !environment.production,\r\n    }),\r\n    NgxMatomoRouterModule.forRoot({\r\n      interceptors: [AnalyticsInterceptor],\r\n      trackPageTitle: false,\r\n    }),\r\n  ],\r\n  providers: [ColorService, StorageService],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http)\r\n}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "ColorService"
            },
            {
              "name": "StorageService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AnalyticsComponent"
            },
            {
              "name": "AppComponent"
            },
            {
              "name": "ColorEditorComponent"
            },
            {
              "name": "ColorViewerComponent"
            },
            {
              "name": "DialogComponent"
            },
            {
              "name": "EditComponent"
            },
            {
              "name": "HomeComponent"
            },
            {
              "name": "LanguageSelectorComponent"
            },
            {
              "name": "LightSwitchComponent"
            },
            {
              "name": "NotificationComponent"
            },
            {
              "name": "PaletteViewerComponent"
            },
            {
              "name": "PreviewComponent"
            },
            {
              "name": "SafeHtmlPipe"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "id": "module-AppRoutingModule-d80366155ba07d97c2784745e61ee5ad1b7b53944ac110e6e12432195bbc0b3617e91eddcd4211084de319a27112dc0ec2009695a7803f3c686e3b9d77f80498",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app-routing.module.ts",
      "methods": [],
      "sourceCode": "import { RouterModule, Routes } from '@angular/router'\r\nimport { HomeComponent } from './pages/home/home.component'\r\nimport { NgModule } from '@angular/core'\r\nimport { canEditPalette } from './guards/palette.guard'\r\nimport { EditComponent } from './pages/edit/edit.component'\r\nimport { PreviewComponent } from './pages/preview/preview.component'\r\nimport { AnalyticsComponent } from './pages/analytics/analytics.component'\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', component: HomeComponent },\r\n  {\r\n    path: 'edit',\r\n    pathMatch: 'full',\r\n    canActivate: [canEditPalette],\r\n    component: EditComponent,\r\n  },\r\n  {\r\n    path: 'preview',\r\n    pathMatch: 'full',\r\n    canActivate: [canEditPalette],\r\n    component: PreviewComponent,\r\n  },\r\n  {\r\n    path: 'analytics',\r\n    pathMatch: 'full',\r\n    component: AnalyticsComponent,\r\n  },\r\n  { path: '**', redirectTo: '' },\r\n]\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StorybookTranslateModule",
      "id": "module-StorybookTranslateModule-a544857d7b85adebbdd5b25b5d701e396de29f3302622582ef1090957c94a024ee25da6d2c781c7d6b0b2eae069727b405666861d29468319a9952cd03da2ec7",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/utils/storybook-translate.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core'\r\nimport {\r\n  TranslateLoader,\r\n  TranslateModule,\r\n  TranslateService,\r\n} from '@ngx-translate/core'\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http'\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader'\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient],\r\n      },\r\n    }),\r\n  ],\r\n  exports: [TranslateModule],\r\n})\r\nexport class StorybookTranslateModule {\r\n  constructor(private translate: TranslateService) {\r\n    translate.setDefaultLang('en')\r\n    translate.use(translate.getBrowserLang() ?? 'en')\r\n  }\r\n}\r\n\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http)\r\n}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "canEditPalette",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/guards/palette.guard.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "CanActivateFn",
        "defaultValue": "async (\r\n  _: ActivatedRouteSnapshot,\r\n  __: RouterStateSnapshot\r\n) => {\r\n  const paletteService = inject(PaletteService)\r\n  if (paletteService.hasPalette()) return true\r\n\r\n  const router = inject(Router)\r\n  await router.navigate([''])\r\n  return false\r\n}"
      },
      {
        "name": "chars",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/utils/to-unicode-variant.util.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'"
      },
      {
        "name": "config",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": ".storybook/main.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StorybookConfig",
        "defaultValue": "{\r\n  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\r\n  addons: [\r\n    '@storybook/addon-links',\r\n    '@storybook/addon-essentials',\r\n    '@storybook/addon-interactions',\r\n  ],\r\n  framework: '@storybook/angular',\r\n  core: {\r\n    builder: '@storybook/builder-webpack5',\r\n  },\r\n  staticDirs: [\r\n    {\r\n      from: '../src/assets',\r\n      to: '/assets',\r\n    },\r\n  ],\r\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: false,\r\n  version: packageJson.version,\r\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: true,\r\n  version: packageJson.version,\r\n}"
      },
      {
        "name": "LANGUAGES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/constants/languages.constant.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "['en', 'de']"
      },
      {
        "name": "matomoProvidersMock",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/mocks/matomo.providers.mock.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\r\n  importProvidersFrom(\r\n    NgxMatomoTrackerModule.forRoot({\r\n      siteId: 1,\r\n      trackerUrl: 'https://analytics.apps.pawcode.de',\r\n      disabled: true,\r\n    })\r\n  ),\r\n  importProvidersFrom(NgxMatomoRouterModule.forRoot()),\r\n]"
      },
      {
        "name": "MediaScope",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "mediaScopePalette",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new Palette('media-scope', uuidv4())"
      },
      {
        "name": "numbers",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/utils/to-unicode-variant.util.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'0123456789'"
      },
      {
        "name": "offsets",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/utils/to-unicode-variant.util.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "literal type",
        "defaultValue": "{\r\n  m: [0x1d670, 0x1d7f6],\r\n  b: [0x1d400, 0x1d7ce],\r\n  i: [0x1d434, 0x00030],\r\n  bi: [0x1d468, 0x00030],\r\n  c: [0x0001d49c, 0x00030],\r\n  bc: [0x1d4d0, 0x00030],\r\n  g: [0x1d504, 0x00030],\r\n  d: [0x1d538, 0x1d7d8],\r\n  bg: [0x1d56c, 0x00030],\r\n  s: [0x1d5a0, 0x1d7e2],\r\n  bs: [0x1d5d4, 0x1d7ec],\r\n  is: [0x1d608, 0x00030],\r\n  bis: [0x1d63c, 0x00030],\r\n  o: [0x24b6, 0x2460],\r\n  on: [0x0001f150, 0x2460],\r\n  p: [0x249c, 0x2474],\r\n  q: [0x1f130, 0x00030],\r\n  qn: [0x0001f170, 0x00030],\r\n  w: [0xff21, 0xff10],\r\n  u: [0x2090, 0xff10],\r\n}"
      },
      {
        "name": "parameters",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": ".storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Parameters",
        "defaultValue": "{\r\n  actions: { argTypesRegex: '^on[A-Z].*' },\r\n  controls: {\r\n    matchers: {\r\n      color: /(background|color)$/i,\r\n      date: /Date$/,\r\n    },\r\n  },\r\n  docs: { inlineStories: true },\r\n}"
      },
      {
        "name": "Pawcode",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "PawcodeBlue",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "pawcodePalette",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new Palette('pawcode', uuidv4())"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": ".storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n}"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/color-editor/color-editor.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/dialog/dialog.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/language-selector/language-selector.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/light-switch/light-switch.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/notification/notification.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "special",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/utils/to-unicode-variant.util.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "literal type",
        "defaultValue": "{\r\n  m: {\r\n    ' ': 0x2000,\r\n    '-': 0x2013,\r\n  },\r\n  i: {\r\n    h: 0x210e,\r\n  },\r\n  g: {\r\n    C: 0x212d,\r\n    H: 0x210c,\r\n    I: 0x2111,\r\n    R: 0x211c,\r\n    Z: 0x2128,\r\n  },\r\n  d: {\r\n    C: 0x2102,\r\n    H: 0x210d,\r\n    N: 0x2115,\r\n    P: 0x2119,\r\n    Q: 0x211a,\r\n    R: 0x211d,\r\n    Z: 0x2124,\r\n  },\r\n  o: {\r\n    '0': 0x24ea,\r\n    '1': 0x2460,\r\n    '2': 0x2461,\r\n    '3': 0x2462,\r\n    '4': 0x2463,\r\n    '5': 0x2464,\r\n    '6': 0x2465,\r\n    '7': 0x2466,\r\n    '8': 0x2467,\r\n    '9': 0x2468,\r\n  },\r\n  on: {},\r\n  p: {},\r\n  q: {},\r\n  qn: {},\r\n  w: {},\r\n}"
      },
      {
        "name": "Tailwind",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "tailwindPalette",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new Palette('Tailwind', uuidv4())"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/color-editor/color-editor.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: ColorService,\r\n        useClass: ColorServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: ColorService,\r\n        useClass: ColorServiceMock,\r\n      },\r\n      NotificationService,\r\n      {\r\n        provide: PaletteService,\r\n        useClass: PaletteServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/dialog/dialog.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: NotificationService,\r\n        useClass: NotificationServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/language-selector/language-selector.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: StorageService,\r\n        useClass: StorageServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/light-switch/light-switch.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: StorageService,\r\n        useClass: StorageServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/notification/notification.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: NotificationService,\r\n        useClass: NotificationServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: ColorService,\r\n        useClass: ColorServiceMock,\r\n      },\r\n      {\r\n        provide: PaletteService,\r\n        useClass: PaletteServiceMock,\r\n      },\r\n      {\r\n        provide: StorageService,\r\n        useClass: StorageServiceMock,\r\n      },\r\n      NotificationService,\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
      },
      {
        "name": "variantOffsets",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/utils/to-unicode-variant.util.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "literal type",
        "defaultValue": "{\r\n  monospace: 'm',\r\n  bold: 'b',\r\n  italic: 'i',\r\n  'bold italic': 'bi',\r\n  script: 'c',\r\n  'bold script': 'bc',\r\n  gothic: 'g',\r\n  'gothic bold': 'bg',\r\n  doublestruck: 'd',\r\n  sans: 's',\r\n  'bold sans': 'bs',\r\n  'italic sans': 'is',\r\n  'bold italic sans': 'bis',\r\n  parenthesis: 'p',\r\n  circled: 'o',\r\n  'circled negative': 'on',\r\n  squared: 'q',\r\n  'squared negative': 'qn',\r\n  fullwidth: 'w',\r\n}"
      }
    ],
    "functions": [
      {
        "name": "countryCodeToLanguage",
        "file": "src/app/utils/language-to-countrycode.util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "countryCode",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "string",
        "jsdoctags": [
          {
            "name": "countryCode",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getDiscordLink",
        "file": "src/app/utils/links.util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "string",
        "jsdoctags": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getFlag",
        "file": "src/app/utils/to-unicode-variant.util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "flag",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "flags",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "jsdoctags": [
          {
            "name": "flag",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "flags",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getGitHubLink",
        "file": "src/app/utils/links.util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "string",
        "jsdoctags": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getMatomoLink",
        "file": "src/app/utils/links.util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "string",
        "jsdoctags": [
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getType",
        "file": "src/app/utils/to-unicode-variant.util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "variant",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "variant",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "HttpLoaderFactory",
        "file": "src/app/app.module.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "TranslateHttpLoader",
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "HttpLoaderFactory",
        "file": "src/app/utils/storybook-translate.module.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "TranslateHttpLoader",
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "languageToCountryCode",
        "file": "src/app/utils/language-to-countrycode.util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "language",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "string",
        "jsdoctags": [
          {
            "name": "language",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "toUnicodeVariant",
        "file": "src/app/utils/to-unicode-variant.util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "str",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "variant",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "flags",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "jsdoctags": [
          {
            "name": "str",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "variant",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "flags",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [],
    "enumerations": [
      {
        "name": "ChangeType",
        "childs": [
          {
            "name": "LOAD",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ADJUST",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/services/color.service.ts"
      },
      {
        "name": "PaletteScheme",
        "childs": [
          {
            "name": "RAINBOW",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "SURPRISE_ME",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "MONOCHROMATIC",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ANALOGOUS",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "COMPLEMENTARY",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "SPLIT",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "TRIADIC",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "COMPOUND",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/class/palette-generator.ts"
      },
      {
        "name": "UpdateType",
        "childs": [
          {
            "name": "HEX",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "HUE",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "SATURATION",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "LUMINOSITY",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/components/color-editor/color-editor.component.ts"
      }
    ],
    "groupedVariables": {
      "src/app/guards/palette.guard.ts": [
        {
          "name": "canEditPalette",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/guards/palette.guard.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CanActivateFn",
          "defaultValue": "async (\r\n  _: ActivatedRouteSnapshot,\r\n  __: RouterStateSnapshot\r\n) => {\r\n  const paletteService = inject(PaletteService)\r\n  if (paletteService.hasPalette()) return true\r\n\r\n  const router = inject(Router)\r\n  await router.navigate([''])\r\n  return false\r\n}"
        }
      ],
      "src/app/utils/to-unicode-variant.util.ts": [
        {
          "name": "chars",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/utils/to-unicode-variant.util.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'"
        },
        {
          "name": "numbers",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/utils/to-unicode-variant.util.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'0123456789'"
        },
        {
          "name": "offsets",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/utils/to-unicode-variant.util.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "defaultValue": "{\r\n  m: [0x1d670, 0x1d7f6],\r\n  b: [0x1d400, 0x1d7ce],\r\n  i: [0x1d434, 0x00030],\r\n  bi: [0x1d468, 0x00030],\r\n  c: [0x0001d49c, 0x00030],\r\n  bc: [0x1d4d0, 0x00030],\r\n  g: [0x1d504, 0x00030],\r\n  d: [0x1d538, 0x1d7d8],\r\n  bg: [0x1d56c, 0x00030],\r\n  s: [0x1d5a0, 0x1d7e2],\r\n  bs: [0x1d5d4, 0x1d7ec],\r\n  is: [0x1d608, 0x00030],\r\n  bis: [0x1d63c, 0x00030],\r\n  o: [0x24b6, 0x2460],\r\n  on: [0x0001f150, 0x2460],\r\n  p: [0x249c, 0x2474],\r\n  q: [0x1f130, 0x00030],\r\n  qn: [0x0001f170, 0x00030],\r\n  w: [0xff21, 0xff10],\r\n  u: [0x2090, 0xff10],\r\n}"
        },
        {
          "name": "special",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/utils/to-unicode-variant.util.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "defaultValue": "{\r\n  m: {\r\n    ' ': 0x2000,\r\n    '-': 0x2013,\r\n  },\r\n  i: {\r\n    h: 0x210e,\r\n  },\r\n  g: {\r\n    C: 0x212d,\r\n    H: 0x210c,\r\n    I: 0x2111,\r\n    R: 0x211c,\r\n    Z: 0x2128,\r\n  },\r\n  d: {\r\n    C: 0x2102,\r\n    H: 0x210d,\r\n    N: 0x2115,\r\n    P: 0x2119,\r\n    Q: 0x211a,\r\n    R: 0x211d,\r\n    Z: 0x2124,\r\n  },\r\n  o: {\r\n    '0': 0x24ea,\r\n    '1': 0x2460,\r\n    '2': 0x2461,\r\n    '3': 0x2462,\r\n    '4': 0x2463,\r\n    '5': 0x2464,\r\n    '6': 0x2465,\r\n    '7': 0x2466,\r\n    '8': 0x2467,\r\n    '9': 0x2468,\r\n  },\r\n  on: {},\r\n  p: {},\r\n  q: {},\r\n  qn: {},\r\n  w: {},\r\n}"
        },
        {
          "name": "variantOffsets",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/utils/to-unicode-variant.util.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "defaultValue": "{\r\n  monospace: 'm',\r\n  bold: 'b',\r\n  italic: 'i',\r\n  'bold italic': 'bi',\r\n  script: 'c',\r\n  'bold script': 'bc',\r\n  gothic: 'g',\r\n  'gothic bold': 'bg',\r\n  doublestruck: 'd',\r\n  sans: 's',\r\n  'bold sans': 'bs',\r\n  'italic sans': 'is',\r\n  'bold italic sans': 'bis',\r\n  parenthesis: 'p',\r\n  circled: 'o',\r\n  'circled negative': 'on',\r\n  squared: 'q',\r\n  'squared negative': 'qn',\r\n  fullwidth: 'w',\r\n}"
        }
      ],
      ".storybook/main.ts": [
        {
          "name": "config",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": ".storybook/main.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StorybookConfig",
          "defaultValue": "{\r\n  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\r\n  addons: [\r\n    '@storybook/addon-links',\r\n    '@storybook/addon-essentials',\r\n    '@storybook/addon-interactions',\r\n  ],\r\n  framework: '@storybook/angular',\r\n  core: {\r\n    builder: '@storybook/builder-webpack5',\r\n  },\r\n  staticDirs: [\r\n    {\r\n      from: '../src/assets',\r\n      to: '/assets',\r\n    },\r\n  ],\r\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: false,\r\n  version: packageJson.version,\r\n}"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: true,\r\n  version: packageJson.version,\r\n}"
        }
      ],
      "src/app/constants/languages.constant.ts": [
        {
          "name": "LANGUAGES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/constants/languages.constant.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "['en', 'de']"
        }
      ],
      "src/app/mocks/matomo.providers.mock.ts": [
        {
          "name": "matomoProvidersMock",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/mocks/matomo.providers.mock.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\r\n  importProvidersFrom(\r\n    NgxMatomoTrackerModule.forRoot({\r\n      siteId: 1,\r\n      trackerUrl: 'https://analytics.apps.pawcode.de',\r\n      disabled: true,\r\n    })\r\n  ),\r\n  importProvidersFrom(NgxMatomoRouterModule.forRoot()),\r\n]"
        }
      ],
      "src/app/components/palette-viewer/palette-viewer.component.stories.ts": [
        {
          "name": "MediaScope",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "mediaScopePalette",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new Palette('media-scope', uuidv4())"
        },
        {
          "name": "Pawcode",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "pawcodePalette",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new Palette('pawcode', uuidv4())"
        },
        {
          "name": "Tailwind",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "tailwindPalette",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new Palette('Tailwind', uuidv4())"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: ColorService,\r\n        useClass: ColorServiceMock,\r\n      },\r\n      {\r\n        provide: PaletteService,\r\n        useClass: PaletteServiceMock,\r\n      },\r\n      {\r\n        provide: StorageService,\r\n        useClass: StorageServiceMock,\r\n      },\r\n      NotificationService,\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
        }
      ],
      ".storybook/preview.ts": [
        {
          "name": "parameters",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": ".storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Parameters",
          "defaultValue": "{\r\n  actions: { argTypesRegex: '^on[A-Z].*' },\r\n  controls: {\r\n    matchers: {\r\n      color: /(background|color)$/i,\r\n      date: /Date$/,\r\n    },\r\n  },\r\n  docs: { inlineStories: true },\r\n}"
        },
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": ".storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n}"
        }
      ],
      "src/app/components/color-viewer/color-viewer.component.stories.ts": [
        {
          "name": "PawcodeBlue",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: ColorService,\r\n        useClass: ColorServiceMock,\r\n      },\r\n      NotificationService,\r\n      {\r\n        provide: PaletteService,\r\n        useClass: PaletteServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
        }
      ],
      "src/app/components/color-editor/color-editor.component.stories.ts": [
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/color-editor/color-editor.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/color-editor/color-editor.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: ColorService,\r\n        useClass: ColorServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
        }
      ],
      "src/app/components/dialog/dialog.component.stories.ts": [
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/dialog/dialog.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/dialog/dialog.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: NotificationService,\r\n        useClass: NotificationServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
        }
      ],
      "src/app/components/language-selector/language-selector.component.stories.ts": [
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/language-selector/language-selector.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/language-selector/language-selector.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: StorageService,\r\n        useClass: StorageServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
        }
      ],
      "src/app/components/light-switch/light-switch.component.stories.ts": [
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/light-switch/light-switch.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/light-switch/light-switch.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: StorageService,\r\n        useClass: StorageServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
        }
      ],
      "src/app/components/notification/notification.component.stories.ts": [
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/notification/notification.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/notification/notification.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [\r\n      {\r\n        provide: NotificationService,\r\n        useClass: NotificationServiceMock,\r\n      },\r\n    ],\r\n    imports: [StorybookTranslateModule],\r\n  },\r\n})"
        }
      ]
    },
    "groupedFunctions": {
      "src/app/utils/language-to-countrycode.util.ts": [
        {
          "name": "countryCodeToLanguage",
          "file": "src/app/utils/language-to-countrycode.util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "countryCode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "string",
          "jsdoctags": [
            {
              "name": "countryCode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "languageToCountryCode",
          "file": "src/app/utils/language-to-countrycode.util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "language",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "string",
          "jsdoctags": [
            {
              "name": "language",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/utils/links.util.ts": [
        {
          "name": "getDiscordLink",
          "file": "src/app/utils/links.util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "translate",
              "type": "TranslateService",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "string",
          "jsdoctags": [
            {
              "name": "translate",
              "type": "TranslateService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getGitHubLink",
          "file": "src/app/utils/links.util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "translate",
              "type": "TranslateService",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "string",
          "jsdoctags": [
            {
              "name": "translate",
              "type": "TranslateService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getMatomoLink",
          "file": "src/app/utils/links.util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "translate",
              "type": "TranslateService",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "string",
          "jsdoctags": [
            {
              "name": "translate",
              "type": "TranslateService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/utils/to-unicode-variant.util.ts": [
        {
          "name": "getFlag",
          "file": "src/app/utils/to-unicode-variant.util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "flag",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "flags",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "jsdoctags": [
            {
              "name": "flag",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "flags",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getType",
          "file": "src/app/utils/to-unicode-variant.util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "variant",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "variant",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toUnicodeVariant",
          "file": "src/app/utils/to-unicode-variant.util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "str",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "variant",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "flags",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "jsdoctags": [
            {
              "name": "str",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "variant",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "flags",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/app.module.ts": [
        {
          "name": "HttpLoaderFactory",
          "file": "src/app/app.module.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "TranslateHttpLoader",
          "jsdoctags": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/utils/storybook-translate.module.ts": [
        {
          "name": "HttpLoaderFactory",
          "file": "src/app/utils/storybook-translate.module.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "TranslateHttpLoader",
          "jsdoctags": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {
      "src/app/services/color.service.ts": [
        {
          "name": "ChangeType",
          "childs": [
            {
              "name": "LOAD",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "ADJUST",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/services/color.service.ts"
        }
      ],
      "src/app/class/palette-generator.ts": [
        {
          "name": "PaletteScheme",
          "childs": [
            {
              "name": "RAINBOW",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "SURPRISE_ME",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "MONOCHROMATIC",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "ANALOGOUS",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "COMPLEMENTARY",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "SPLIT",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "TRIADIC",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "COMPOUND",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/class/palette-generator.ts"
        }
      ],
      "src/app/components/color-editor/color-editor.component.ts": [
        {
          "name": "UpdateType",
          "childs": [
            {
              "name": "HEX",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "HUE",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "SATURATION",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "LUMINOSITY",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/components/color-editor/color-editor.component.ts"
        }
      ]
    },
    "groupedTypeAliases": {}
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "children": [
          {
            "path": "",
            "pathMatch": "full",
            "component": "HomeComponent"
          },
          {
            "path": "edit",
            "pathMatch": "full",
            "canActivate": ["canEditPalette"],
            "component": "EditComponent"
          },
          {
            "path": "preview",
            "pathMatch": "full",
            "canActivate": ["canEditPalette"],
            "component": "PreviewComponent"
          },
          {
            "path": "analytics",
            "pathMatch": "full",
            "component": "AnalyticsComponent"
          },
          {
            "path": "**",
            "redirectTo": ""
          }
        ],
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 8,
    "status": "low",
    "files": [
      {
        "filePath": ".storybook/main.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "config",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": ".storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "parameters",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": ".storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 15,
        "coverageCount": "2/13",
        "status": "low"
      },
      {
        "filePath": "src/app/app.module.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "HttpLoaderFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/class/color-converter.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ColorConverter",
        "coveragePercent": 0,
        "coverageCount": "0/21",
        "status": "low"
      },
      {
        "filePath": "src/app/class/color-interpolater.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ColorInterpolater",
        "coveragePercent": 90,
        "coverageCount": "10/11",
        "status": "very-good"
      },
      {
        "filePath": "src/app/class/color-namer.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ColorNamer",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/class/color-namer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Entry",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/class/palette-exporter.ts",
        "type": "class",
        "linktype": "classe",
        "name": "PaletteExporter",
        "coveragePercent": 92,
        "coverageCount": "12/13",
        "status": "very-good"
      },
      {
        "filePath": "src/app/class/palette-generator.ts",
        "type": "class",
        "linktype": "classe",
        "name": "PaletteGenerator",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/color-editor/color-editor.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ColorEditorComponent",
        "coveragePercent": 46,
        "coverageCount": "6/13",
        "status": "medium"
      },
      {
        "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PawcodeBlue",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/color-viewer/color-viewer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ColorViewerComponent",
        "coveragePercent": 33,
        "coverageCount": "4/12",
        "status": "medium"
      },
      {
        "filePath": "src/app/components/dialog/dialog.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/dialog/dialog.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/dialog/dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/components/language-selector/language-selector.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/language-selector/language-selector.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/language-selector/language-selector.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LanguageSelectorComponent",
        "coveragePercent": 14,
        "coverageCount": "1/7",
        "status": "low"
      },
      {
        "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/light-switch/light-switch.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LightSwitchComponent",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "src/app/components/notification/notification.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/notification/notification.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/notification/notification.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NotificationComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MediaScope",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "mediaScopePalette",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Pawcode",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "pawcodePalette",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Tailwind",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tailwindPalette",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/palette-viewer/palette-viewer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PaletteViewerComponent",
        "coveragePercent": 43,
        "coverageCount": "7/16",
        "status": "medium"
      },
      {
        "filePath": "src/app/constants/languages.constant.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LANGUAGES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/css/css-copy.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CssCopyDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/css/css-file.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CssFileDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/css/css.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CssDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/export.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ExportDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/scss/scss-copy.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ScssCopyDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/scss/scss-file.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ScssFileDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/scss/scss.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ScssDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/tailwind/tailwind-copy.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TailwindCopyDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/tailwind/tailwind-file.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TailwindFileDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dialogs/tailwind/tailwind.dialog.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TailwindDialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/guards/palette.guard.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "canEditPalette",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/interceptors/analytics.interceptor.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AnalyticsInterceptor",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/dialog.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Action",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/dialog.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Dialog",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/mocks/color.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ColorServiceMock",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/mocks/matomo.providers.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "matomoProvidersMock",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/mocks/notification.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "NotificationServiceMock",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/mocks/palette.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "PaletteServiceMock",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/mocks/storage.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "StorageServiceMock",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/models/color.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Color",
        "coveragePercent": 50,
        "coverageCount": "4/8",
        "status": "medium"
      },
      {
        "filePath": "src/app/models/palette.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Palette",
        "coveragePercent": 50,
        "coverageCount": "6/12",
        "status": "medium"
      },
      {
        "filePath": "src/app/models/shade.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Shade",
        "coveragePercent": 40,
        "coverageCount": "6/15",
        "status": "medium"
      },
      {
        "filePath": "src/app/pages/analytics/analytics.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AnalyticsComponent",
        "coveragePercent": 33,
        "coverageCount": "2/6",
        "status": "medium"
      },
      {
        "filePath": "src/app/pages/edit/edit.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "EditComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/pages/home/home.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HomeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/pages/preview/preview.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PreviewComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/pipes/safe-html.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "SafeHtmlPipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/services/color.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ColorService",
        "coveragePercent": 58,
        "coverageCount": "7/12",
        "status": "good"
      },
      {
        "filePath": "src/app/services/notification.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "NotificationService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/services/palette.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PaletteService",
        "coveragePercent": 50,
        "coverageCount": "6/12",
        "status": "medium"
      },
      {
        "filePath": "src/app/services/storage.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "StorageService",
        "coveragePercent": 57,
        "coverageCount": "8/14",
        "status": "good"
      },
      {
        "filePath": "src/app/utils/language-to-countrycode.util.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "countryCodeToLanguage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/language-to-countrycode.util.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "languageToCountryCode",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/links.util.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getDiscordLink",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/links.util.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getGitHubLink",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/links.util.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getMatomoLink",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/storybook-translate.module.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "HttpLoaderFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/to-unicode-variant.util.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getFlag",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/to-unicode-variant.util.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getType",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/to-unicode-variant.util.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "toUnicodeVariant",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/to-unicode-variant.util.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "chars",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/to-unicode-variant.util.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "numbers",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/to-unicode-variant.util.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "offsets",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/to-unicode-variant.util.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "special",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/utils/to-unicode-variant.util.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "variantOffsets",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
