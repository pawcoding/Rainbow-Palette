{
    "pipes": [
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-69461a3d17855b86cadb87bb6edcc2e607f176704e77875b321a08408ec3e5932c3f06e48d3e24963487e89a6f5a934a526bde2fcbfcd4cc04854413a5dec3bb",
            "file": "src/app/pipes/safe-html.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import {Pipe, PipeTransform} from \"@angular/core\";\r\nimport {DomSanitizer} from \"@angular/platform-browser\";\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(\r\n    private sanitized: DomSanitizer\r\n  ) { }\r\n\r\n  transform(value: any): any {\r\n    return this.sanitized.bypassSecurityTrustHtml(value)\r\n  }\r\n\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Action",
            "id": "interface-Action-f58912d2f1809ebc29174fc2e70f75a49736767006f33487bd7586c879895c64eaf201f50fb70dda2e2ddeb3d3fb59829752edf758dbbcd4a62669671c861a26",
            "file": "src/app/interfaces/dialog.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\n\r\nexport interface Dialog {\r\n\r\n  id: string,\r\n  interpolateParams?: Object,\r\n  actions?: Action[]\r\n\r\n}\r\n\r\nexport interface Action {\r\n\r\n  id: string\r\n  action: EventEmitter<any>\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Dialog",
            "id": "interface-Dialog-f58912d2f1809ebc29174fc2e70f75a49736767006f33487bd7586c879895c64eaf201f50fb70dda2e2ddeb3d3fb59829752edf758dbbcd4a62669671c861a26",
            "file": "src/app/interfaces/dialog.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\n\r\nexport interface Dialog {\r\n\r\n  id: string,\r\n  interpolateParams?: Object,\r\n  actions?: Action[]\r\n\r\n}\r\n\r\nexport interface Action {\r\n\r\n  id: string\r\n  action: EventEmitter<any>\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Action[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "interpolateParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Object",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Entry",
            "id": "interface-Entry-7b91c8675736aac7d6695b77ac6af57ec2eea6a5cb15e479c16a47727d3ca378d6961ce63c62074b426a95b1e66b45e292ddadcb5ecb91b137039cdf5283b52a",
            "file": "src/app/class/color-namer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Shade} from \"../models/shade.model\";\nimport {HttpClient, HttpXhrBackend} from \"@angular/common/http\";\n\nexport class ColorNamer {\n\n  private static colorDictionary: Entry[] = []\n  private static grayDictionary: Entry[] = []\n\n  public static loadDictionary() {\n    const http = new HttpClient(new HttpXhrBackend({\n      build: () => new XMLHttpRequest()\n    }))\n\n    http.get(\n      '/assets/color_dictionary.csv',\n      { responseType: 'text' }\n    ).subscribe(data => {\n      const list = data.split('\\n')\n      list.shift()\n\n      this.colorDictionary = list.map(entry => {\n        const split = entry.split(\";\")\n        return {\n          name: split[0],\n          hue: parseInt(split[1]),\n          saturation: parseInt(split[2]),\n          luminosity: parseInt(split[3])\n        }\n      })\n\n      this.grayDictionary.filter(color => color.hue === -1)\n    })\n  }\n\n  public static nameColor(shade: Shade) {\n    if (this.colorDictionary.length + this.grayDictionary.length === 0) {\n      console.info('Color dictionary is not loaded (yet).')\n      return shade.hex.substring(1)\n    }\n\n    const dictionary = shade.saturation === 0 ? this.grayDictionary : this.colorDictionary\n    const nearest = dictionary.reduce((prev, curr) =>\n        (this.calculateDifference(curr, shade) < this.calculateDifference(prev, shade) ? curr : prev))\n    return nearest.name\n      .replace(/(\\w)(\\w*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase())\n  }\n\n  private static calculateDifference(entry: {hue: number, saturation: number, luminosity: number}, shade: Shade) {\n    return 10 * Math.abs(entry.hue - shade.hue)\n      + 5 * Math.abs(entry.saturation - shade.saturation)\n      + Math.abs(entry.luminosity - shade.luminosity)\n  }\n\n}\n\ninterface Entry {\n\n  name: string,\n  hue: number,\n  saturation: number,\n  luminosity: number\n\n}\n",
            "properties": [
                {
                    "name": "hue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "luminosity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ColorService",
            "id": "injectable-ColorService-518d5208841e427ec8bc4499df698d0dfb5fa99c1d171a27e6df5d153aaca750709862f9d2cd75dab5c03310ca19f20395f9e9d277afdaa19385014c0924dcea",
            "file": "src/app/services/color.service.ts",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color | undefined",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "colorChangeEmitter",
                    "defaultValue": "new EventEmitter<ChangeType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<ChangeType>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adjustShades",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdjust the shades of a color\n",
                    "description": "<p>Adjust the shades of a color</p>\n"
                },
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose the color editor\n",
                    "description": "<p>Close the color editor</p>\n"
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the current color\n",
                    "description": "<p>Return the current color</p>\n"
                },
                {
                    "name": "getColorChangeEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "EventEmitter<ChangeType>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the color change event emitter\n",
                    "description": "<p>Return the color change event emitter</p>\n"
                },
                {
                    "name": "getShade",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the current shade\n",
                    "description": "<p>Return the current shade</p>\n"
                },
                {
                    "name": "loadColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shadeIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen the editor with a copy of the color and optional a specific shade.\n",
                    "description": "<p>Open the editor with a copy of the color and optional a specific shade.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 669,
                                "end": 674,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 663,
                                "end": 668,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 688,
                                "end": 698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shadeIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 682,
                                "end": 687,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "saveColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave all changes made to the color\n",
                    "description": "<p>Save all changes made to the color</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Color} from \"../models/color.model\";\r\nimport {ColorInterpolater} from \"../class/color-interpolater\";\r\nimport {Shade} from \"../models/shade.model\";\r\nimport {PaletteService} from \"./palette.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ColorService {\r\n\r\n  private color: Color | undefined\r\n  private shade: Shade | undefined\r\n  private colorChangeEmitter: EventEmitter<ChangeType> = new EventEmitter<ChangeType>()\r\n\r\n  constructor(\r\n    private paletteService: PaletteService\r\n  ) { }\r\n\r\n  /**\r\n   * Open the editor with a copy of the color and optional a specific shade.\r\n   * @param color\r\n   * @param shadeIndex\r\n   */\r\n  loadColor(color: Color, shadeIndex?: number) {\r\n    this.color = Color.parseColor(color)\r\n    if (shadeIndex)\r\n      this.shade = this.color.getShade(shadeIndex)\r\n    else\r\n      this.shade = this.color.shades.find(s => s.fixed)\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  /**\r\n   * Close the color editor\r\n   */\r\n  closeEditor() {\r\n    this.color = undefined\r\n    this.shade = undefined\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  /**\r\n   * Adjust the shades of a color\r\n   */\r\n  adjustShades() {\r\n    if (this.color) {\r\n      ColorInterpolater.regenerateShades(this.color)\r\n      this.colorChangeEmitter.emit(ChangeType.ADJUST)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save all changes made to the color\r\n   */\r\n  saveColor() {\r\n    if (this.color) {\r\n      this.paletteService.getPalette()?.replaceColor(this.color)\r\n      this.closeEditor()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the current color\r\n   */\r\n  getColor() {\r\n    return this.color\r\n  }\r\n\r\n  /**\r\n   * Return the current shade\r\n   */\r\n  getShade() {\r\n    return this.shade\r\n  }\r\n\r\n  /**\r\n   * Return the color change event emitter\r\n   */\r\n  getColorChangeEmitter() {\r\n    return this.colorChangeEmitter\r\n  }\r\n\r\n}\r\n\r\nexport enum ChangeType {\r\n  LOAD, ADJUST\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-d2fd1e2a7c833b3a04df25a8fbdb85b3d228313dc2aedb251733228c9802c354e534ecb938ed5cbefde21034a8ba8c196a21c1e65547b009e18403a71ef83aa9",
            "file": "src/app/services/notification.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "defaultValue": "new EventEmitter<Dialog | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<Dialog | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | { id: string, interpolateParams: Object } | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string | literal type | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\nimport {Dialog} from \"../interfaces/dialog.interface\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  dialog: EventEmitter<Dialog | undefined> = new EventEmitter<Dialog | undefined>()\n\n  notification: EventEmitter<string | { id: string, interpolateParams: Object } | undefined> = new EventEmitter<string | { id: string, interpolateParams: Object } | undefined>()\n\n  constructor() {\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "PaletteService",
            "id": "injectable-PaletteService-64bd06835ede75e395e173b23abedf92848527e2750f47dd9b8f2616b70ff01dc483f1cb5d0b601b9859c848dbe74d74d2475f625fdbfce38401257c11dcb37c",
            "file": "src/app/services/palette.service.ts",
            "properties": [
                {
                    "name": "hex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Palette | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "paletteChangeEmitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<Palette | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scheme",
                    "defaultValue": "PaletteScheme.RAINBOW",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaletteScheme",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "clearPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnload the current palette\n",
                    "description": "<p>Unload the current palette</p>\n"
                },
                {
                    "name": "generatePalette",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a new color palette with a specific color and scheme\n",
                    "description": "<p>Generate a new color palette with a specific color and scheme</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 789,
                                "end": 792,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 783,
                                "end": 788,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 805,
                                "end": 811,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scheme"
                            },
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 799,
                                "end": 804,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the current palette\n",
                    "description": "<p>Return the current palette</p>\n"
                },
                {
                    "name": "getPaletteChangeEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "EventEmitter<any>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the palette change event emitter\n",
                    "description": "<p>Return the palette change event emitter</p>\n"
                },
                {
                    "name": "hasPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if a palette is present\n",
                    "description": "<p>Check if a palette is present</p>\n"
                },
                {
                    "name": "loadPalette",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad an existing palette\n",
                    "description": "<p>Load an existing palette</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1238,
                                "end": 1245,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1232,
                                "end": 1237,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\nimport {Palette} from \"../models/palette.model\";\nimport {PaletteGenerator, PaletteScheme} from \"../class/palette-generator\";\nimport {StorageService} from \"./storage.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaletteService {\n\n  hex: string | undefined\n  scheme: PaletteScheme = PaletteScheme.RAINBOW\n  private palette: Palette | undefined\n  private paletteChangeEmitter: EventEmitter<Palette | undefined> = new EventEmitter()\n\n  constructor(\n    private storageService: StorageService\n  ) {\n    const palette = storageService.loadPalette()\n    if (palette)\n      this.loadPalette(palette)\n    else\n      this.clearPalette()\n  }\n\n  /**\n   * Generate a new color palette with a specific color and scheme\n   * @param hex\n   * @param scheme\n   */\n  generatePalette(hex: string, scheme: PaletteScheme) {\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\n      throw 'Hex must be a 6-digit hex code.'\n\n    this.hex = hex\n    this.scheme = Object.values(PaletteScheme).indexOf(scheme) % 8\n    const palette = PaletteGenerator.generatePalette(hex, scheme)\n    this.palette = palette\n    this.paletteChangeEmitter.emit(palette)\n  }\n\n  /**\n   * Load an existing palette\n   * @param palette\n   */\n  loadPalette(palette: Palette) {\n    this.hex = palette.colors[0].getShade(500).hex\n    this.palette = palette\n    this.paletteChangeEmitter.emit(palette)\n  }\n\n  /**\n   * Unload the current palette\n   */\n  clearPalette() {\n    this.palette = undefined\n    this.paletteChangeEmitter.emit(undefined)\n  }\n\n  /**\n   * Return the current palette\n   */\n  getPalette() {\n    return this.palette\n  }\n\n  /**\n   * Check if a palette is present\n   */\n  hasPalette() {\n    return !!this.palette\n  }\n\n  /**\n   * Return the palette change event emitter\n   */\n  getPaletteChangeEmitter() {\n    return this.paletteChangeEmitter\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-9d81402d7bade205605b97fb11d01bb63a4389b96f640f9ba307b5286b4af67a3e0172a1857d5a75cef863879e5a3a54d9ce8d1385c120bcecad1f3b8cfa136a",
            "file": "src/app/services/storage.service.ts",
            "properties": [
                {
                    "name": "darkEmitter",
                    "defaultValue": "new EventEmitter<Boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "loadPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "Palette | undefined",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.\n",
                    "description": "<p>Load the palette saved in local storage.\nIf no palette is saved a random one is going to be generated.</p>\n"
                },
                {
                    "name": "loadTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.\n",
                    "description": "<p>Load the theme if it is stored in local storage.\nIf no theme was saved, the browser default theme is used.</p>\n"
                },
                {
                    "name": "savePalette",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave palette in local storage.\n",
                    "description": "<p>Save palette in local storage.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1580,
                                "end": 1587,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1574,
                                "end": 1579,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [
                        {
                            "name": "dark",
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle between dark and light theme.\nForce dark or light mode with parameter.\n",
                    "description": "<p>Toggle between dark and light theme.\nForce dark or light mode with parameter.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 839,
                                "end": 843,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dark"
                            },
                            "type": "boolean | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 833,
                                "end": 838,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Palette} from \"../models/palette.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n\r\n  darkEmitter = new EventEmitter<Boolean>()\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Load the theme if it is stored in local storage.\r\n   * If no theme was saved, the browser default theme is used.\r\n   */\r\n  loadTheme() {\r\n    if (!localStorage.getItem('theme')) {\r\n      if (window.matchMedia('(prefers-color-scheme: dark)'))\r\n        return this.toggleTheme(true)\r\n      else {\r\n        this.darkEmitter.emit(true)\r\n        return false\r\n      }\r\n    } else {\r\n      return this.toggleTheme(localStorage.getItem('theme') === 'dark')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle between dark and light theme.\r\n   * Force dark or light mode with parameter.\r\n   * @param dark\r\n   */\r\n  toggleTheme(dark: boolean | undefined) {\r\n    document.body.classList.toggle('dark', dark)\r\n\r\n    dark = document.body.classList.contains('dark')\r\n    localStorage.setItem('theme', dark ? 'dark' : 'light')\r\n\r\n    this.darkEmitter.emit(dark)\r\n\r\n    return dark\r\n  }\r\n\r\n  /**\r\n   * Load the palette saved in local storage.\r\n   * If no palette is saved a random one is going to be generated.\r\n   */\r\n  loadPalette(): Palette | undefined {\r\n    const stored = localStorage.getItem('palette')\r\n    if (stored) {\r\n      try {\r\n        return Palette.parsePalette(JSON.parse(stored))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Save palette in local storage.\r\n   * @param palette\r\n   */\r\n  savePalette(palette: Palette) {\r\n    localStorage.setItem('palette', palette.toString())\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "PaletteGuard",
            "id": "injectable-PaletteGuard-2aac1e89b0bdda4948e79d931f09ee43fe2d601d69a41ca5f33d943e73c408f247837d70228873e926631c9f098aff13f46bea3e4b97443a0b46fdbf46f48959",
            "file": "src/app/guards/palette.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {PaletteService} from \"../services/palette.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaletteGuard implements CanActivate {\n  constructor(\n    private paletteService: PaletteService,\n    private router: Router\n  ) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.paletteService.hasPalette()) {\n      return true\n    } else {\n      this.router.navigate([''])\n      return false\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "Color",
            "id": "class-Color-c32a3ed162d1bf8d145a0f9570dd72e55a430d2b22f9a7b3032eab13c8cfe35bcab8ac0e10cc7a218a4845099e04d74c5a9fdee0b5ab7cd704b03c05e9e588ba",
            "file": "src/app/models/color.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorInterpolater} from \"../class/color-interpolater\";\r\nimport {Shade} from \"./shade.model\";\r\nimport {ColorNamer} from \"../class/color-namer\";\r\n\r\nexport class Color {\r\n\r\n  name: string\r\n  shades: Shade[]\r\n\r\n  public constructor(name: string, hex: string)\r\n  public constructor(name: string, hexes: string[])\r\n  public constructor(name: string, shades: Shade[])\r\n\r\n  constructor(...args: any[]) {\r\n    this.name = args[0].startsWith('#') ? args[0].substring(1) : args[0]\r\n\r\n    if (typeof args[1] === 'string') {\r\n      this.shades = []\r\n      const shade = new Shade(-1, true, args[1])\r\n      this.shades.push(shade)\r\n    } else if (typeof args[1][0] === 'string') {\r\n      this.shades = []\r\n\r\n      for (const hex of args[1]) {\r\n        this.shades.push(new Shade(-1, true, hex))\r\n      }\r\n    } else {\r\n      this.shades = args[1]\r\n    }\r\n\r\n    ColorInterpolater.regenerateShades(this)\r\n  }\r\n\r\n  /**\r\n   * Get shade by index (50, 100, 200, ..., 900)\r\n   * @param index\r\n   */\r\n  public getShade(index: number): Shade {\r\n    return this.shades.find(s => s.index === index) || this.shades[0]\r\n  }\r\n\r\n  /**\r\n   * Generate a random color with all shades.\r\n   */\r\n  public static generateRandomColor(): Color {\r\n    const shade = Shade.generateRandomShade()\r\n    return new Color(\r\n      ColorNamer.nameColor(shade),\r\n      shade.hex\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Stringify the color.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      name: this.name,\r\n      shades: this.shades\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a color.\r\n   * Throws exception if json object is no valid color object.\r\n   * @param json\r\n   */\r\n  public static parseColor(json: any): Color {\r\n    if (!json.name)\r\n      throw 'Color has no name'\r\n    if (!json.shades || json.shades.length < 1)\r\n      throw 'Color has not enough shades'\r\n\r\n    const shades: Shade[] = []\r\n    for (const shade of json.shades) {\r\n      shades.push(Shade.parseShade(shade))\r\n    }\r\n\r\n    return new Color(json.name, shades)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "shades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "generateRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a random color with all shades.\n",
                    "description": "<p>Generate a random color with all shades.</p>\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getShade",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet shade by index (50, 100, 200, ..., 900)\n",
                    "description": "<p>Get shade by index (50, 100, 200, ..., 900)</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 973,
                                "end": 978,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 967,
                                "end": 972,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "parseColor",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a color.\nThrows exception if json object is no valid color object.\n",
                    "description": "<p>Parse the json object to a color.\nThrows exception if json object is no valid color object.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1636,
                                "end": 1640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1630,
                                "end": 1635,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStringify the color.\n",
                    "description": "<p>Stringify the color.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorConverter",
            "id": "class-ColorConverter-cba2355ca97f911a114c3cdba93aa10c96cec91898eb6ffa88655c52de44663d1fe14041e832ba824dbf41a397ba8a00a0af408b3b919cf09d7782ef9c95f231",
            "file": "src/app/class/color-converter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ColorConverter {\n\n  static HEXtoRGB(hex: string) {\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\n      throw `Color ${hex} is not in form #RRGGBB.`\n\n    return {\n      red: parseInt(hex.substring(1, 3), 16),\n      green: parseInt(hex.substring(3, 5), 16),\n      blue: parseInt(hex.substring(5, 7), 16)\n    }\n  }\n\n  static HEXtoHSL(hex: string) {\n    const rgb = this.HEXtoRGB(hex)\n    return this.RGBtoHSL(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HEXtoHSV(hex: string) {\n    const hsl = this.HEXtoHSL(hex)\n    return this.HSLtoHSV(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static HEXtoCMYK(hex: string) {\n    const rgb = this.HEXtoRGB(hex)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static RGBtoHEX(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    return `#${\n      (red < 16 ? 0 : '') + red.toString(16).toUpperCase()\n    }${\n      (green < 16 ? 0 : '') + green.toString(16).toUpperCase()\n    }${\n      (blue < 16 ? 0 : '') + blue.toString(16).toUpperCase()\n    }`\n  }\n\n  static RGBtoHSL(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    const r = red / 255\n    const g = green / 255\n    const b = blue / 255\n\n    const cMax = Math.max(r, g, b)\n    const cMin = Math.min(r, g, b)\n    const delta = cMax - cMin\n\n    const luminosity = (cMax + cMin) * 50\n    const saturation = (delta === 0) ? 0 : (100 * delta / (1 - Math.abs(2 * (luminosity / 100) - 1)))\n\n    let hue\n    if (delta === 0)\n      hue = 0\n    else if (cMax === r)\n      hue = 60 * ( ( (g - b) / delta) % 6)\n    else if (cMax === g)\n      hue = 60 * ( ( (b - r) / delta) + 2)\n    else\n      hue = 60 * ( ( (r - g) / delta) + 4)\n\n    if (hue < 0)\n      hue += 360\n\n    return {\n      hue: Math.round(hue),\n      saturation: Math.round(saturation),\n      luminosity: Math.round(luminosity)\n    }\n  }\n\n  static RGBtoHSV(red: number, green: number, blue: number) {\n    const hsl = this.RGBtoHSL(red, green, blue)\n    return this.HSLtoHSV(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static RGBtoCMYK(red: number, green: number, blue: number) {\n    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255)\n      throw `rgb(${red}, ${green}, ${blue}) is not in valid format.`\n\n    const r = red / 255\n    const g = green / 255\n    const b = blue / 255\n\n    const k = 1 - Math.max(r, g, b)\n    const c = (1 - r - k) / (1 - k)\n    const m = (1 - g - k) / (1 - k)\n    const y = (1 - b - k) / (1 - k)\n\n    return {\n      cyan: Math.round(c * 100),\n      magenta: Math.round(m * 100),\n      yellow: Math.round(y * 100),\n      key: Math.round(k * 100)\n    }\n  }\n\n\n  static HSLtoHEX(hue: number, saturation: number, luminosity: number): string {\n    const rgb = this.HSLtoRGB(hue, saturation, luminosity)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HSLtoRGB(hue: number, saturation: number, luminosity: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || luminosity < 0 || luminosity > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${luminosity}%] are not in valid ranges.`\n\n    const h = hue\n    const s = saturation / 100\n    const l = luminosity / 100\n\n    const c = (1 - Math.abs(2 * l - 1)) * s\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1))\n    const m = l - c / 2\n\n    const r = (h < 60 || h >= 300) ? c : (h < 120 || h >= 240) ? x : 0\n    const g = (h >= 240) ? 0 : (h < 60 || h >= 180) ? x : c\n    const b = (h < 120) ? 0 : (h < 180 || h >= 300) ? x : c\n\n    return {\n      red: Math.round((r + m) * 255),\n      green: Math.round((g + m) * 255),\n      blue: Math.round((b + m) * 255)\n    }\n  }\n\n  static HSLtoHSV(hue: number, saturation: number, luminosity: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || luminosity < 0 || luminosity > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${luminosity}%] are not in valid ranges.`\n\n    const v = luminosity + saturation * Math.min(luminosity, 1 - luminosity)\n\n    const s = (v === 0) ? 0 :\n      (2 * (1 - (luminosity / v)))\n\n    return {\n      hue: hue,\n      saturation: Math.round(s),\n      value: Math.round(v)\n    }\n  }\n\n  static HSLtoCMYK(hue: number, saturation: number, luminosity: number) {\n    const rgb = this.HSLtoRGB(hue, saturation, luminosity)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static HSVtoHEX(hue: number, saturation: number, value: number) {\n    const rgb = this.HSVtoRGB(hue, saturation, value)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static HSVtoRGB(hue: number, saturation: number, value: number) {\n    const hsl = this.HSVtoHSL(hue, saturation, value)\n    return this.HSLtoRGB(hsl.hue, hsl.saturation, hsl.luminosity)\n  }\n\n  static HSVtoHSL(hue: number, saturation: number, value: number) {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || value < 0 || value > 100)\n      throw `Color values [${hue}°, ${saturation}%, ${value}%] are not in valid ranges.`\n\n    const l = value * (1 - (saturation / 2))\n\n    const s = (l === 0 || l === 1) ? 0 :\n      ((value - l) / Math.min(l, 1 - l))\n\n    return {\n      hue: hue,\n      saturation: Math.round(s),\n      luminosity: Math.round(l)\n    }\n  }\n\n  static HSVtoCMYK(hue: number, saturation: number, value: number) {\n    const rgb = this.HSVtoRGB(hue, saturation, value)\n    return this.RGBtoCMYK(rgb.red, rgb.green, rgb.blue)\n  }\n\n\n  static CMYKtoHEX(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHEX(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static CMYKtoRGB(cyan: number, magenta: number, yellow: number, key: number) {\n    if (cyan < 0 || cyan > 100 || magenta < 0 || magenta > 100 || yellow < 0 || yellow > 100 || key < 0 || key > 100)\n      throw `[${cyan}, ${magenta}, ${yellow}, ${key}] is not in valid format.`\n\n    const c = cyan / 100\n    const m = magenta / 100\n    const y = yellow / 100\n    const k = key / 100\n\n    const r = (1 - c) * (1 - k)\n    const g = (1 - m) * (1 - k)\n    const b = (1 - y) * (1 - k)\n\n    return {\n      red: Math.round(255 * r),\n      green: Math.round(255 * g),\n      blue: Math.round(255 * b),\n    }\n  }\n\n  static CMYKtoHSL(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHSL(rgb.red, rgb.green, rgb.blue)\n  }\n\n  static CMYKtoHSV(cyan: number, magenta: number, yellow: number, key: number) {\n    const rgb = this.CMYKtoRGB(cyan, magenta, yellow, key)\n    return this.RGBtoHSV(rgb.red, rgb.green, rgb.blue)\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "CMYKtoHEX",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoHSL",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoHSV",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CMYKtoRGB",
                    "args": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cyan",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "magenta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yellow",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoCMYK",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoHSL",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoHSV",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HEXtoRGB",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoCMYK",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoHEX",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoHSV",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSLtoRGB",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoCMYK",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoHEX",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoHSL",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "HSVtoRGB",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ red: any; green: any; blue: any; }",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoCMYK",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ cyan: any; magenta: any; yellow: any; key: any; }",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHEX",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHSL",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoHSV",
                    "args": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: number; saturation: any; value: any; }",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "red",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "green",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorInterpolater",
            "id": "class-ColorInterpolater-bf69d05863f8796bd56a345aa4e3cf256fd241df42a95f626889c43022200e1d0fbdecad74d5f55e0f1eff60c8cdb71cb76639bc8269d2f4368e3f625b87eb3f",
            "file": "src/app/class/color-interpolater.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Shade} from \"../models/shade.model\";\r\nimport {Color} from \"../models/color.model\";\r\n\r\nexport class ColorInterpolater {\r\n\r\n  /**\r\n   * Regenerate every shade but the fixed ones.\r\n   * @param color\r\n   */\r\n  public static regenerateShades(color: Color) {\r\n    // Get all fixed shades sorted by perceived brightness\r\n    const shades = [...color.shades]\r\n      .filter(shade => shade.fixed)\r\n      .sort((a, b) => b.brightness - a.brightness)\r\n\r\n    // Give each shade an index\r\n    const indices = [...Array(10).keys()].map(i => i * 100)\r\n    indices[0] = 50\r\n    this.distributeIndices(shades, indices)\r\n\r\n    // Calculate minimal saturation\r\n    const minimum = this.calculateMinSaturation(shades)\r\n\r\n    // Create \"white\"\r\n    const white = this.createBorderShade(shades[0], minimum, true)\r\n    shades.unshift(white)\r\n\r\n    // Create \"black\"\r\n    const black = this.createBorderShade(shades[shades.length - 1], minimum, false)\r\n    shades.push(black)\r\n\r\n\r\n    // Create missing shades\r\n    for (const index of indices) {\r\n      // Shade already exists\r\n      if (shades.some(shade => shade.index === index))\r\n        continue\r\n\r\n      // Find darker, lighter and third point\r\n      const lighter = shades.findLast(shade => shade.index < index && shade.fixed) || white\r\n      const darker = shades.find(shade => shade.index > index && shade.fixed) || black\r\n      let third = shades.findLast(shade => shade.index < lighter.index && shade.fixed)\r\n      if (!third)\r\n        third = shades.find(shade => shade.index > darker.index && shade.fixed) || black\r\n\r\n      // Interpolate properties\r\n      const hue = this.mapNumbers(index, lighter.index, darker.index,\r\n        darker.hue - lighter.hue > 180 ? (lighter.hue + 360) : lighter.hue,\r\n        lighter.hue - darker.hue > 180 ? (darker.hue + 360) : darker.hue\r\n      ) % 360\r\n      const luminosity = this.mapNumbers(index, lighter.index, darker.index, lighter.luminosity, darker.luminosity)\r\n      const saturation = this.calculateSaturation(luminosity, lighter, darker, third)\r\n\r\n      // Add shade\r\n      const shade = new Shade(index, false, hue, saturation, luminosity)\r\n      shades.push(shade)\r\n    }\r\n\r\n\r\n    // Filter \"black\" and \"white\" and sort again by index\r\n    color.shades = shades\r\n      .filter(shade => !(shade.index === 0 || shade.index === 1200))\r\n      .sort((a, b) => a.index - b.index)\r\n  }\r\n\r\n\r\n  /**\r\n   * Distribute fixed indices from `[50, 100, 200, ..., 900]` to all shades by perceived brightness.\r\n   * Every index will only appear once.\r\n   * This is done by shifting a duplicate index to the next one.\r\n   *\r\n   * **Help wanted:** This algorithm could be improved by calculating penalty points for shifting, generating multiple variants and choosing the one with the fewest penalty points.\r\n   * @param shades\r\n   * @param indices\r\n   */\r\n  private static distributeIndices(shades: Shade[], indices: number[]) {\r\n    shades.forEach(shade => {\r\n      const mapBrightness = Math.max(Math.min(1250 - 12.5 * shade.brightness, 999), 1)\r\n      const index = indices.reduce((prev, curr) =>\r\n        Math.abs(mapBrightness - curr) < Math.abs(mapBrightness - prev) ? curr : prev\r\n      )\r\n      shade.setIndex(index)\r\n    })\r\n\r\n    this.offsetIndicesFromLightest(shades)\r\n  }\r\n\r\n\r\n  /**\r\n   * Offset indices from lightest to darkest so no index appears multiple times.\r\n   * @param shades\r\n   */\r\n  private static offsetIndicesFromLightest(shades: Shade[]) {\r\n    let minIndex = 0\r\n    for (let i = 0; i < shades.length; i++) {\r\n      const shade = shades[i]\r\n\r\n      if (minIndex >= shade.index) {\r\n        if (minIndex < 900) {\r\n          shade.setIndex(minIndex + 100 - minIndex % 100)\r\n        } else {\r\n          shade.setIndex(900)\r\n          this.offsetIndicesFromDarkest(shades, i)\r\n        }\r\n      }\r\n\r\n      minIndex = shade.index\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Offset indices from darkest to lightest so the index of `shades[start]` is the biggest and no index appears multiple times.\r\n   * @param shades\r\n   * @param start\r\n   */\r\n  private static offsetIndicesFromDarkest(shades: Shade[], start: number) {\r\n    let maxIndex = shades[start].index\r\n    for (let j = start - 1; j >= 0; j--) {\r\n      const brighter = shades[j]\r\n\r\n      if (maxIndex > brighter.index)\r\n        return\r\n\r\n      brighter.setIndex(maxIndex -= 100)\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Calculate the lowest saturation using the current lowest offset with an adjusted one.\r\n   *\r\n   * Returns an object including the calculated saturation alongside the brightness of the shade with the lowest saturation.\r\n   * @param shades\r\n   */\r\n  private static calculateMinSaturation(shades: Shade[]) {\r\n    const shadeWithLowestSaturation = shades.reduce((prev, curr) =>\r\n      curr.saturation < prev.saturation ? curr : prev\r\n    )\r\n    const differenceFromMiddleSquared = Math.pow(50 - shadeWithLowestSaturation.brightness, 2)\r\n    const evenLowerSaturation = Math.max(shadeWithLowestSaturation.saturation - 0.01 * differenceFromMiddleSquared, 0)\r\n    return {\r\n      saturation: Math.round((shadeWithLowestSaturation.saturation + evenLowerSaturation) / 2),\r\n      brightness: shadeWithLowestSaturation.brightness\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates the most extreme shades (\"black\" and \"white\").\r\n   * This is done with respect to the hue of the current lightest and darkest shades alongside the minimal saturation and brightness of the current color.\r\n   * @param shade\r\n   * @param minimum\r\n   * @param white\r\n   * @private\r\n   */\r\n  private static createBorderShade(shade: Shade, minimum: { saturation: number, brightness: number }, white: boolean) {\r\n    const index = white ? 0 : 1000\r\n    const hue = this.calculateHue(shade, white)\r\n    const saturation = this.calculateMaxSaturation(minimum, shade, index)\r\n    const luminosity = (1000 - index) / 10\r\n\r\n    return new Shade(white ? 0 : 1200, true, hue, saturation, luminosity);\r\n  }\r\n\r\n\r\n  /**\r\n   * Calculate the hue of the lightest and darkest shades with the hue of the nearest neighbor in mind.\r\n   * If we want to create a lighter shade, we rotate in direction 60, 180 and 300 degree respectively.\r\n   * If we want to create a darker shade, we rotate in direction 0, 120 and 240 degree respectively.\r\n   * @param shade\r\n   * @param white\r\n   */\r\n  private static calculateHue(shade: Shade, white: boolean) {\r\n    const hueAdjustmentDirection = shade.hue < 60\r\n    || 120 < shade.hue && shade.hue < 180\r\n    || 240 < shade.hue && shade.hue < 300 ? 1 : -1\r\n\r\n    let hue = shade.hue\r\n      + hueAdjustmentDirection * (white ? 1 : -1)\r\n      * (white ? shade.index : (1000 - shade.index)) / 60\r\n\r\n    if (white) {\r\n      if (shade.hue <= 60 && hue > 60 || shade.hue >= 60 && hue < 60) {\r\n        hue = 60\r\n      } else if (shade.hue <= 180 && hue > 180 || shade.hue >= 180 && hue < 180) {\r\n        hue = 180\r\n      } else if (shade.hue <= 300 && hue > 300 || shade.hue >= 300 && hue < 300) {\r\n        hue = 300\r\n      }\r\n    } else {\r\n      if (((shade.hue > 340 && shade.hue < 360) || shade.hue === 0) && (hue > 0 && hue < 20) || (shade.hue >= 0 && shade.hue < 20) && hue < 0) {\r\n        hue = 0\r\n      } else if (shade.hue <= 120 && hue > 120 || shade.hue >= 120 && hue < 120) {\r\n        hue = 120\r\n      } else if (shade.hue <= 240 && hue > 240 || shade.hue >= 240 && hue < 240) {\r\n        hue = 240\r\n      }\r\n    }\r\n\r\n    return Math.round(360 + hue) % 360\r\n  }\r\n\r\n\r\n  /**\r\n   * Calculate the highest saturation based on a neighbor with minimal saturation and the nearest neighbor.\r\n   * @param minimum\r\n   * @param neighbor\r\n   * @param index\r\n   */\r\n  private static calculateMaxSaturation(minimum: { saturation: number, brightness: number }, neighbor: Shade, index: number) {\r\n    if (neighbor.brightness === minimum.brightness)\r\n      return Math.round(-0.01 * Math.pow(minimum.saturation, 2) + 2 * minimum.saturation)\r\n\r\n    const a = (neighbor.saturation - minimum.saturation) / Math.pow(neighbor.brightness - minimum.brightness, 2)\r\n    const maxSaturation = a * Math.pow((index / 10) - minimum.brightness, 2) + minimum.saturation\r\n\r\n    const minAdd = -0.01 * Math.pow(neighbor.saturation, 2) + 2 * neighbor.saturation\r\n\r\n    return Math.min(Math.round(Math.max(maxSaturation, minAdd, 0)), 100)\r\n  }\r\n\r\n\r\n  /**\r\n   * Map numbers on a linear 1 dimensional scale\r\n   * @param x\r\n   * @param in_min\r\n   * @param in_max\r\n   * @param out_min\r\n   * @param out_max\r\n   */\r\n  private static mapNumbers(x: number, in_min: number, in_max: number, out_min: number, out_max: number): number {\r\n    return Math.round((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)\r\n  }\r\n\r\n\r\n  /**\r\n   * Calculate the saturation by interpolating a value for the current luminosity on a quadratic 2 dimensional parable defined by three points (shades).\r\n   * @param luminosity\r\n   * @param left\r\n   * @param middle\r\n   * @param right\r\n   */\r\n  private static calculateSaturation(luminosity: number, left: Shade, middle: Shade, right: Shade) {\r\n    const ll2 = left.luminosity * left.luminosity\r\n    const ml2 = middle.luminosity * middle.luminosity\r\n    const rl2 = right.luminosity * right.luminosity\r\n\r\n    const delta = (ll2 * middle.luminosity) + (left.luminosity * rl2) + (ml2 * right.luminosity) - (middle.luminosity * rl2) - (ll2 * right.luminosity) - (left.luminosity * ml2) || 0.01\r\n    const aNumerator = (left.saturation * middle.luminosity) + (left.luminosity * right.saturation) + (middle.saturation * right.luminosity) - (middle.luminosity * right.saturation) - (left.saturation * right.luminosity) - (left.luminosity * middle.saturation)\r\n    const bNumerator = (ll2 * middle.saturation) + (left.saturation * rl2) + (ml2 * right.saturation) - (middle.saturation * rl2) - (ll2 * right.saturation) - (left.saturation * ml2)\r\n    const cNumerator = (ll2 * middle.luminosity * right.saturation) + (left.luminosity * middle.saturation * rl2) + (left.saturation * ml2 * right.luminosity) - (left.saturation * middle.luminosity * rl2) - (ll2 * middle.saturation * right.luminosity) - (left.luminosity * ml2 * right.saturation)\r\n\r\n    const x = aNumerator / delta\r\n    const y = bNumerator / delta\r\n    const z = cNumerator / delta\r\n\r\n    const saturation = x * luminosity * luminosity + y * luminosity + z\r\n    return Math.max(Math.min(Math.round(saturation), 100), 0)\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "calculateHue",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "white",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the hue of the lightest and darkest shades with the hue of the nearest neighbor in mind.\nIf we want to create a lighter shade, we rotate in direction 60, 180 and 300 degree respectively.\nIf we want to create a darker shade, we rotate in direction 0, 120 and 240 degree respectively.\n",
                    "description": "<p>Calculate the hue of the lightest and darkest shades with the hue of the nearest neighbor in mind.\nIf we want to create a lighter shade, we rotate in direction 60, 180 and 300 degree respectively.\nIf we want to create a darker shade, we rotate in direction 0, 120 and 240 degree respectively.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6231,
                                "end": 6236,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6225,
                                "end": 6230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6250,
                                "end": 6255,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "white"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6244,
                                "end": 6249,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "calculateMaxSaturation",
                    "args": [
                        {
                            "name": "minimum",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "neighbor",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the highest saturation based on a neighbor with minimal saturation and the nearest neighbor.\n",
                    "description": "<p>Calculate the highest saturation based on a neighbor with minimal saturation and the nearest neighbor.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7514,
                                "end": 7521,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minimum"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7508,
                                "end": 7513,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7535,
                                "end": 7543,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "neighbor"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7529,
                                "end": 7534,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7557,
                                "end": 7562,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7551,
                                "end": 7556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "calculateMinSaturation",
                    "args": [
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ saturation: any; brightness: any; }",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the lowest saturation using the current lowest offset with an adjusted one.\n\nReturns an object including the calculated saturation alongside the brightness of the shade with the lowest saturation.\n",
                    "description": "<p>Calculate the lowest saturation using the current lowest offset with an adjusted one.</p>\n<p>Returns an object including the calculated saturation alongside the brightness of the shade with the lowest saturation.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4579,
                                "end": 4585,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shades"
                            },
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4573,
                                "end": 4578,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "calculateSaturation",
                    "args": [
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "left",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "middle",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the saturation by interpolating a value for the current luminosity on a quadratic 2 dimensional parable defined by three points (shades).\n",
                    "description": "<p>Calculate the saturation by interpolating a value for the current luminosity on a quadratic 2 dimensional parable defined by three points (shades).</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8780,
                                "end": 8790,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "luminosity"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8774,
                                "end": 8779,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8804,
                                "end": 8808,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "left"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8798,
                                "end": 8803,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8822,
                                "end": 8828,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "middle"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8816,
                                "end": 8821,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8842,
                                "end": 8847,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "right"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8836,
                                "end": 8841,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "createBorderShade",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minimum",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "white",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates the most extreme shades (\"black\" and \"white\").\nThis is done with respect to the hue of the current lightest and darkest shades alongside the minimal saturation and brightness of the current color.\n",
                    "description": "<p>Creates the most extreme shades (&quot;black&quot; and &quot;white&quot;).\nThis is done with respect to the hue of the current lightest and darkest shades alongside the minimal saturation and brightness of the current color.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5420,
                                "end": 5425,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5414,
                                "end": 5419,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 5439,
                                "end": 5446,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minimum"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5433,
                                "end": 5438,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 5460,
                                "end": 5465,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "white"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5454,
                                "end": 5459,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 5473,
                                "end": 5480,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "distributeIndices",
                    "args": [
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "indices",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDistribute fixed indices from `[50, 100, 200, ..., 900]` to all shades by perceived brightness.\nEvery index will only appear once.\nThis is done by shifting a duplicate index to the next one.\n\n**Help wanted:** This algorithm could be improved by calculating penalty points for shifting, generating multiple variants and choosing the one with the fewest penalty points.\n",
                    "description": "<p>Distribute fixed indices from <code>[50, 100, 200, ..., 900]</code> to all shades by perceived brightness.\nEvery index will only appear once.\nThis is done by shifting a duplicate index to the next one.</p>\n<p><strong>Help wanted:</strong> This algorithm could be improved by calculating penalty points for shifting, generating multiple variants and choosing the one with the fewest penalty points.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2795,
                                "end": 2801,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shades"
                            },
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2789,
                                "end": 2794,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2815,
                                "end": 2822,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "indices"
                            },
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2809,
                                "end": 2814,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "mapNumbers",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "in_min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "in_max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "out_min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "out_max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMap numbers on a linear 1 dimensional scale\n",
                    "description": "<p>Map numbers on a linear 1 dimensional scale</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8301,
                                "end": 8302,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "x"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8295,
                                "end": 8300,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8316,
                                "end": 8322,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "in_min"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8310,
                                "end": 8315,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8336,
                                "end": 8342,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "in_max"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8330,
                                "end": 8335,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8356,
                                "end": 8363,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "out_min"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8350,
                                "end": 8355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8377,
                                "end": 8384,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "out_max"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8371,
                                "end": 8376,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "offsetIndicesFromDarkest",
                    "args": [
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOffset indices from darkest to lightest so the index of `shades[start]` is the biggest and no index appears multiple times.\n",
                    "description": "<p>Offset indices from darkest to lightest so the index of <code>shades[start]</code> is the biggest and no index appears multiple times.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3991,
                                "end": 3997,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shades"
                            },
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3985,
                                "end": 3990,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 4011,
                                "end": 4016,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "start"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4005,
                                "end": 4010,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "offsetIndicesFromLightest",
                    "args": [
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOffset indices from lightest to darkest so no index appears multiple times.\n",
                    "description": "<p>Offset indices from lightest to darkest so no index appears multiple times.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3365,
                                "end": 3371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shades"
                            },
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3359,
                                "end": 3364,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "regenerateShades",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegenerate every shade but the fixed ones.\n",
                    "description": "<p>Regenerate every shade but the fixed ones.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 198,
                                "end": 203,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 192,
                                "end": 197,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorNamer",
            "id": "class-ColorNamer-7b91c8675736aac7d6695b77ac6af57ec2eea6a5cb15e479c16a47727d3ca378d6961ce63c62074b426a95b1e66b45e292ddadcb5ecb91b137039cdf5283b52a",
            "file": "src/app/class/color-namer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Shade} from \"../models/shade.model\";\nimport {HttpClient, HttpXhrBackend} from \"@angular/common/http\";\n\nexport class ColorNamer {\n\n  private static colorDictionary: Entry[] = []\n  private static grayDictionary: Entry[] = []\n\n  public static loadDictionary() {\n    const http = new HttpClient(new HttpXhrBackend({\n      build: () => new XMLHttpRequest()\n    }))\n\n    http.get(\n      '/assets/color_dictionary.csv',\n      { responseType: 'text' }\n    ).subscribe(data => {\n      const list = data.split('\\n')\n      list.shift()\n\n      this.colorDictionary = list.map(entry => {\n        const split = entry.split(\";\")\n        return {\n          name: split[0],\n          hue: parseInt(split[1]),\n          saturation: parseInt(split[2]),\n          luminosity: parseInt(split[3])\n        }\n      })\n\n      this.grayDictionary.filter(color => color.hue === -1)\n    })\n  }\n\n  public static nameColor(shade: Shade) {\n    if (this.colorDictionary.length + this.grayDictionary.length === 0) {\n      console.info('Color dictionary is not loaded (yet).')\n      return shade.hex.substring(1)\n    }\n\n    const dictionary = shade.saturation === 0 ? this.grayDictionary : this.colorDictionary\n    const nearest = dictionary.reduce((prev, curr) =>\n        (this.calculateDifference(curr, shade) < this.calculateDifference(prev, shade) ? curr : prev))\n    return nearest.name\n      .replace(/(\\w)(\\w*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase())\n  }\n\n  private static calculateDifference(entry: {hue: number, saturation: number, luminosity: number}, shade: Shade) {\n    return 10 * Math.abs(entry.hue - shade.hue)\n      + 5 * Math.abs(entry.saturation - shade.saturation)\n      + Math.abs(entry.luminosity - shade.luminosity)\n  }\n\n}\n\ninterface Entry {\n\n  name: string,\n  hue: number,\n  saturation: number,\n  luminosity: number\n\n}\n",
            "properties": [
                {
                    "name": "colorDictionary",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entry[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "grayDictionary",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entry[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateDifference",
                    "args": [
                        {
                            "name": "entry",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadDictionary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "nameColor",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssCopyDialog",
            "id": "class-CssCopyDialog-427eab61e68a0a419bb10ffa861a40f48e610254479d294673c10e5e4982ecafb96c956425d74429a98792f3ae017e2e0fd7bf6f214377cf24594766f75f3da5",
            "file": "src/app/dialogs/css-copy.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {toUnicodeVariant} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class CssCopyDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#using_the_root_pseudo-class', '_blank')\r\n    })\r\n\r\n    return {\r\n      id: 'export-css-copy',\r\n      interpolateParams: {\r\n        root: toUnicodeVariant(':root', 'm'),\r\n        usage: toUnicodeVariant('color: var(--color-100);', 'm')\r\n      },\r\n      actions: [{\r\n        id: 'more',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssDialog",
            "id": "class-CssDialog-d399d2cc48c0a7dba4911e012c4d674a46268341a84dda39d7492ad6bdb27f40038edefb48e66f10c8acd3c541d3195eb420a3afac063734113b8fede78c565d",
            "file": "src/app/dialogs/css.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {PaletteExporter} from \"../class/palette-exporter\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {CssCopyDialog} from \"./css-copy.dialog\";\r\nimport {CssFileDialog} from \"./css-file.dialog\";\r\n\r\nexport class CssDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const cssCopyEmitter = new EventEmitter()\r\n    cssCopyEmitter.subscribe(() => {\r\n      const css = PaletteExporter.exportPaletteToCSS(this.palette)\r\n      navigator.clipboard.writeText(css).then(() => {\r\n        this.notification.emit(new CssCopyDialog(\r\n          this.notification\r\n        ).getNotification())\r\n      }).catch(e => {\r\n        this.notification.emit({\r\n          id: 'copy-error',\r\n          interpolateParams: {\r\n            error: e\r\n          }\r\n        })\r\n      })\r\n    })\r\n\r\n    const cssFileEmitter = new EventEmitter()\r\n    cssFileEmitter.subscribe(() => {\r\n      const css = PaletteExporter.exportCssFile(this.palette)\r\n      const blob = new Blob([css], {type: 'text/css'})\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = 'colors.css'\r\n      a.click()\r\n\r\n      this.notification.emit(new CssFileDialog(\r\n        this.notification\r\n      ).getNotification())\r\n    })\r\n\r\n    return {\r\n      id: 'export-css',\r\n      actions: [{\r\n        id: 'copy',\r\n        action: cssCopyEmitter\r\n      }, {\r\n        id: 'file',\r\n        action: cssFileEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CssFileDialog",
            "id": "class-CssFileDialog-45546977cc5a834454fe7b2094165a46d402e2919bdd8a788e620f0d913183e3ec17e7bf7c8c8db03a2c832ac183c773996f822660446f00812fd1764dc291c8",
            "file": "src/app/dialogs/css-file.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {toUnicodeVariant} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class CssFileDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#using_the_root_pseudo-class', '_blank')\r\n    })\r\n\r\n    return {\r\n      id: 'export-css-file',\r\n      interpolateParams: {\r\n        file: toUnicodeVariant('colors.css', 'm'),\r\n        link: toUnicodeVariant('<link rel=\"stylesheet\" href=\"/colors.css\">', 'm'),\r\n        usage: toUnicodeVariant('color: var(--color-100);', 'm')\r\n      },\r\n      actions: [{\r\n        id: 'more',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExportDialog",
            "id": "class-ExportDialog-f24acd14255748fbc21fd724dfd3ade4e91c824e5eee8ba318558cc1485f43bc17f9e6ba2ac9aef8c4d3008f1d3006b9e1dcbe2df2e9ac5b4ec01f6082a090b2",
            "file": "src/app/dialogs/export.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {CssDialog} from \"./css.dialog\";\r\nimport {TailwindDialog} from \"./tailwind.dialog\";\r\n\r\nexport class ExportDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const cssEmitter = new EventEmitter()\r\n    cssEmitter.subscribe(() => {\r\n      this.notification\r\n        .emit(new CssDialog(\r\n          this.notification,\r\n          this.palette\r\n        ).getNotification())\r\n    })\r\n\r\n    const tailwindEmitter = new EventEmitter()\r\n    tailwindEmitter.subscribe(() => {\r\n      this.notification\r\n        .emit(new TailwindDialog(\r\n          this.notification,\r\n          this.palette\r\n        ).getNotification())\r\n    })\r\n\r\n    return {\r\n      id: 'export-palette',\r\n      actions: [{\r\n        id: 'css',\r\n        action: cssEmitter\r\n      }, {\r\n        id: 'tailwind',\r\n        action: tailwindEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockColorService",
            "id": "class-MockColorService-d11c5902a8862b97b52dad9c7f07ef7deda61d8bf6b3ef800f3858976ac94ff36fc7dba36f58b16751c68600fdbc0d386db570ebc50ae4b86a196b9201a43c7c",
            "file": "src/app/components/color-editor/color-editor.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorEditorComponent} from \"./color-editor.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {ChangeType, ColorService} from \"../../services/color.service\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {Shade} from \"../../models/shade.model\";\r\nimport {ColorInterpolater} from \"../../class/color-interpolater\";\r\nimport {StorybookTranslateModule} from \"../../utils/storybook-translate.module\";\r\n\r\nexport default {\r\n  title: 'Components/Color Editor',\r\n  component: ColorEditorComponent\r\n} as Meta\r\n\r\nclass MockColorService implements Partial<ColorService> {\r\n\r\n  private color: Color | undefined\r\n  private shade: Shade | undefined\r\n  private colorChangeEmitter: EventEmitter<ChangeType> = new EventEmitter<ChangeType>()\r\n\r\n  constructor() {\r\n    setTimeout(() => {\r\n      this.loadColor(Color.generateRandomColor())\r\n    }, 0)\r\n  }\r\n\r\n  loadColor(color: Color, shadeIndex?: number) {\r\n    this.color = Color.parseColor(color)\r\n    if (shadeIndex)\r\n      this.shade = this.color.getShade(shadeIndex)\r\n    else\r\n      this.shade = this.color.shades.find(s => s.fixed)\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  closeEditor() {\r\n    this.color = undefined\r\n    this.shade = undefined\r\n    this.colorChangeEmitter.emit(ChangeType.LOAD)\r\n  }\r\n\r\n  adjustShades() {\r\n    if (this.color) {\r\n      ColorInterpolater.regenerateShades(this.color)\r\n      this.colorChangeEmitter.emit(ChangeType.ADJUST)\r\n    }\r\n  }\r\n\r\n  saveColor() {\r\n    if (this.color) {\r\n      console.info('Saving color')\r\n      this.closeEditor()\r\n    }\r\n  }\r\n\r\n  getColor() {\r\n    return this.color\r\n  }\r\n\r\n  getShade() {\r\n    return this.shade\r\n  }\r\n\r\n  getColorChangeEmitter() {\r\n    return this.colorChangeEmitter\r\n  }\r\n\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService,\r\n      useClass: MockColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "colorChangeEmitter",
                    "defaultValue": "new EventEmitter<ChangeType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<ChangeType>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adjustShades",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColorChangeEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "EventEmitter<ChangeType>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getShade",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shadeIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shadeIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-16cb8bad05aac1190e607b906f6350883082b99f58fd68dba9036da8731db04459a5010ca1eece3878a2d9100e27521f29d69477b9ef32c0c71ce5dbb521051a",
            "file": "src/app/components/dialog/dialog.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DialogComponent} from \"./dialog.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../../interfaces/dialog.interface\";\r\nimport {StorybookTranslateModule} from \"../../utils/storybook-translate.module\";\r\n\r\nexport default {\r\n  title: 'Components/Dialog',\r\n  component: DialogComponent\r\n} as Meta\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  dialog = new EventEmitter<Dialog | undefined>()\r\n\r\n  constructor() {\r\n    const wait = new EventEmitter()\r\n    const next = new EventEmitter()\r\n\r\n    let content: Dialog = {\r\n      id: 'test',\r\n      actions: [{\r\n        id: 'wait',\r\n        action: wait\r\n      }, {\r\n        id: 'next',\r\n        action: next\r\n      }]\r\n    }\r\n\r\n    wait.subscribe(() => {\r\n      this.dialog.emit(undefined)\r\n      setTimeout(() => {\r\n        this.dialog.emit(content)\r\n      }, 2000)\r\n    })\r\n    next.subscribe(() => {\r\n      this.dialog.emit(content)\r\n    })\r\n\r\n    setTimeout(() => {\r\n      this.dialog.emit(content)\r\n    }, 0)\r\n\r\n    this.dialog.subscribe(notification => {\r\n      if (notification)\r\n        console.log('Show dialog\\n', notification.id)\r\n      else\r\n        console.log('Close dialog')\r\n    })\r\n  }\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "properties": [
                {
                    "name": "dialog",
                    "defaultValue": "new EventEmitter<Dialog | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        },
        {
            "name": "MockNotificationService",
            "id": "class-MockNotificationService-ceab2937e3ff9ba930c6db4265a36449f462a6dd67949ff86db20694207be752694947a070a5ba81146f2452103a3c6dddff8d3342b54a942e3a1e6ef047b460-1",
            "file": "src/app/components/notification/notification.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {NotificationComponent} from \"./notification.component\";\r\nimport {Meta, Story} from \"@storybook/angular\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {EventEmitter} from \"@angular/core\";\r\nimport {StorybookTranslateModule} from \"../../utils/storybook-translate.module\";\r\n\r\nexport default {\r\n  title: 'Components/Notification',\r\n  component: NotificationComponent\r\n} as Meta\r\n\r\nclass MockNotificationService implements Partial<NotificationService> {\r\n\r\n  notification = new EventEmitter<string | { id: string, interpolateParams: Object } | undefined>()\r\n\r\n  constructor() {\r\n    const message = 'test'\r\n\r\n    setTimeout(() => {\r\n      this.notification.emit(message)\r\n    }, 0)\r\n\r\n    this.notification.subscribe(nextMessage => {\r\n      if (nextMessage) {\r\n        console.log('Show Notification\\n', nextMessage)\r\n      } else {\r\n        console.log('Close Notification')\r\n        setTimeout(() => {\r\n          this.notification.emit(message)\r\n        }, 1000)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nconst Template: Story = (args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule,\r\n    ]\r\n  }\r\n})\r\n\r\nexport const Primary = Template.bind({})\r\n\r\nPrimary.args = {\r\n  dark: false\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "properties": [
                {
                    "name": "notification",
                    "defaultValue": "new EventEmitter<string | { id: string, interpolateParams: Object } | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MockNotificationService-1"
        },
        {
            "name": "Palette",
            "id": "class-Palette-00192e354a35050bc0879781becc6a73cc7c10a4196b12b8612ff1a4aa64dcfab51ca7eabde33bec001ac64a433596278ae94da6400978c1070a1351613b1021",
            "file": "src/app/models/palette.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Color} from \"./color.model\";\r\n// @ts-ignore\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nexport class Palette {\r\n\r\n  title: string\r\n  id: string\r\n  colors: Color[] = []\r\n  order = false\r\n\r\n  constructor(title: string, id?: string) {\r\n    this.title = title\r\n    this.id = id || uuidv4()\r\n  }\r\n\r\n  /**\r\n   * Add a color to the beginning of the palette.\r\n   * @param color\r\n   * @param front\r\n   */\r\n  public addColor(color: Color, front = true) {\r\n    if (this.colors.find(c => c.name === color.name)) {\r\n      this.colors[this.colors.findIndex(c => c.name === color.name)] = color\r\n    } else {\r\n      if (front)\r\n        this.colors.unshift(color)\r\n      else\r\n        this.colors.push(color)\r\n    }\r\n\r\n    this.order = false\r\n  }\r\n\r\n  /**\r\n   * Remove the color from the palette\r\n   * @param color\r\n   */\r\n  public removeColor(color: Color) {\r\n    const index = this.colors.indexOf(color)\r\n    if (index > -1) {\r\n      this.colors.splice(index, 1)\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace color with same name\r\n   * @param color\r\n   */\r\n  replaceColor(color: Color) {\r\n    let index = this.colors.findIndex(c => c.name === color.name)\r\n    if (index < 0)\r\n      this.addColor(color, false)\r\n    else\r\n      this.colors[index] = color\r\n  }\r\n\r\n  /**\r\n   * Sort all colors of the palette by hue\r\n   */\r\n  public sortColors() {\r\n    this.colors.sort((a, b) => {\r\n      if (this.order)\r\n        return a.getShade(500).hue - b.getShade(500).hue\r\n      else\r\n        return b.getShade(500).hue - a.getShade(500).hue\r\n    })\r\n    this.order = !this.order\r\n  }\r\n\r\n  /**\r\n   * Stringify the palette.\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      id: this.id,\r\n      title: this.title,\r\n      colors: this.colors\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a palette.\r\n   * Throws exception if not all values are given.\r\n   * @param json\r\n   */\r\n  public static parsePalette(json: any): Palette {\r\n    if (!json.title)\r\n      throw 'Palette has no title'\r\n    if (!json.id)\r\n      throw 'Palette has no id'\r\n    if (!json.colors)\r\n      throw 'Palette has no colors'\r\n\r\n    const palette = new Palette(json.title, json.id)\r\n\r\n    for (const color of json.colors) {\r\n      palette.addColor(Color.parseColor(color))\r\n    }\r\n    palette.colors.reverse()\r\n\r\n    return palette\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "order",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "addColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "front",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a color to the beginning of the palette.\n",
                    "description": "<p>Add a color to the beginning of the palette.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 367,
                                "end": 372,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 361,
                                "end": 366,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 386,
                                "end": 391,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "front"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 380,
                                "end": 385,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "parsePalette",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a palette.\nThrows exception if not all values are given.\n",
                    "description": "<p>Parse the json object to a palette.\nThrows exception if not all values are given.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1902,
                                "end": 1906,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1896,
                                "end": 1901,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove the color from the palette\n",
                    "description": "<p>Remove the color from the palette</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 796,
                                "end": 801,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 790,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "replaceColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReplace color with same name\n",
                    "description": "<p>Replace color with same name</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1074,
                                "end": 1079,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1068,
                                "end": 1073,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "sortColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSort all colors of the palette by hue\n",
                    "description": "<p>Sort all colors of the palette by hue</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStringify the palette.\n",
                    "description": "<p>Stringify the palette.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaletteExporter",
            "id": "class-PaletteExporter-a28f6a5dedd5d0fb2c5d232b8cd86a21e2569888bfcd9c1d816fb62f1a3332d7c608decd460de1310fafb440f616a180d2a91541994d351612dfd91eb6a3b2fd",
            "file": "src/app/class/palette-exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Palette} from \"../models/palette.model\";\r\nimport {Color} from \"../models/color.model\";\r\nimport {Shade} from \"../models/shade.model\";\r\n\r\nexport class PaletteExporter {\r\n\r\n  /**\r\n   * Export a palette for usage in a separate colors.css file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportCssFile(palette: Palette) {\r\n    return `:root {\\n\\t${this.exportPaletteToCSS(palette).replace(/\\n/g, '\\n\\t')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in plain CSS as CSS properties.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToCSS(palette: Palette) {\r\n    return `/* Color palette generated by ${window.location.origin} */\\n\\n${palette.colors.map(c => this.exportColorToCSS(c)).join('\\n\\n')}`\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in plain CSS as CSS properties.\r\n   * @param color Color to export\r\n   * @private\r\n   */\r\n  private static exportColorToCSS(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return color.shades.map(s => this.exportShadeToCSS(s, name)).join('\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in plain CSS as CSS property.\r\n   * @param shade Shade to export\r\n   * @param name Name of the color\r\n   * @private\r\n   */\r\n  private static exportShadeToCSS(shade: Shade, name: string) {\r\n    return `--${name}-${shade.index}:${shade.index < 100 ? ' ' : ''} ${shade.hex};`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in a separate tailwind.colors.js file.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportTailwindFile(palette: Palette) {\r\n    return `module.exports = {\\n\\t${this.exportPaletteToTailwind(palette).replace(/\\n/g, '\\n\\t')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a palette for usage in TailwindCSS.\r\n   * @param palette Palette to export\r\n   */\r\n  static exportPaletteToTailwind(palette: Palette) {\r\n    return palette.colors.map(c => this.exportColorToTailwind(c)).join(',\\n')\r\n  }\r\n\r\n  /**\r\n   * Export a color for usage in TailwindCSS.\r\n   * @param color Color to export\r\n   * @private\r\n   */\r\n  private static exportColorToTailwind(color: Color) {\r\n    const name = color.name.replace(/\\s+/g, '-').toLowerCase()\r\n    return `'${name}': {\\n${color.shades.map(s => this.exportShadeToTailwind(s)).join(',\\n')}\\n}`\r\n  }\r\n\r\n  /**\r\n   * Export a shade for usage in TailwindCSS.\r\n   * @param shade Shade to export\r\n   * @private\r\n   */\r\n  private static exportShadeToTailwind(shade: Shade) {\r\n    return `\\t${shade.index}:${shade.index < 100 ? ' ' : ''} '${shade.hex}'`\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "exportColorToCSS",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a color for usage in plain CSS as CSS properties.\n",
                    "description": "<p>Export a color for usage in plain CSS as CSS properties.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 831,
                                "end": 836,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 825,
                                "end": 830,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 860,
                                "end": 867,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportColorToTailwind",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a color for usage in TailwindCSS.\n",
                    "description": "<p>Export a color for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1985,
                                "end": 1990,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1979,
                                "end": 1984,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2014,
                                "end": 2021,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportCssFile",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in a separate colors.css file.\n",
                    "description": "<p>Export a palette for usage in a separate colors.css file.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 261,
                                "end": 268,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 255,
                                "end": 260,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportPaletteToCSS",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in plain CSS as CSS properties.\n",
                    "description": "<p>Export a palette for usage in plain CSS as CSS properties.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 517,
                                "end": 524,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 511,
                                "end": 516,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportPaletteToTailwind",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in TailwindCSS.\n",
                    "description": "<p>Export a palette for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1745,
                                "end": 1752,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1739,
                                "end": 1744,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportShadeToCSS",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a shade for usage in plain CSS as CSS property.\n",
                    "description": "<p>Export a shade for usage in plain CSS as CSS property.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1155,
                                "end": 1160,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1149,
                                "end": 1154,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Shade to export</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1190,
                                "end": 1194,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1184,
                                "end": 1189,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Name of the color</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1220,
                                "end": 1227,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportShadeToTailwind",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a shade for usage in TailwindCSS.\n",
                    "description": "<p>Export a shade for usage in TailwindCSS.</p>\n",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2322,
                                "end": 2327,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2316,
                                "end": 2321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Shade to export</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2351,
                                "end": 2358,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "exportTailwindFile",
                    "args": [
                        {
                            "name": "palette",
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for usage in a separate tailwind.colors.js file.\n",
                    "description": "<p>Export a palette for usage in a separate tailwind.colors.js file.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1484,
                                "end": 1491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "palette"
                            },
                            "type": "Palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1478,
                                "end": 1483,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Palette to export</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaletteGenerator",
            "id": "class-PaletteGenerator-c5b08dfafa12e93bfaee08078c46d0b5956448721b0184aa35f8fc362987f15443f8ac756e91f4babd18ac602dbcab9c60075aeaeed8b8d900905cca90cee558",
            "file": "src/app/class/palette-generator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Shade} from \"../models/shade.model\";\nimport {Palette} from \"../models/palette.model\";\nimport {Color} from \"../models/color.model\";\nimport {ColorNamer} from \"./color-namer\";\n\nexport class PaletteGenerator {\n\n  static generatePalette(hex: string, scheme: PaletteScheme): Palette {\n    const shade = new Shade(-1, true, hex)\n\n    const values = Object.values(PaletteScheme)\n    const value = values.indexOf(scheme) % (values.length / 2)\n\n    switch (value) {\n      case PaletteScheme.MONOCHROMATIC:\n        return this.generateMonochromaticPalette(shade)\n      case PaletteScheme.ANALOGOUS:\n        return this.generateAnalogousPalette(shade)\n      case PaletteScheme.COMPLEMENTARY:\n        return this.generateComplementaryPalette(shade)\n      case PaletteScheme.SPLIT:\n        return this.generateSplitPalette(shade)\n      case PaletteScheme.TRIADIC:\n        return this.generateTriadicPalette(shade)\n      case PaletteScheme.COMPOUND:\n        return this.generateCompoundPalette(shade)\n      case PaletteScheme.RAINBOW:\n        return this.generateRainbowPalette(shade)\n      default:\n        const schemes = Object.keys(PaletteScheme)\n        const index = schemes[Math.floor(Math.random() * schemes.length)]\n        // @ts-ignore\n        return this.generatePalette(hex, PaletteScheme[index])\n    }\n  }\n\n  private static generateMonochromaticPalette(shade: Shade) {\n    const monochromatic = new Palette('Monochrom')\n\n    monochromatic.addColor(new Color('primary', [shade]))\n    monochromatic.addColor(new Color('muted', [\n      new Shade(-1, true, shade.hue, 30, 50)\n    ]), false)\n    monochromatic.addColor(new Color('gray', [\n      new Shade(-1, true, shade.hue, 2, 50)\n    ]), false)\n\n    return monochromatic\n  }\n\n  private static generateAnalogousPalette(shade: Shade) {\n    const analogous = new Palette('Analogous')\n\n    analogous.addColor(new Color('primary', [shade]))\n\n    analogous.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 315), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    analogous.addColor(new Color('secondary muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 270), 25, 20)\n    ]), false)\n\n    analogous.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 45), shade.saturation, 50)\n    ]), false)\n    analogous.addColor(new Color('accent muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 90) % 360, 25, 20)\n    ]), false)\n\n    return analogous\n  }\n\n  private static generateComplementaryPalette(shade: Shade) {\n    const complementary = new Palette('Complementary')\n\n    complementary.addColor(new Color('primary', [shade]))\n\n    complementary.addColor(new Color('gray', [\n      new Shade(-1, true, shade.hue, 3, 50)\n    ]), false)\n\n    complementary.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 180), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n\n    return complementary\n  }\n\n  private static generateSplitPalette(shade: Shade) {\n    const split = new Palette('Split')\n\n    split.addColor(new Color('primary', [shade]))\n\n    split.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 20), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    split.addColor(new Color('gray', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 20), 3, 50)\n    ]), false)\n\n    split.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 180), shade.saturation, 80)\n    ]), false)\n\n    return split\n  }\n\n  private static generateTriadicPalette(shade: Shade) {\n    const triadic = new Palette('Triadic')\n\n    triadic.addColor(new Color('primary', [shade]))\n\n    triadic.addColor(new Color('primary muted', [\n      new Shade(-1, true, shade.hue, 20, 30)\n    ]), false)\n\n    triadic.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 120), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n    triadic.addColor(new Color('secondary muted', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 120), 20, 30)\n    ]), false)\n\n    triadic.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 240), shade.saturation, 20)\n    ]), false)\n\n    return triadic\n  }\n\n  private static generateCompoundPalette(shade: Shade) {\n    const compound = new Palette('Compound')\n\n    compound.addColor(new Color('primary', [shade]))\n\n    compound.addColor(new Color('secondary', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 210), Math.max(shade.saturation - 20, 0), 40)\n    ]), false)\n\n    compound.addColor(new Color('accent', [\n      new Shade(-1, true, this.changeHueOnWheel(shade.hue, 150), shade.saturation, 50)\n    ]), false)\n\n    return compound\n  }\n\n  private static generateRainbowPalette(shade: Shade) {\n    const rainbow = new Palette('Rainbow')\n\n    rainbow.addColor(new Color('primary', [shade]))\n\n    const hues = [4, 26, 55, 95, 149, 200, 253]\n    let currentHue = hues.reduce((prev, curr) =>\n      (Math.abs(curr - shade.hue) < Math.abs(prev - shade.hue) ? curr : prev))\n    if (currentHue === 253 && shade.hue > 308)\n      currentHue = 4\n\n    hues.forEach(hue => {\n      if (hue !== currentHue) {\n        let newHue = (shade.hue + (hue - currentHue) + 360) % 360\n        const newShade = new Shade(-1, true,\n          newHue,\n          Math.min(100, Math.max(0, shade.saturation - 20 + Math.floor(Math.random() * 40))),\n          Math.min(100, Math.max(0, shade.luminosity - 20 + Math.floor(Math.random() * 40)))\n        )\n        rainbow.addColor(new Color(ColorNamer.nameColor(newShade), [newShade]), false)\n      }\n    })\n\n    return rainbow\n  }\n\n  private static changeHueOnWheel(hue: number, change: number) {\n    let wheel\n    if (hue < 60)\n      wheel = 2 * hue\n    else if (hue < 120)\n      wheel = hue + 60\n    else if (hue < 240)\n      wheel = .5 * hue + 120\n    else\n      wheel = hue\n\n    wheel += change\n    wheel %= 360\n\n    let newHue\n    if (wheel < 120)\n      newHue = .5 * wheel\n    else if (wheel < 180)\n      newHue = wheel + 300\n    else if (wheel < 240)\n      newHue = 2 * wheel + 120\n    else\n      newHue = wheel\n\n    return newHue % 360\n  }\n\n}\n\nexport enum PaletteScheme {\n  RAINBOW,\n  SURPRISE_ME,\n  MONOCHROMATIC,\n  ANALOGOUS,\n  COMPLEMENTARY,\n  SPLIT,\n  TRIADIC,\n  COMPOUND\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "changeHueOnWheel",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "change",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "change",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateAnalogousPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateComplementaryPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCompoundPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateMonochromaticPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePalette",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Palette",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateRainbowPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateSplitPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateTriadicPalette",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Shade",
            "id": "class-Shade-759d0fa12fad5512b5fdac3223db6fb2e02f1732acee071e4bf36b479932b823af5844512ee814c867b4ba47640bd57749af38b8aded156fa30fcfda2559458b",
            "file": "src/app/models/shade.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorConverter} from \"../class/color-converter\";\r\n\r\nexport class Shade {\r\n\r\n  index: number\r\n  hex: string\r\n  hue: number\r\n  saturation: number\r\n  luminosity: number\r\n  brightness: number = 0\r\n  fixed: boolean\r\n\r\n  public constructor(index: number, fixed: boolean, hex: string)\r\n  public constructor(index: number, fixed: boolean, hue: number, saturation: number, luminosity: number)\r\n  public constructor(index: number, fixed: boolean, hex: string, hue: number, saturation: number, luminosity: number)\r\n\r\n  constructor(...args: any[]) {\r\n    this.index = args[0]\r\n    this.fixed = args[1]\r\n\r\n    if (args.length === 3) {\r\n      if (!args[2].match(/^#[0-9A-Fa-f]{6}$/))\r\n        throw `Color ${args[2]} is not in form #RRGGBB.`\r\n\r\n      this.hex = args[2].toUpperCase()\r\n      const hsl = ColorConverter.HEXtoHSL(this.hex)\r\n      this.hue = hsl.hue\r\n      this.saturation = hsl.saturation\r\n      this.luminosity = hsl.luminosity\r\n      this.updateBrightness()\r\n    } else if (args.length === 5) {\r\n      this.hue = args[2]\r\n      this.saturation = args[3]\r\n      this.luminosity = args[4]\r\n      this.hex = ColorConverter.HSLtoHEX(this.hue, this.saturation, this.luminosity)\r\n      this.updateBrightness()\r\n    } else {\r\n      if (!args[2].match(/^#[0-9A-Fa-f]{6}$/))\r\n        throw `Color ${args[2]} is not in form #RRGGBB.`\r\n\r\n      this.hex = args[2].toUpperCase()\r\n      this.hue = args[3]\r\n      this.saturation = args[4]\r\n      this.luminosity = args[5]\r\n      this.updateBrightness()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the shades index\r\n   * @param index\r\n   */\r\n  public setIndex(index: number) {\r\n    this.index = index\r\n  }\r\n\r\n  /**\r\n   * Set the shades HEX value and update all other properties\r\n   * @param hex\r\n   * @param fixed\r\n   */\r\n  public setHEX(hex: string, fixed = false) {\r\n    if (!hex.match(/^#[0-9A-Fa-f]{6}$/))\r\n      throw `Color ${hex} is not in form #RRGGBB.`\r\n\r\n    this.fixed = fixed\r\n    this.hex = hex.toUpperCase()\r\n    const hsl = ColorConverter.HEXtoHSL(this.hex)\r\n    this.hue = hsl.hue\r\n    this.saturation = hsl.saturation\r\n    this.luminosity = hsl.luminosity\r\n    this.updateBrightness()\r\n  }\r\n\r\n  /**\r\n   * Set the shades HSL values and update all other properties\r\n   * @param hue\r\n   * @param saturation\r\n   * @param luminosity\r\n   * @param fixed\r\n   */\r\n  public setHSL(hue: number, saturation: number, luminosity: number, fixed = false) {\r\n    this.fixed = fixed\r\n    this.hue = hue\r\n    this.saturation = saturation\r\n    this.luminosity = luminosity\r\n    this.hex = ColorConverter.HSLtoHEX(this.hue, this.saturation, this.luminosity)\r\n    this.updateBrightness()\r\n  }\r\n\r\n  /**\r\n   * Update perceived brightness\r\n   * @private\r\n   */\r\n  private updateBrightness() {\r\n    const rgb = ColorConverter.HEXtoRGB(this.hex)\r\n    this.brightness = Math.round(\r\n      Math.sqrt(\r\n        .299 * rgb.red * rgb.red +\r\n        .587 * rgb.green * rgb.green +\r\n        .114 * rgb.blue * rgb.blue\r\n      ) / 2.55\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Generate a random shade.\r\n   */\r\n  public static generateRandomShade(): Shade {\r\n    return new Shade(\r\n      0,\r\n      true,\r\n      Math.floor(Math.random() * 360),\r\n      30 + Math.floor(Math.random() * 60),\r\n      25 + Math.floor(Math.random() * 50)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Parse the json object to a shade.\r\n   * Throws exception if json object is no valid shade object.\r\n   * @param json\r\n   */\r\n  public static parseShade(json: any): Shade {\r\n    if ((!json.index && json.index !== 0)\r\n        || !json.hex\r\n        || (!json.hue && json.hue !== 0)\r\n        || (!json.saturation && json.saturation !== 0)\r\n        || (!json.luminosity && json.luminosity !== 0))\r\n      throw 'Not all parameters for shade are set'\r\n\r\n    return new Shade(json.index, json.fixed, json.hex.toUpperCase(), json.hue, json.saturation, json.luminosity)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "brightness",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "fixed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "hex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "luminosity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "generateRandomShade",
                    "args": [],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate a random shade.\n",
                    "description": "<p>Generate a random shade.</p>\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "parseShade",
                    "args": [
                        {
                            "name": "json",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Shade",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse the json object to a shade.\nThrows exception if json object is no valid shade object.\n",
                    "description": "<p>Parse the json object to a shade.\nThrows exception if json object is no valid shade object.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3367,
                                "end": 3371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3361,
                                "end": 3366,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setHEX",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the shades HEX value and update all other properties\n",
                    "description": "<p>Set the shades HEX value and update all other properties</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1723,
                                "end": 1726,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1717,
                                "end": 1722,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1740,
                                "end": 1745,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fixed"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 1734,
                                "end": 1739,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setHSL",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "luminosity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the shades HSL values and update all other properties\n",
                    "description": "<p>Set the shades HSL values and update all other properties</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2225,
                                "end": 2228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2219,
                                "end": 2224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2242,
                                "end": 2252,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "saturation"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2236,
                                "end": 2241,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2266,
                                "end": 2276,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "luminosity"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2260,
                                "end": 2265,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2290,
                                "end": 2295,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fixed"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 2284,
                                "end": 2289,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the shades index\n",
                    "description": "<p>Set the shades index</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1560,
                                "end": 1565,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1554,
                                "end": 1559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateBrightness",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate perceived brightness\n",
                    "description": "<p>Update perceived brightness</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2670,
                                "end": 2677,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindCopyDialog",
            "id": "class-TailwindCopyDialog-8516050ee864bfb59e215399e6755d0909e63ef3ace2a91acda3b9f999b887354612c0c6030a2df64cc12b4f3e27f92abbbb7216590feefb97365f767a1638ea",
            "file": "src/app/dialogs/tailwind-copy.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {toUnicodeVariant} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindCopyDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://tailwindcss.com/docs/customizing-colors#color-object-syntax', '_blank')\r\n    })\r\n\r\n    return {\r\n      id: 'export-tailwind-copy',\r\n      interpolateParams: {\r\n        config: toUnicodeVariant('tailwind.config.js', 'm')\r\n      },\r\n      actions: [{\r\n        id: 'more',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindDialog",
            "id": "class-TailwindDialog-07d1e00ee10a8399f60ce55617bc9baa18bf653203e6176b225917ac75334ed9ef88d6cc49ba17890c2eeff5a24fa84ca5fae38291bc79c4c72df48632823799",
            "file": "src/app/dialogs/tailwind.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {PaletteExporter} from \"../class/palette-exporter\";\r\nimport {Palette} from \"../models/palette.model\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport {TailwindCopyDialog} from \"./tailwind-copy.dialog\";\r\nimport {TailwindFileDialog} from \"./tailwind-file.dialog\";\r\nimport {toUnicodeVariant} from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n    private palette: Palette,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const tailwindCopyEmitter = new EventEmitter()\r\n    tailwindCopyEmitter.subscribe(() => {\r\n      const tailwind = PaletteExporter.exportPaletteToTailwind(this.palette)\r\n      navigator.clipboard.writeText(tailwind).then(() => {\r\n        this.notification.emit(new TailwindCopyDialog(\r\n          this.notification\r\n        ).getNotification())\r\n      }).catch(e => {\r\n        this.notification.emit({\r\n          id: 'copy-error',\r\n          interpolateParams:{\r\n            error: e\r\n          }\r\n        })\r\n      })\r\n    })\r\n\r\n    const tailwindFileEmitter = new EventEmitter()\r\n    tailwindFileEmitter.subscribe(() => {\r\n      const tailwind = PaletteExporter.exportTailwindFile(this.palette)\r\n      const blob = new Blob([tailwind], {type: 'text/javascript'})\r\n\r\n      const a = document.createElement('a')\r\n      a.href = URL.createObjectURL(blob)\r\n      a.download = 'tailwind.colors.js'\r\n      a.click()\r\n\r\n      this.notification.emit(new TailwindFileDialog(\r\n        this.notification\r\n      ).getNotification())\r\n    })\r\n\r\n    return {\r\n      id: 'export-tailwind',\r\n      interpolateParams: {\r\n        file: toUnicodeVariant('tailwind.colors.js', 'm'),\r\n      },\r\n      actions: [{\r\n        id: 'copy',\r\n        action: tailwindCopyEmitter\r\n      }, {\r\n        id: 'file',\r\n        action: tailwindFileEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "type": "Palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TailwindFileDialog",
            "id": "class-TailwindFileDialog-2e8dbc7362a53be18decfde0a3516bb27e0552c934aeeffa54d7e6d02094a443524e3bb11812de0a6ac25cdbe90f448d79b5ceebbfbc70bd57409208e0691c24",
            "file": "src/app/dialogs/tailwind-file.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {EventEmitter} from \"@angular/core\";\r\nimport {Dialog} from \"../interfaces/dialog.interface\";\r\nimport { toUnicodeVariant } from \"../utils/to-unicode-variant.util\";\r\n\r\nexport class TailwindFileDialog {\r\n\r\n  constructor(\r\n    private notification: EventEmitter<Dialog | undefined>,\r\n  ) { }\r\n\r\n  getNotification(): Dialog {\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notification.emit(undefined)\r\n    })\r\n\r\n    const docEmitter = new EventEmitter()\r\n    docEmitter.subscribe(() => {\r\n      window.open('https://tailwindcss.com/docs/customizing-colors#using-the-default-colors', '_blank')\r\n    })\r\n\r\n    return {\r\n      id: 'export-tailwind-file',\r\n      interpolateParams: {\r\n        file: toUnicodeVariant('tailwind.colors.js', 'm'),\r\n        config: toUnicodeVariant('tailwind.config.js', 'm'),\r\n        'import': toUnicodeVariant('colors: require(\\'./tailwind.colors\\'),', 'm')\r\n      },\r\n      actions: [{\r\n        id: 'more',\r\n        action: docEmitter\r\n      }]\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "notification",
                        "type": "EventEmitter<Dialog | undefined>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Dialog",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-804d88fdcee3f18d5d3dddb477ee5f0d7e2c6edf2e729c6c3606479484c69e33a478137147ab43d78f34ef4dd379368e6e21e886a175f202a91a267e828c8a0a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "navigation",
                    "defaultValue": "[{\r\n    link: '/',\r\n    id: 'home',\r\n    icon: '<path d=\"M2.25 4.125c0-1.036.84-1.875 1.875-1.875h5.25c1.036 0 1.875.84 1.875 1.875V17.25a4.5 4.5 0 11-9 0V4.125zm4.5 14.25a1.125 1.125 0 100-2.25 1.125 1.125 0 000 2.25z\" />' +\r\n      '<path d=\"M10.719 21.75h9.156c1.036 0 1.875-.84 1.875-1.875v-5.25c0-1.036-.84-1.875-1.875-1.875h-.14l-8.742 8.743c-.09.089-.18.175-.274.257zM12.738 17.625l6.474-6.474a1.875 1.875 0 000-2.651L15.5 4.787a1.875 1.875 0 00-2.651 0l-.1.099V17.25c0 .126-.003.251-.01.375z\" />',\r\n  }, {\r\n    link: '/edit',\r\n    id: 'edit',\r\n    icon: '<path d=\"M18.75 12.75h1.5a.75.75 0 000-1.5h-1.5a.75.75 0 000 1.5zM12 6a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 0112 6zM12 18a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 0112 18zM3.75 6.75h1.5a.75.75 0 100-1.5h-1.5a.75.75 0 000 1.5zM5.25 18.75h-1.5a.75.75 0 010-1.5h1.5a.75.75 0 010 1.5zM3 12a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 013 12zM9 3.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5zM12.75 12a2.25 2.25 0 114.5 0 2.25 2.25 0 01-4.5 0zM9 15.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5z\" />',\r\n  }, {\r\n    link: '/preview',\r\n    id: 'preview',\r\n    icon: '<path fill-rule=\"evenodd\" d=\"M1.5 7.125c0-1.036.84-1.875 1.875-1.875h6c1.036 0 1.875.84 1.875 1.875v3.75c0 1.036-.84 1.875-1.875 1.875h-6A1.875 1.875 0 011.5 10.875v-3.75zm12 1.5c0-1.036.84-1.875 1.875-1.875h5.25c1.035 0 1.875.84 1.875 1.875v8.25c0 1.035-.84 1.875-1.875 1.875h-5.25a1.875 1.875 0 01-1.875-1.875v-8.25zM3 16.125c0-1.036.84-1.875 1.875-1.875h5.25c1.036 0 1.875.84 1.875 1.875v2.25c0 1.035-.84 1.875-1.875 1.875h-5.25A1.875 1.875 0 013 18.375v-2.25z\" clip-rule=\"evenodd\" />',\r\n  }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "paletteService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaletteService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Rainbow Palette | Get your own color palette from just a single color'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "version",
                    "defaultValue": "environment.version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\r\nimport {environment} from \"../environments/environment\";\r\nimport {StorageService} from \"./services/storage.service\";\r\nimport {PaletteService} from \"./services/palette.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {ColorNamer} from \"./class/color-namer\";\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\nimport {Title} from \"@angular/platform-browser\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n\r\n  title = 'Rainbow Palette | Get your own color palette from just a single color'\r\n  version = environment.version\r\n  dark\r\n\r\n  navigation = [{\r\n    link: '/',\r\n    id: 'home',\r\n    icon: '<path d=\"M2.25 4.125c0-1.036.84-1.875 1.875-1.875h5.25c1.036 0 1.875.84 1.875 1.875V17.25a4.5 4.5 0 11-9 0V4.125zm4.5 14.25a1.125 1.125 0 100-2.25 1.125 1.125 0 000 2.25z\" />' +\r\n      '<path d=\"M10.719 21.75h9.156c1.036 0 1.875-.84 1.875-1.875v-5.25c0-1.036-.84-1.875-1.875-1.875h-.14l-8.742 8.743c-.09.089-.18.175-.274.257zM12.738 17.625l6.474-6.474a1.875 1.875 0 000-2.651L15.5 4.787a1.875 1.875 0 00-2.651 0l-.1.099V17.25c0 .126-.003.251-.01.375z\" />',\r\n  }, {\r\n    link: '/edit',\r\n    id: 'edit',\r\n    icon: '<path d=\"M18.75 12.75h1.5a.75.75 0 000-1.5h-1.5a.75.75 0 000 1.5zM12 6a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 0112 6zM12 18a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 0112 18zM3.75 6.75h1.5a.75.75 0 100-1.5h-1.5a.75.75 0 000 1.5zM5.25 18.75h-1.5a.75.75 0 010-1.5h1.5a.75.75 0 010 1.5zM3 12a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5A.75.75 0 013 12zM9 3.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5zM12.75 12a2.25 2.25 0 114.5 0 2.25 2.25 0 01-4.5 0zM9 15.75a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5z\" />',\r\n  }, {\r\n    link: '/preview',\r\n    id: 'preview',\r\n    icon: '<path fill-rule=\"evenodd\" d=\"M1.5 7.125c0-1.036.84-1.875 1.875-1.875h6c1.036 0 1.875.84 1.875 1.875v3.75c0 1.036-.84 1.875-1.875 1.875h-6A1.875 1.875 0 011.5 10.875v-3.75zm12 1.5c0-1.036.84-1.875 1.875-1.875h5.25c1.035 0 1.875.84 1.875 1.875v8.25c0 1.035-.84 1.875-1.875 1.875h-5.25a1.875 1.875 0 01-1.875-1.875v-8.25zM3 16.125c0-1.036.84-1.875 1.875-1.875h5.25c1.036 0 1.875.84 1.875 1.875v2.25c0 1.035-.84 1.875-1.875 1.875h-5.25A1.875 1.875 0 013 18.375v-2.25z\" clip-rule=\"evenodd\" />',\r\n  }]\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    public paletteService: PaletteService,\r\n    public router: Router,\r\n    private translate: TranslateService,\r\n    private titleService: Title\r\n  ) {\r\n    this.titleService.setTitle(this.title)\r\n\r\n    // Load theme from local storage and subscribe to changes\r\n    this.dark = storage.loadTheme()\r\n    this.storage.darkEmitter.subscribe(d => this.dark = d.valueOf())\r\n\r\n    ColorNamer.loadDictionary()\r\n\r\n    // Setup translation pipe\r\n    this.translate.setDefaultLang('en')\r\n    this.translate.use(this.translate.getBrowserLang() ?? 'en').subscribe(_ => {\r\n      this.title = `Rainbow Palette | ${ this.translate.instant('app.title') }`\r\n      this.titleService.setTitle(this.title)\r\n    })\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\r\n  class=\"min-h-screen grid grid-rows-site content-between py-6\r\n         text-gray-900 bg-gradient-to-r from-gray-100 to-gray-50 dark:text-gray-100 dark:from-gray-900 dark:to-gray-900\r\n         transition-colors duration-500\"\r\n>\r\n  <header class=\"w-full grid grid-cols-1 sm:grid-cols-7 lg:grid-cols-4 gap-4 px-8 items-center mb-10\">\r\n    <h1\r\n    class=\"mx-auto sm:ml-0 col-span-1 sm:col-span-2 lg:col-span-1\"\r\n    >\r\n      <img\r\n        alt=\"Rainbow Palette\"\r\n        height=\"50\" width=\"179\"\r\n        [src]=\"'/assets/rainbow-palette-' + (dark ? 'light' : 'dark') + '.svg'\"\r\n      >\r\n    </h1>\r\n\r\n    <nav class=\"col-span-1 sm:col-span-4 lg:col-span-2\">\r\n      <div\r\n        class=\"mx-auto w-fit\"\r\n      >\r\n        <ul\r\n          *ngIf=\"paletteService.hasPalette()\"\r\n          class=\"flex flex-wrap gap-2 md:gap-4\r\n                 font-medium text-gray-700 dark:text-gray-200\">\r\n          <li *ngFor=\"let nav of navigation\">\r\n            <a\r\n              class=\"inline-flex py-2 px-4 items-center\r\n                     rounded cursor-pointer transition-colors duration-500\"\r\n              [class]=\"(router.url === nav.link)\r\n                ? 'text-primary-800 bg-primary-200 dark:text-primary-900 dark:bg-primary-500'\r\n                : 'hover:text-gray-900 hover:bg-gray-100 dark:hover:text-gray-50 dark:hover:bg-gray-800'\"\r\n              [routerLink]=\"nav.link\"\r\n              [title]=\"'app.navigation.' + nav.id + '.title' | translate\"\r\n            >\r\n              <svg\r\n                class=\"w-6 h-6 mr-2 hidden md:block\"\r\n                viewBox=\"0 0 24 24\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"currentColor\"\r\n                [innerHTML]=\"nav.icon | safeHtml \"\r\n              >\r\n              </svg>\r\n              {{'app.navigation.' + nav.id + '.label' | translate }}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n\r\n    <light-switch\r\n      class=\"mx-auto sm:mr-0\"\r\n      [dark]=\"dark\"\r\n    >\r\n    </light-switch>\r\n  </header>\r\n\r\n\r\n  <main>\r\n    <router-outlet>\r\n    </router-outlet>\r\n  </main>\r\n\r\n\r\n  <footer\r\n    class=\"flex gap-4 flex-col sm:flex-row px-8 pt-16 items-center justify-between\r\n           text-center w-full max-w-4xl mx-auto mt-10\"\r\n  >\r\n    <a\r\n      href=\"https://github.com/pawcoding/tailwind-color-generator\"\r\n      rel=\"noreferrer noopener\"\r\n      target=\"_blank\"\r\n      [title]=\"'app.footer.source-code' | translate\"\r\n    >\r\n      {{ 'app.footer.github' | translate }}\r\n    </a>\r\n\r\n    <span\r\n      class=\"cursor-default\"\r\n    >\r\n      {{ 'app.footer.version' | translate : { version: version } }}\r\n    </span>\r\n\r\n    <a\r\n      href=\"https://pawcode.de\"\r\n      target=\"_blank\"\r\n      [title]=\"'app.footer.created' | translate : { pawcode: 'pawcode Development' }\"\r\n    >\r\n      <img\r\n        height=\"32\" width=\"139\"\r\n        alt=\"pawcode&nbsp;Development\"\r\n        [src]=\"'/assets/pawcode-' + (dark ? 'light' : 'dark') + '.svg'\"\r\n      >\r\n    </a>\r\n  </footer>\r\n\r\n\r\n  <custom-dialog\r\n    class=\"fixed top-0 left-0\"\r\n  ></custom-dialog>\r\n\r\n  <notification\r\n    class=\"fixed bottom-0 right-0\"\r\n  ></notification>\r\n</div>\r\n"
        },
        {
            "name": "ColorEditorComponent",
            "id": "component-ColorEditorComponent-1c31947bdccb0684ec0cd8add3ca6c9dc55783a85d88bca9afad2b09b80ecb4c334046085b92b79026ff8ce9aa372a09a31d13bc91f8ddefb35107e061426aef",
            "file": "src/app/components/color-editor/color-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-editor",
            "styleUrls": [
                "./color-editor.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./color-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changeShade",
                    "args": [
                        {
                            "name": "shadeIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange a shade to be edited\n",
                    "description": "<p>Change a shade to be edited</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2468,
                                "end": 2478,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shadeIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2462,
                                "end": 2467,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hueToWheel",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate from hue to color wheel degree\n",
                    "description": "<p>Calculate from hue to color wheel degree</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3405,
                                "end": 3408,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3399,
                                "end": 3404,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "releaseShade",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRelease a shade and let it be interpolated instead\n",
                    "description": "<p>Release a shade and let it be interpolated instead</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2687,
                                "end": 2692,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2681,
                                "end": 2686,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2706,
                                "end": 2712,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2700,
                                "end": 2705,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateColor",
                    "args": [
                        {
                            "name": "type",
                            "type": "UpdateType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate current shade. The property with type is changed to the new value.\n",
                    "description": "<p>Update current shade. The property with type is changed to the new value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1013,
                                "end": 1017,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "UpdateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1007,
                                "end": 1012,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Property to change</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1050,
                                "end": 1055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1044,
                                "end": 1049,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Value to change to</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate all css properties to the values of the current selected shade.\n",
                    "description": "<p>Update all css properties to the values of the current selected shade.</p>\n"
                },
                {
                    "name": "wheelToHue",
                    "args": [
                        {
                            "name": "wheel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate from color wheel degree to hue\n",
                    "description": "<p>Calculate from color wheel degree to hue</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3049,
                                "end": 3054,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "wheel"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3043,
                                "end": 3048,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {Color} from \"../../models/color.model\";\r\nimport {Shade} from \"../../models/shade.model\";\r\nimport {ChangeType, ColorService} from \"../../services/color.service\";\r\n\r\n@Component({\r\n  selector: 'color-editor',\r\n  templateUrl: './color-editor.component.html',\r\n  styleUrls: ['./color-editor.component.css']\r\n})\r\nexport class ColorEditorComponent implements OnInit {\r\n\r\n  @Input()\r\n  dark = false\r\n\r\n  shade: Shade | undefined\r\n  color: Color | undefined\r\n\r\n  constructor(\r\n    public colorService: ColorService\r\n  ) {\r\n    this.colorService.getColorChangeEmitter().subscribe(changeType => {\r\n      if (changeType === ChangeType.LOAD) {\r\n        this.color = this.colorService.getColor()\r\n        this.shade = this.colorService.getShade()\r\n      }\r\n\r\n      this.updateProperties()\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.updateProperties()\r\n  }\r\n\r\n  /**\r\n   * Update current shade. The property with type is changed to the new value.\r\n   * @param type Property to change\r\n   * @param value Value to change to\r\n   */\r\n  updateColor(type: UpdateType, value: string | number) {\r\n    if (!this.shade)\r\n      return\r\n\r\n    if (type === UpdateType.HEX && isNaN(+value)) {\r\n      if (`${value}`.match(/^#[0-9A-Fa-f]{6}$/))\r\n        this.shade.setHEX(`${value}`, true)\r\n      else\r\n        return\r\n    } else if (!isNaN(+value)) {\r\n      value = parseInt(`${value}`)\r\n      if (type === UpdateType.HUE)\r\n        this.shade.setHSL(this.wheelToHue(value), this.shade.saturation, this.shade.luminosity, true)\r\n      else if (type === UpdateType.SATURATION)\r\n        this.shade.setHSL(this.shade.hue, value, this.shade.luminosity, true)\r\n      else if (type === UpdateType.LUMINOSITY)\r\n        this.shade.setHSL(this.shade.hue, this.shade.saturation, 100 - value, true)\r\n    }\r\n\r\n    this.colorService.adjustShades()\r\n  }\r\n\r\n  /**\r\n   * Update all css properties to the values of the current selected shade.\r\n   */\r\n  updateProperties() {\r\n    if (!this.shade)\r\n      return\r\n\r\n    document.documentElement.style.setProperty('--selected-hex', this.shade.hex)\r\n    document.documentElement.style.setProperty('--selected-hue', String(this.shade.hue))\r\n    document.documentElement.style.setProperty('--selected-saturation', this.shade.saturation + \"%\")\r\n    document.documentElement.style.setProperty('--selected-luminosity', this.shade.luminosity + \"%\")\r\n  }\r\n\r\n  /**\r\n   * Change a shade to be edited\r\n   * @param shadeIndex\r\n   */\r\n  changeShade(shadeIndex: number) {\r\n    if (this.color)\r\n      this.colorService.loadColor(this.color, shadeIndex)\r\n  }\r\n\r\n  /**\r\n   * Release a shade and let it be interpolated instead\r\n   * @param shade\r\n   * @param $event\r\n   */\r\n  releaseShade(shade: Shade, $event: MouseEvent) {\r\n    $event.preventDefault()\r\n    if (!this.color)\r\n      return\r\n\r\n    if (this.color.shades.filter(s => s.fixed).length > 1) {\r\n      shade.fixed = false\r\n      this.colorService.adjustShades()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate from color wheel degree to hue\r\n   * @param wheel\r\n   */\r\n  wheelToHue(wheel: number) {\r\n    let newHue\r\n    if (wheel < 120)\r\n      newHue = .5 * wheel\r\n    else if (wheel < 180)\r\n      newHue = wheel + 300\r\n    else if (wheel < 240)\r\n      newHue = 2 * wheel + 120\r\n    else\r\n      newHue = wheel\r\n\r\n    return newHue % 360\r\n  }\r\n\r\n  /**\r\n   * Calculate from hue to color wheel degree\r\n   * @param hue\r\n   */\r\n  hueToWheel(hue: number) {\r\n    let wheel\r\n    if (hue < 60)\r\n      wheel = 2 * hue\r\n    else if (hue < 120)\r\n      wheel = hue + 60\r\n    else if (hue < 240)\r\n      wheel = .5 * hue + 120\r\n    else\r\n      wheel = hue\r\n\r\n    return wheel % 360\r\n  }\r\n\r\n}\r\n\r\nenum UpdateType {\r\n  HEX, HUE, SATURATION, LUMINOSITY\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input[type=range]::-webkit-slider-thumb {\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\ninput[type=range]::-moz-range-thumb {\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\n#hueInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(0, var(--selected-saturation), var(--selected-luminosity)) 0%,\r\n  hsl(60, var(--selected-saturation), var(--selected-luminosity)) 33.3%,\r\n  hsl(120, var(--selected-saturation), var(--selected-luminosity)) 50%,\r\n  hsl(240, var(--selected-saturation), var(--selected-luminosity)) 66.6%,\r\n  hsl(360, var(--selected-saturation), var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#saturationInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), 0%, var(--selected-luminosity)) 0%,\r\n  hsl(var(--selected-hue), 100%, var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#luminosityInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 100%) 0%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 50%) 50%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 0%) 100%);\r\n}\r\n",
                    "styleUrl": "./color-editor.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\" *ngIf=\"shade && color\" class=\"w-full\">\r\n  <section\r\n    class=\"fixed w-full h-full top-0 left-0 flex items-center justify-center z-20 px-4\r\n           bg-gray-900/50 dark:bg-gray-900/90\"\r\n    (click)=\"colorService.closeEditor()\"\r\n  >\r\n    <article\r\n      class=\"w-full max-w-sm mx-auto p-4 grid gap-2\r\n             font-medium bg-gray-100 text-gray-900 dark:bg-gray-700 dark:text-gray-100 rounded\"\r\n      (click)=\"$event.stopPropagation()\"\r\n    >\r\n      <h2 class=\"mb-2\">{{ color.name }}</h2>\r\n\r\n\r\n      <!-- Edit Hex -->\r\n      <div class=\"flex\">\r\n        <input\r\n          type=\"color\"\r\n          [title]=\"'color-editor.pick' | translate\"\r\n          id=\"hexInput\" #hexInput\r\n          class=\"w-1/5 h-10 rounded-l rounded-r-none overflow-clip\"\r\n          [value]=\"shade.hex\"\r\n          (input)=\"updateColor(0, hexInput.value)\"\r\n        >\r\n\r\n        <input\r\n          type=\"text\"\r\n          [title]=\"'color-editor.hex' | translate\"\r\n          id=\"hexCode\" #hexCode\r\n          placeholder=\"#4472C4\"\r\n          class=\"w-4/5 rounded-r\r\n                 text-medium text-gray-900 bg-gray-200 dark:text-gray-200 dark:bg-gray-800 transition-colors duration-500\r\n                 border-0 focus:ring-0\"\r\n          [value]=\"shade.hex\"\r\n          (input)=\"updateColor(0, hexCode.value)\"\r\n        >\r\n      </div>\r\n\r\n      <!-- Edit Hue -->\r\n      <div>\r\n        <label\r\n          for=\"hueInput\"\r\n          class=\"flex justify-between\"\r\n        >\r\n          <span class=\"font-semibold\">{{ 'color-editor.hue' | translate }}</span>\r\n          <span id=\"hueLabel\" #hueLabel>{{ shade.hue }}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          [title]=\"'color-editor.hue-adjust' | translate\"\r\n          id=\"hueInput\" #hueInput\r\n          min=0 max=360 step=\"1\"\r\n          [value]=\"hueToWheel(shade.hue)\"\r\n          (input)=\"updateColor(1, hueInput.value)\"\r\n        >\r\n      </div>\r\n\r\n      <!-- Edit Saturation -->\r\n      <div>\r\n        <label\r\n          for=\"saturationInput\"\r\n          class=\"flex justify-between\"\r\n        >\r\n          <span class=\"font-semibold\">{{ 'color-editor.saturation' | translate }}</span>\r\n          <span id=\"saturationLabel\" #saturationLabel>{{ shade.saturation }}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          [title]=\"'color-editor.saturation-adjust' | translate\"\r\n          id=\"saturationInput\" #saturationInput\r\n          min=0 max=100 step=\"1\"\r\n          [value]=\"shade.saturation\"\r\n          (input)=\"updateColor(2, saturationInput.value)\"\r\n        >\r\n      </div>\r\n\r\n      <!-- Edit Luminosity -->\r\n      <div>\r\n        <label\r\n          for=\"luminosityInput\"\r\n          class=\"flex justify-between\"\r\n        >\r\n          <span class=\"font-semibold\">{{ 'color-editor.luminosity' | translate }}</span>\r\n          <span id=\"luminosityLabel\" #luminosityLabel>{{ shade.luminosity }}</span>\r\n        </label>\r\n\r\n        <input\r\n          type=\"range\"\r\n          [title]=\"'color-editor.luminosity-adjust' | translate\"\r\n          id=\"luminosityInput\" #luminosityInput\r\n          min=0 max=100 step=\"1\"\r\n          [value]=\"100 - shade.luminosity\"\r\n          (input)=\"updateColor(3, luminosityInput.value)\"\r\n        >\r\n      </div>\r\n\r\n\r\n      <!-- Preview Color -->\r\n      <section class=\"grow grid grid-cols-10 mt-8 text-center overflow-clip cursor-default\">\r\n        <span\r\n          *ngFor=\"let shadeToShow of color.shades\"\r\n          [ngStyle]=\"{\r\n            'background-color': shadeToShow.hex,\r\n            'border-color': shadeToShow === shade ? 'currentColor' : shadeToShow.hex,\r\n            'color': color.shades[shadeToShow.brightness > 51 ? 9 : 0].hex,\r\n            'font-weight': shadeToShow.fixed ? 'bold' : 'inherit'\r\n          }\"\r\n          [class]=\"shadeToShow.index === 50 ? 'rounded-l' : (shadeToShow.index === 900 ? 'rounded-r' : '')\"\r\n          class=\"flex w-full h-14 items-center justify-center cursor-pointer border-4\"\r\n          [title]=\"'color-editor.edit-shade' | translate\"\r\n          (click)=\"changeShade(shadeToShow.index)\"\r\n          (contextmenu)=\"releaseShade(shadeToShow, $event)\"\r\n        >\r\n          {{shadeToShow.fixed ? '■' : ''}}\r\n        </span>\r\n      </section>\r\n\r\n\r\n      <!-- Buttons -->\r\n      <section class=\"ml-auto\">\r\n        <button\r\n          class=\"py-2 px-4 mt-4\r\n                 font-medium bg-gray-200 dark:bg-gray-800 rounded transition-all duration-200\"\r\n          [title]=\"'color-editor.cancel-title' | translate\"\r\n          (click)=\"colorService.closeEditor()\"\r\n        >\r\n          {{ 'color-editor.cancel' | translate }}\r\n        </button>\r\n\r\n        <button\r\n          class=\"py-2 px-4 mt-4 ml-2\r\n                 font-medium text-primary-100 bg-primary-700 dark:bg-primary-600 rounded transition-all duration-200\"\r\n          [title]=\"'color-editor.save-title' | translate\"\r\n          (click)=\"colorService.saveColor()\"\r\n        >\r\n          {{ 'color-editor.save' | translate }}\r\n        </button>\r\n      </section>\r\n    </article>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "ColorViewerComponent",
            "id": "component-ColorViewerComponent-37dd50594e0e504a1c00f873bb51b2f9505790878f8487689495ac246abd192b7a5c4b4ad411cb65c7d86c1d3506fe15ecb2a2fc10162e039198457669a61b6d",
            "file": "src/app/components/color-viewer/color-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./color-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Color | undefined",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editingState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "editName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editName'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose color name editor\n",
                    "description": "<p>Close color name editor</p>\n"
                },
                {
                    "name": "copyToClipboard",
                    "args": [
                        {
                            "name": "shade",
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCopy a shades hex to clipboard.\n",
                    "description": "<p>Copy a shades hex to clipboard.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1709,
                                "end": 1714,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shade"
                            },
                            "type": "Shade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1703,
                                "end": 1708,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1728,
                                "end": 1734,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1722,
                                "end": 1727,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "editShade",
                    "args": [
                        {
                            "name": "shadeIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen editor with the shade with the given index\n",
                    "description": "<p>Open editor with the shade with the given index</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1116,
                                "end": 1126,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shadeIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1110,
                                "end": 1115,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen color name editor\n",
                    "description": "<p>Open color name editor</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Color} from \"../../models/color.model\";\r\nimport {ColorService} from \"../../services/color.service\";\r\nimport {Shade} from \"../../models/shade.model\";\r\nimport {toUnicodeVariant} from \"../../utils/to-unicode-variant.util\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\n\r\n@Component({\r\n  selector: 'color-viewer',\r\n  templateUrl: './color-viewer.component.html',\r\n})\r\nexport class ColorViewerComponent implements OnInit {\r\n\r\n  @Input()\r\n  color: Color | undefined\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Color>()\r\n\r\n  editingState = false\r\n\r\n  @ViewChild('editName')\r\n  editName: ElementRef<HTMLInputElement> | undefined\r\n\r\n  constructor(\r\n    public colorService: ColorService,\r\n    private notificationService: NotificationService,\r\n    private translate: TranslateService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Open editor with the shade with the given index\r\n   * @param shadeIndex\r\n   */\r\n  editShade(shadeIndex: number) {\r\n    if (this.color)\r\n      this.colorService.loadColor(this.color, shadeIndex)\r\n  }\r\n\r\n  /**\r\n   * Open color name editor\r\n   */\r\n  openEditor() {\r\n    this.editingState = true\r\n    setTimeout(() => {\r\n      this.editName?.nativeElement.focus()\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Close color name editor\r\n   */\r\n  closeEditor() {\r\n    this.editingState = false\r\n    if (this.color)\r\n      this.color.name = this.editName?.nativeElement.value || this.translate.instant('random')\r\n  }\r\n\r\n  /**\r\n   * Copy a shades hex to clipboard.\r\n   * @param shade\r\n   * @param $event\r\n   */\r\n  copyToClipboard(shade: Shade, $event: MouseEvent) {\r\n    $event.preventDefault()\r\n    navigator.clipboard.writeText(shade.hex).then(() => {\r\n      this.notificationService.notification.emit({\r\n        id: 'copied',\r\n        interpolateParams: {\r\n          color: toUnicodeVariant(shade.hex, 'm')\r\n        }\r\n      })\r\n    }).catch(e => {\r\n      console.error('Error while copying to clipboard: ', e)\r\n      this.notificationService.notification.emit('copy-error')\r\n    })\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\">\r\n  <article *ngIf=\"color\"\r\n           class=\"my-8 items-center cursor-default overflow-clip\r\n           grid grid-cols-2 sm:grid-cols-5 lg:grid-cols-10 grid-areas-color-square sm:grid-areas-color-semi lg:grid-areas-color-wide\"\r\n  >\r\n    <!-- Name of the color -->\r\n    <div class=\"grid-in-name flex gap-4 items-center mb-2\">\r\n      <h3\r\n        *ngIf=\"!editingState\"\r\n        class=\"inline-block py-2 cursor-pointer\"\r\n        (click)=\"openEditor()\"\r\n      >\r\n        {{color.name}}\r\n      </h3>\r\n\r\n      <input *ngIf=\"editingState\"\r\n             type=\"text\" #editName\r\n             [placeholder]=\"'color-viewer.name-placeholder' | translate\"\r\n             class=\"bg-transparent p-0 mb-1.5 mt-2 text-lg font-bold\r\n                    border-0 focus:border-b-primary-700 border-b-2 focus:ring-0 transition-all duration-200\"\r\n             (focusout)=\"closeEditor()\"\r\n             (keydown.enter)=\"closeEditor()\"\r\n             [value]=\"color.name\">\r\n\r\n      <span\r\n        *ngIf=\"!editingState\"\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        [title]=\"'color-viewer.edit-name' | translate\"\r\n        (click)=\"openEditor()\"\r\n      >\r\n        <img src=\"/assets/icons/edit.svg\"\r\n             [alt]=\"'color-viewer.edit-name' | translate\"\r\n             class=\"icon\">\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Action Buttons -->\r\n    <div\r\n      class=\"grid-in-button flex gap-2 h-full justify-end items-center\"\r\n    >\r\n      <span\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        [title]=\"'color-viewer.tune' | translate\"\r\n        (click)=\"colorService.loadColor(color)\"\r\n      >\r\n        <img\r\n          class=\"icon\"\r\n          src=\"/assets/icons/tune.svg\"\r\n          [alt]=\"'color-viewer.tune' | translate\"\r\n        >\r\n      </span>\r\n\r\n      <span\r\n        class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n        [title]=\"'color-viewer.remove' | translate\"\r\n        (click)=\"onRemove.emit(color)\"\r\n      >\r\n        <img\r\n          class=\"icon\"\r\n          src=\"/assets/icons/delete.svg\"\r\n          [alt]=\"'color-viewer.remove' | translate\"\r\n        >\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Display all shades -->\r\n    <div\r\n      class=\"grid-in-shade grid grid-cols-10 sm:grid-cols-5 lg:grid-cols-10 sm:gap-2\"\r\n    >\r\n      <span\r\n        *ngFor=\"let shade of color.shades; index as i\"\r\n        [title]=\"'color-viewer.tune-shade' | translate\"\r\n        class=\"block w-full py-4\r\n               text-center text-lg cursor-pointer sm:rounded\"\r\n        [class]=\"i === 0 ? 'rounded-l' : (i === color.shades.length-1 ? 'rounded-r' : '')\"\r\n        [ngStyle]=\"{\r\n          'background-color': shade.hex,\r\n          'color': color.shades[shade.brightness > 51 ? 9 : 0].hex\r\n        }\"\r\n        (click)=\"editShade(shade.index)\"\r\n        (contextmenu)=\"copyToClipboard(shade, $event)\"\r\n      >\r\n        <span class=\"opacity-0 sm:opacity-100\">\r\n          <span class=\"font-semibold\">\r\n            {{shade.index}}\r\n          </span>\r\n          <br>\r\n          {{shade.hex.toUpperCase().substring(1)}}\r\n        </span>\r\n      </span>\r\n    </div>\r\n  </article>\r\n</div>\r\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-23931b761aaf29f8b66d95c39906748df3b3e1ee9ca2a8b9ba4e8fa208331546c0822b04bd55a7cb1068b24675c16000e82c7dc35522987d7ad1108377bad123",
            "file": "src/app/components/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dialog | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport { NotificationService} from \"../../services/notification.service\";\nimport {Dialog} from \"../../interfaces/dialog.interface\";\n\n@Component({\n  selector: 'custom-dialog',\n  templateUrl: './dialog.component.html',\n})\nexport class DialogComponent implements OnInit {\n\n  @Input()\n  dark = false\n\n  content: Dialog | undefined\n\n  constructor(\n    private notificationService: NotificationService\n  ) {\n    notificationService.dialog\n      .subscribe(dialogContent => this.content = dialogContent)\n  }\n\n  ngOnInit(): void {\n  }\n\n  closeNotification() {\n    this.notificationService.dialog.emit(undefined)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div tabindex=\"-1\" *ngIf=\"content\" (click)=\"closeNotification()\"\n     class=\"flex overflow-y-auto overflow-x-hidden z-40 h-modal h-screen w-screen justify-center items-center bg-gray-900/50 dark:bg-gray-900/75 cursor-pointer\" [class]=\"dark ? 'dark' : ''\" aria-hidden=\"true\"\n>\n  <div class=\"relative p-4 w-full max-w-2xl cursor-default\" (click)=\"$event.stopPropagation()\">\n    <article class=\"relative bg-gray-100 text-gray-900 rounded dark:bg-gray-700 dark:text-gray-100 p-6\">\n\n      <button type=\"button\" (click)=\"closeNotification()\"\n              [title]=\"'dialog.close' | translate\"\n              class=\"absolute top-3 right-2.5 bg-transparent hover:bg-gray-200 rounded text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 transition-colors duration-200\">\n        <svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path>\n        </svg>\n        <span class=\"sr-only\">{{ 'dialog.close' | translate }}</span>\n      </button>\n\n      <div class=\"mt-4 text-center\">\n        <p class=\"text-lg font-normal py-2 lg:py-3\"\n            [innerHtml]=\"'dialog.message.' + content.id | translate : content.interpolateParams\">\n        </p>\n\n        <button\n          *ngFor=\"let action of content.actions\"\n          type=\"button\"\n          class=\"mt-2 mx-2 bg-gray-200 hover:bg-gray-300 focus:ring-0 focus:outline-none rounded text-sm font-medium px-5 py-2.5 focus:z-10 dark:bg-gray-800 dark:hover:bg-gray-900 transition-all duration-200\"\n          [title]=\"'dialog.action.' + action.id + '.title' | translate\"\n          (click)=\"action.action.emit(undefined)\"\n        >\n          {{ 'dialog.action.' + action.id + '.label' | translate }}\n        </button>\n      </div>\n    </article>\n  </div>\n</div>\n"
        },
        {
            "name": "EditComponent",
            "id": "component-EditComponent-1525894eee27343e42fe87b529faaf750706941209fea49dd0fdabefb79490dc176598e45c0a4bd13a778acce0f160596b886379b563392fb2ae5e0df81a541d",
            "file": "src/app/pages/edit/edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Palette | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Palette} from \"../../models/palette.model\";\nimport {PaletteService} from \"../../services/palette.service\";\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n})\nexport class EditComponent implements OnInit {\n\n  palette: Palette | undefined\n\n  constructor(\n    private paletteService: PaletteService\n  ) {\n    paletteService.getPaletteChangeEmitter().subscribe(palette => {\n      this.palette = palette\n    })\n    this.palette = paletteService.getPalette()\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"palette\">\n  <color-editor></color-editor>\n\n  <section class=\"py-2 max-w-screen-xl mx-auto\">\n    <palette-viewer\n      [palette]=\"palette\"\n    ></palette-viewer>\n  </section>\n</div>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-2e8622b97218a5c7ee2519e3bbb0433298cc956aeea9c17aa7faf1234deb97a2e76e8e28bfc499df68c354488dbc743b31c5d1f7f3a1069374231fbb43400fdc",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "getDiscordLink",
                    "defaultValue": "getDiscordLink(this.translate)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "getGitHubLink",
                    "defaultValue": "getGitHubLink(this.translate)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loadBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSpanElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'loadBar'"
                        }
                    ]
                },
                {
                    "name": "loadContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'loadContainer'"
                        }
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "scheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaletteScheme",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "schemes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "generatePalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScheme",
                    "args": [
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scheme",
                            "type": "PaletteScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {Shade} from \"../../models/shade.model\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {PaletteScheme} from \"../../class/palette-generator\";\r\nimport {PaletteService} from \"../../services/palette.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\nimport {getGitHubLink, getDiscordLink} from \"../../utils/links.util\";\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  value: string\r\n  scheme: PaletteScheme\r\n  schemes: any\r\n  invalid = false\r\n  dropdown = false\r\n  loading = false\r\n  progress = 0\r\n\r\n  @ViewChild('loadContainer')\r\n  loadContainer: ElementRef<HTMLDivElement> | undefined\r\n  @ViewChild('loadBar')\r\n  loadBar: ElementRef<HTMLSpanElement> | undefined\r\n\r\n  getGitHubLink = getGitHubLink(this.translate)\r\n  getDiscordLink = getDiscordLink(this.translate)\r\n\r\n  constructor(\r\n    private notificationService: NotificationService,\r\n    private paletteService: PaletteService,\r\n    private router: Router,\r\n    private translate: TranslateService\r\n  ) {\r\n    this.value = paletteService.hex || Shade.generateRandomShade().hex.toUpperCase()\r\n    let i = 0\r\n    this.schemes = Object.values(PaletteScheme)\r\n      .filter(s => s.toString().length > 1)\r\n      .map(s => {\r\n        return {\r\n          index: i++,\r\n          for: 'scheme' + s.toString()\r\n            .replace('_', ' ')\r\n            .replace(/(\\w)(\\w*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase())\r\n            .replace(' ', ''),\r\n          name: s.toString(),\r\n          scheme: s\r\n        }\r\n    })\r\n\r\n    this.scheme = paletteService.scheme % this.schemes.length\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  updateValue(value: string) {\r\n    this.invalid = !value.match(/^#[0-9A-Fa-f]{6}$/)\r\n    if (!this.invalid)\r\n      this.value = value.toUpperCase()\r\n  }\r\n\r\n  updateScheme(scheme: PaletteScheme) {\r\n    this.scheme = scheme\r\n    this.dropdown = false\r\n  }\r\n\r\n  generatePalette() {\r\n    if (this.invalid) {\r\n      this.notificationService.notification.emit(this.translate.instant('home.generation.invalid-hex'))\r\n      return\r\n    }\r\n\r\n    this.loading = true\r\n    const interval = setInterval(() => {\r\n      this.progress = (this.loadBar?.nativeElement.clientWidth || 0) / (this.loadContainer?.nativeElement.clientWidth || 100)\r\n    }, 50)\r\n\r\n    setTimeout(() => {\r\n      clearInterval(interval)\r\n      this.paletteService.generatePalette(this.value, this.scheme)\r\n      this.router.navigate(['edit'])\r\n    }, 5100)\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paletteService",
                        "type": "PaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n  <article class=\"px-4 text-center text-lg\">\r\n    <div *ngIf=\"!loading\">\r\n      <div class=\"flex items-center justify-center\" style=\"min-height: calc(100svh - 170px)\">\r\n        <section>\r\n          <p class=\"font-bold\">\r\n            {{ 'home.text1' | translate }}\r\n          </p>\r\n\r\n          <p>\r\n            {{ 'home.text2' | translate }}\r\n          </p>\r\n\r\n          <div class=\"relative mx-auto mt-4 flex flex-col max-w-xxs\">\r\n            <span\r\n              class=\"flex\"\r\n            >\r\n              <input\r\n                type=\"color\"\r\n                [title]=\"'color-editor.pick' | translate\"\r\n                id=\"color\" #color\r\n                class=\"h-10 w-1/5 overflow-clip rounded-r-none rounded-l\"\r\n                [value]=\"value\"\r\n                (input)=\"updateValue(color.value)\"\r\n              >\r\n\r\n              <input\r\n                type=\"text\"\r\n                [title]=\"'color-editor.hex' | translate\"\r\n                id=\"hexCode\" #hexCode\r\n                placeholder=\"#4472C4\"\r\n                class=\"w-4/5 rounded-r\r\n                       text-medium text-gray-900 bg-gray-100 dark:text-gray-200 dark:bg-gray-800 transition-colors duration-500\r\n                       border-0 focus:ring-0\"\r\n                [value]=\"value\"\r\n                (input)=\"updateValue(hexCode.value)\"\r\n              >\r\n            </span>\r\n\r\n            <button\r\n              class=\"py-2 px-4 mt-2 inline-flex items-center\r\n                     text-primary-100 bg-primary-700 font-medium rounded\r\n                     transition-colors duration-500\"\r\n              [disabled]=\"invalid\"\r\n            >\r\n              <span\r\n                class=\"grow text-center\"\r\n                [class]=\"invalid ? 'cursor-not-allowed' : 'cursor-pointer'\"\r\n                [title]=\"invalid ? 'You need a 6-digit hex code' : 'Generate a color palette'\"\r\n                (click)=\"generatePalette()\"\r\n              >\r\n                {{ 'home.generation.start' | translate }}\r\n              </span>\r\n\r\n              <svg\r\n                class=\"ml-4 h-6 w-6 cursor-pointer\"\r\n                fill=\"currentColor\"\r\n                viewBox=\"0 0 48 48\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                (click)=\"dropdown = !dropdown\"\r\n              >\r\n                <path\r\n                  d=\"M24 30.95q-.45 0-.875-.175t-.775-.525l-9.9-9.9q-.65-.65-.625-1.65.025-1 .675-1.7.75-.75 1.675-.675.925.075 1.625.725l8.2 8.2 8.2-8.2q.7-.65 1.7-.7 1-.05 1.65.7.75.7.675 1.675-.075.975-.725 1.675l-9.85 9.85q-.35.35-.775.525-.425.175-.875.175Z\"/>\r\n              </svg>\r\n            </button>\r\n\r\n            <div\r\n              class=\"w-64 mt-1 p-2 absolute top-full\r\n                     text-gray-800 bg-gray-200 dark:text-gray-100 dark:bg-gray-700 rounded\"\r\n              [class]=\"dropdown ? '' : 'hidden'\"\r\n              (mouseleave)=\"dropdown = false\"\r\n            >\r\n              <span class=\"mb-1 block p-2 text-left text-base font-medium\">\r\n                {{ 'home.scheme.pick' | translate }}:\r\n              </span>\r\n\r\n              <section\r\n                class=\"h-32 overflow-y-auto text-sm scrollbar-thin scrollbar-thumb-primary-600 scrollbar-track-gray-300 dark:scrollbar-track-gray-600 sm:h-48\">\r\n                <label\r\n                  *ngFor=\"let schemeToShow of schemes\"\r\n                  class=\"block p-2 mb-1 mr-4\r\n                         hover:bg-gray-300 dark:hover:bg-gray-600 rounded cursor-pointer transition-colors duration-500\"\r\n                  [htmlFor]=\"schemeToShow.for\"\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"scheme\"\r\n                    class=\"hidden peer\"\r\n                    [checked]=\"schemeToShow.index === scheme\"\r\n                    [id]=\"schemeToShow.for\"\r\n                    [value]=\"schemeToShow.name\"\r\n                    (change)=\"updateScheme(schemeToShow.scheme)\"\r\n                  >\r\n\r\n                  <span class=\"peer-checked:font-bold peer-checked:text-primary-700 dark:peer-checked:text-primary-500\">\r\n                    {{ 'home.scheme.' + schemeToShow.name | translate }}\r\n                  </span>\r\n                </label>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n\r\n      <div class=\"border-t border-t-gray-300 pt-16 dark:border-t-gray-600\">\r\n        <section class=\"mx-auto max-w-xl text-justify text-base lg:max-w-7xl lg:px-4\">\r\n          <h2 class=\"mb-8 text-center\">{{ 'home.tutorial.title' | translate }}</h2>\r\n\r\n          <div class=\"grid gap-8 lg:grid-cols-3 lg:gap-16\">\r\n            <article class=\"xs:grid lg:block grid-cols-3 items-center\">\r\n              <div class=\"text-center text-primary-900 dark:text-primary-300 lg:mb-4\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                     fill=\"none\" viewBox=\"0 0 24 24\"\r\n                     stroke-width=\"1.5\" stroke=\"currentColor\"\r\n                     class=\"mx-auto h-16 w-16\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                        d=\"M4.098 19.902a3.75 3.75 0 005.304 0l6.401-6.402M6.75 21A3.75 3.75 0 013 17.25V4.125C3 3.504 3.504 3 4.125 3h5.25c.621 0 1.125.504 1.125 1.125v4.072M6.75 21a3.75 3.75 0 003.75-3.75V8.197M6.75 21h13.125c.621 0 1.125-.504 1.125-1.125v-5.25c0-.621-.504-1.125-1.125-1.125h-4.072M10.5 8.197l2.88-2.88c.438-.439 1.15-.439 1.59 0l3.712 3.713c.44.44.44 1.152 0 1.59l-2.879 2.88M6.75 17.25h.008v.008H6.75v-.008z\"/>\r\n                </svg>\r\n\r\n                <h3>{{ 'home.tutorial.generation.title' | translate }}</h3>\r\n              </div>\r\n\r\n              <p class=\"col-span-2\">\r\n                {{ 'home.tutorial.generation.text' | translate }}\r\n              </p>\r\n            </article>\r\n\r\n            <article class=\"xs:grid lg:block grid-cols-3 items-center\">\r\n              <div class=\"order-last text-center text-primary-900 dark:text-primary-300 lg:order-1 lg:mb-4\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                     fill=\"none\" viewBox=\"0 0 24 24\"\r\n                     stroke-width=\"1.5\" stroke=\"currentColor\"\r\n                     class=\"mx-auto h-16 w-16\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                        d=\"M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75\"/>\r\n                </svg>\r\n\r\n                <h3>{{ 'home.tutorial.editing.title' | translate }}</h3>\r\n              </div>\r\n\r\n              <p class=\"col-span-2 lg:order-last\">\r\n                {{ 'home.tutorial.editing.text' | translate }}\r\n              </p>\r\n            </article>\r\n\r\n            <article class=\"xs:grid lg:block grid-cols-3 items-center\">\r\n              <div class=\"text-center text-primary-900 dark:text-primary-300 lg:mb-4\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                     fill=\"none\" viewBox=\"0 0 24 24\"\r\n                     stroke-width=\"1.5\" stroke=\"currentColor\"\r\n                     class=\"mx-auto h-16 w-16\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                        d=\"M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5m8.25 3v6.75m0 0l-3-3m3 3l3-3M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z\"/>\r\n                </svg>\r\n\r\n                <h3>{{ 'home.tutorial.export.title' | translate }}</h3>\r\n              </div>\r\n\r\n              <p class=\"col-span-2\">\r\n                {{ 'home.tutorial.export.text' | translate }}\r\n              </p>\r\n            </article>\r\n          </div>\r\n\r\n          <p class=\"mt-8 text-center\">\r\n            <b>{{ 'home.tutorial.end.title' | translate }}</b><br>\r\n            {{ 'home.tutorial.end.subtitle' | translate }}\r\n          </p>\r\n        </section>\r\n\r\n        <section class=\"mx-auto mt-16 max-w-xl text-justify text-base\">\r\n          <h2>{{ 'home.additions.title' | translate }}</h2>\r\n\r\n          <h3 class=\"pb-0.5\">{{ 'home.additions.development.title' | translate }}</h3>\r\n          <p class=\"dark:text-gray-200\"\r\n             [innerHtml]=\"'home.additions.development.text' | translate : { github: getGitHubLink(), discord: getDiscordLink() }\">\r\n          </p>\r\n\r\n          <h3 class=\"pb-0.5\">{{ 'home.additions.planned.title' | translate }}</h3>\r\n          <p class=\"dark:text-gray-200\">\r\n            {{ 'home.additions.planned.text' | translate }}\r\n          </p>\r\n          <ul class=\"list-inside list-disc space-y-1 md:space-y-0 text-left mt-2 dark:text-gray-200\">\r\n            <li>{{ 'home.additions.planned.list.1' | translate }} (<a\r\n              href=\"https://github.com/pawcoding/Rainbow-Palette/issues/15\" target=\"_blank\" rel=\"noreferrer noopener\"\r\n              class=\"underline\" [title]=\"'home.additions.planned.issue' | translate\">#15</a>)\r\n            </li>\r\n            <li>{{ 'home.additions.planned.list.2' | translate }} (<a\r\n              href=\"https://github.com/pawcoding/Rainbow-Palette/issues/17\" target=\"_blank\" rel=\"noreferrer noopener\"\r\n              class=\"underline\" [title]=\"'home.additions.planned.issue' | translate\">#17</a>)\r\n            </li>\r\n            <li>{{ 'home.additions.planned.list.3' | translate }} (<a\r\n              href=\"https://github.com/pawcoding/Rainbow-Palette/issues/18\" target=\"_blank\" rel=\"noreferrer noopener\"\r\n              class=\"underline\" [title]=\"'home.additions.planned.issue' | translate\">#18</a>)\r\n            </li>\r\n            <li>{{ 'home.additions.planned.list.4' | translate }} (<a\r\n              href=\"https://github.com/pawcoding/Rainbow-Palette/issues/19\" target=\"_blank\" rel=\"noreferrer noopener\"\r\n              class=\"underline\" [title]=\"'home.additions.planned.issue' | translate\">#19</a>)\r\n            </li>\r\n            <li>{{ 'home.additions.planned.list.5' | translate }} (<a\r\n              href=\"https://github.com/pawcoding/Rainbow-Palette/issues/22\" target=\"_blank\" rel=\"noreferrer noopener\"\r\n              class=\"underline\" [title]=\"'home.additions.planned.issue' | translate\">#22</a>)\r\n            </li>\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    </div>\r\n\r\n    <article class=\"mx-auto max-w-md\" *ngIf=\"loading\">\r\n      <p>\r\n        <b>{{ 'home.generation.note' | translate }}:</b><br>\r\n        <span [innerHtml]=\"'home.generation.perfection' | translate\"></span>\r\n      </p>\r\n\r\n      <div #loadContainer\r\n           class=\"h-6 w-full mt-10 rounded-full bg-gray-200 dark:bg-gray-800\"\r\n      >\r\n        <span #loadBar\r\n              class=\"flex h-6 items-center justify-center rounded-full text-sm font-bold text-primary-50 bg-primary-700 animate-load\"\r\n        >\r\n          {{ progress | percent:'2.0' }}\r\n        </span>\r\n      </div>\r\n    </article>\r\n  </article>\r\n</div>\r\n"
        },
        {
            "name": "LightSwitchComponent",
            "id": "component-LightSwitchComponent-821e07e65171b849b3d7c9458c3a2f7bc12d4f3c86759f37bc6ec3dfdb3f8ec9ac237520d29c666d37dde420242de10f0a797ba1b8ad13e49d257fdec30c357b",
            "file": "src/app/components/light-switch/light-switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "light-switch",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./light-switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle between light and dark theme.\n",
                    "description": "<p>Toggle between light and dark theme.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {StorageService} from \"../../services/storage.service\";\r\n\r\n@Component({\r\n  selector: 'light-switch',\r\n  templateUrl: './light-switch.component.html',\r\n})\r\nexport class LightSwitchComponent implements OnInit {\r\n\r\n  @Input()\r\n  dark: boolean | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Toggle between light and dark theme.\r\n   */\r\n  toggleTheme(): void {\r\n    this.dark = this.storage.toggleTheme(!this.dark)\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label\r\n  for=\"light-switch\"\r\n  class=\"inline-flex relative items-center cursor-pointer\"\r\n  [title]=\"'light-switch.' + (dark ? 'to-light' : 'to-dark') | translate\"\r\n>\r\n  <input\r\n    type=\"checkbox\"\r\n    id=\"light-switch\"\r\n    class=\"sr-only peer\"\r\n    [checked]=\"dark\"\r\n    (change)=\"toggleTheme()\"\r\n  >\r\n\r\n  <div class=\"w-14 h-7 rounded-full\r\n              bg-gray-100 peer-checked:bg-gray-800 transition-all duration-500\r\n              peer-focus:outline-none peer peer-checked:after:translate-x-full\r\n              after:content-[url('/assets/icons/sun.svg')] peer-checked:after:content-[url('/assets/icons/moon.svg')]\r\n              after:absolute after:top-0.5 after:left-[4px]\r\n              after:rounded-full after:h-6 after:w-6\r\n              after:transition-all after:duration-500\"\r\n  ></div>\r\n</label>\r\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-ee9acd6efab7284d9bbf15ecd8d1c95e0fb631dc8587e19f2c5d7720a907ea90d84eb83c8202e42957d5efd165f3bb16206c5676171d9e31a93cbea9726c244f",
            "file": "src/app/components/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "notification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "complexNotification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {NotificationService} from \"../../services/notification.service\";\n\n@Component({\n  selector: 'notification',\n  templateUrl: './notification.component.html',\n})\nexport class NotificationComponent implements OnInit {\n\n  @Input()\n  dark = false\n\n  message: string | undefined\n  complexNotification: { id: string, interpolateParams: Object } | undefined\n  timeout: number | undefined\n\n  constructor(\n    private notificationService: NotificationService\n  ) {\n    notificationService.notification\n      .subscribe(notification => {\n        if (typeof notification === 'string') {\n          this.message = notification\n          this.complexNotification = undefined\n        } else {\n          this.complexNotification = notification\n          this.message = undefined\n        }\n\n        if (notification) {\n          clearTimeout(this.timeout)\n          // @ts-ignore\n          this.timeout = setTimeout(() => {\n            this.closeNotification()\n          }, 5000)\n        } else {\n          clearTimeout(this.timeout)\n          this.timeout = undefined\n        }\n      })\n  }\n\n  ngOnInit(): void {\n  }\n\n  closeNotification() {\n    this.notificationService.notification.emit(undefined)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"message || complexNotification\" [class]=\"dark ? 'dark' : ''\" class=\"mb-6 mr-6 z-50\">\n  <article\n    class=\"flex items-center p-4 w-full max-w-xs bg-gray-100 rounded dark:bg-gray-800 text-gray-800 dark:text-gray-100\"\n    role=\"alert\">\n    <p class=\"mr-4 text-sm cursor-default\">\n      <ng-template [ngIf]=\"complexNotification\">\n        {{ 'notification.' + complexNotification.id | translate : complexNotification.interpolateParams }}\n      </ng-template>\n      <ng-template [ngIf]=\"message\">\n        {{ 'notification.' + message | translate }}\n      </ng-template>\n    </p>\n\n    <button type=\"button\" (click)=\"closeNotification()\"\n            [title]=\"'notification.close' | translate\"\n            class=\"ml-auto -mx-1.5 -my-1.5 bg-transparent rounded p-1.5 hover:bg-gray-200 inline-flex h-8 w-8 dark:hover:bg-gray-900 transition-all duration-200\"\n            aria-label=\"Close\">\n      <span class=\"sr-only\">{{ 'notification.close' | translate }}</span>\n      <svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\"\n           xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\"\n              d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n              clip-rule=\"evenodd\"></path>\n      </svg>\n    </button>\n  </article>\n</div>\n"
        },
        {
            "name": "PaletteViewerComponent",
            "id": "component-PaletteViewerComponent-860c5e0f09c1f069ddf64a5660ed75e3f635a227417fe09534dd44a426b84aa94838ae8c45781fccd088718c539e691fdfe939c66b6b5fb00cd03fc487ebc10f",
            "file": "src/app/components/palette-viewer/palette-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "palette-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./palette-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Palette | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "adding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "editingState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "editTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editTitle'"
                        }
                    ]
                },
                {
                    "name": "saving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addRandomColor",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a random color to the palette.\n",
                    "description": "<p>Add a random color to the palette.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose editor for palette name.\n",
                    "description": "<p>Close editor for palette name.</p>\n"
                },
                {
                    "name": "exportPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport a palette for download and usage as plain CSS or Tailwind config.\n",
                    "description": "<p>Export a palette for download and usage as plain CSS or Tailwind config.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen editor for palette name.\n",
                    "description": "<p>Open editor for palette name.</p>\n"
                },
                {
                    "name": "removeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.\n",
                    "description": "<p>Remove color from palette and save the current palette to local storage.\nIf color is not present in palette nothing happens.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2026,
                                "end": 2031,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "color"
                            },
                            "type": "Color",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2020,
                                "end": 2025,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Color to remove from palette</p>\n"
                        }
                    ]
                },
                {
                    "name": "removePalette",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAsk user for confirmation an trigger onRemove event handler.\n",
                    "description": "<p>Ask user for confirmation an trigger onRemove event handler.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1243,
                                "end": 1249,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1237,
                                "end": 1242,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>MouseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "savePalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave current palette to local storage.\n",
                    "description": "<p>Save current palette to local storage.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Palette} from \"../../models/palette.model\";\r\nimport {toUnicodeVariant} from \"../../utils/to-unicode-variant.util\";\r\nimport {Color} from \"../../models/color.model\";\r\nimport {StorageService} from \"../../services/storage.service\";\r\nimport {NotificationService} from \"../../services/notification.service\";\r\nimport {ExportDialog} from \"../../dialogs/export.dialog\";\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\n\r\n\r\n@Component({\r\n  selector: 'palette-viewer',\r\n  templateUrl: './palette-viewer.component.html',\r\n})\r\nexport class PaletteViewerComponent implements OnInit {\r\n\r\n  @Input()\r\n  palette: Palette | undefined\r\n\r\n  @Input()\r\n  dark = false\r\n\r\n  @Output()\r\n  onRemove = new EventEmitter<Event>()\r\n\r\n  editingState = false\r\n  saving = false\r\n  adding = false\r\n\r\n  @ViewChild('editTitle')\r\n  editTitle: ElementRef<HTMLInputElement> | undefined\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    private notificationService: NotificationService,\r\n    private translate: TranslateService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * Ask user for confirmation an trigger onRemove event handler.\r\n   * @param $event MouseEvent\r\n   */\r\n  removePalette($event: MouseEvent) {\r\n    const removeEmitter = new EventEmitter()\r\n    removeEmitter.subscribe(() => {\r\n      this.notificationService.dialog.emit(undefined)\r\n      this.onRemove.emit($event)\r\n    })\r\n    const closeEmitter = new EventEmitter()\r\n    closeEmitter.subscribe(() => {\r\n      this.notificationService.dialog.emit(undefined)\r\n    })\r\n\r\n    this.notificationService.dialog.emit({\r\n      id: 'delete-palette',\r\n      actions: [{\r\n        id: 'cancel',\r\n        action: closeEmitter\r\n      }, {\r\n        id: 'delete',\r\n        action: removeEmitter\r\n      }]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove color from palette and save the current palette to local storage.\r\n   * If color is not present in palette nothing happens.\r\n   * @param color Color to remove from palette\r\n   */\r\n  removeColor(color: Color) {\r\n    this.palette?.removeColor(color)\r\n  }\r\n\r\n  /**\r\n   * Add a random color to the palette.\r\n   */\r\n  addRandomColor($event: MouseEvent) {\r\n    const target = ($event.target as HTMLButtonElement)\r\n    this.adding = true\r\n    setTimeout(() => {\r\n      this.palette?.addColor(Color.generateRandomColor(), false)\r\n      this.adding = false\r\n      setTimeout(() => {\r\n        window.scroll({\r\n          behavior: 'smooth',\r\n          top: window.scrollY + target.getBoundingClientRect().bottom - window.innerHeight + 20\r\n        })\r\n      }, 10)\r\n    }, 2000)\r\n  }\r\n\r\n  /**\r\n   * Save current palette to local storage.\r\n   */\r\n  savePalette() {\r\n    this.saving = true\r\n    if (this.palette)\r\n      this.storage.savePalette(this.palette)\r\n    setTimeout(() => {\r\n      this.notificationService.notification.emit('saved')\r\n      this.saving = false\r\n    }, 2000)\r\n  }\r\n\r\n  /**\r\n   * Open editor for palette name.\r\n   */\r\n  openEditor() {\r\n    this.editingState = true\r\n    setTimeout(() => {\r\n      this.editTitle?.nativeElement.focus()\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Close editor for palette name.\r\n   */\r\n  closeEditor() {\r\n    this.editingState = false\r\n    if (this.palette)\r\n      this.palette.title = this.editTitle?.nativeElement.value || this.translate.instant('random')\r\n  }\r\n\r\n  /**\r\n   * Export a palette for download and usage as plain CSS or Tailwind config.\r\n   */\r\n  exportPalette() {\r\n    if (this.palette) {\r\n      this.notificationService.dialog\r\n        .emit(new ExportDialog(\r\n          this.notificationService.dialog,\r\n          this.palette\r\n        ).getNotification())\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"dark ? 'dark' : ''\">\r\n  <section *ngIf=\"palette\"\r\n    class=\"px-4\"\r\n  >\r\n    <div class=\"flex flex-col sm:flex-row items-center gap-4 mb-6\">\r\n      <!-- Palette name -->\r\n      <div class=\"flex gap-4 items-end\">\r\n        <h2\r\n          *ngIf=\"!editingState\"\r\n          class=\"inline-block cursor-pointer\"\r\n          (click)=\"openEditor()\"\r\n        >\r\n          {{palette.title}}\r\n        </h2>\r\n\r\n        <!-- Palette name input -->\r\n        <input *ngIf=\"editingState\"\r\n               type=\"text\" #editTitle\r\n               [placeholder]=\"'palette-viewer.title-placeholder' | translate\"\r\n               class=\"bg-transparent p-0 text-xl font-bold\r\n                      border-0 focus:border-b-primary-700 border-b-2 focus:ring-0 transition-all duration-200\"\r\n               (focusout)=\"closeEditor()\"\r\n               (keydown.enter)=\"closeEditor()\"\r\n               [value]=\"palette.title\">\r\n\r\n        <span\r\n          *ngIf=\"!editingState\"\r\n          class=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors duration-500\"\r\n          [title]=\"'palette-viewer.edit-title' | translate\"\r\n          (click)=\"openEditor()\"\r\n        >\r\n          <img src=\"/assets/icons/edit.svg\" alt=\"Edit title\" class=\"icon !h-8 !w-8\">\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Export Button -->\r\n      <div class=\"sm:ml-auto\">\r\n        <button\r\n          class=\"py-2 px-4 inline-flex items-center\r\n                 text-primary-100 bg-primary-700 font-medium rounded cursor-pointer\"\r\n          [title]=\"'palette-viewer.export-title' | translate\"\r\n          (click)=\"exportPalette()\"\r\n        >\r\n          <svg\r\n            class=\"w-6 h-6 mr-2\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path fill=\"currentColor\" d=\"M3.375 3C2.339 3 1.5 3.84 1.5 4.875v.75c0 1.036.84 1.875 1.875 1.875h17.25c1.035 0 1.875-.84 1.875-1.875v-.75C22.5 3.839 21.66 3 20.625 3H3.375z\" />\r\n            <path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M3.087 9l.54 9.176A3 3 0 006.62 21h10.757a3 3 0 002.995-2.824L20.913 9H3.087zM12 10.5a.75.75 0 01.75.75v4.94l1.72-1.72a.75.75 0 111.06 1.06l-3 3a.75.75 0 01-1.06 0l-3-3a.75.75 0 111.06-1.06l1.72 1.72v-4.94a.75.75 0 01.75-.75z\" clip-rule=\"evenodd\" />\r\n          </svg>\r\n\r\n          {{ 'palette-viewer.export' | translate }}\r\n        </button>\r\n\r\n        <!-- Save Button -->\r\n        <button\r\n          class=\"py-2 px-4 ml-4 inline-flex items-center\r\n                 text-primary-100 bg-primary-700 font-medium rounded cursor-pointer\"\r\n          [title]=\"'palette-viewer.' + (saving ? 'saving' : 'save') + '-title' | translate\"\r\n          (click)=\"savePalette()\"\r\n        >\r\n          <svg\r\n            *ngIf=\"!saving\"\r\n            class=\"w-6 h-6 mr-2\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M6.32 2.577a49.255 49.255 0 0111.36 0c1.497.174 2.57 1.46 2.57 2.93V21a.75.75 0 01-1.085.67L12 18.089l-7.165 3.583A.75.75 0 013.75 21V5.507c0-1.47 1.073-2.756 2.57-2.93z\" clip-rule=\"evenodd\" />\r\n          </svg>\r\n\r\n          <svg\r\n            *ngIf=\"saving\"\r\n            class=\"w-6 h-6 mr-2 animate-processing\"\r\n            viewBox=\"0 0 24 24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              fill=\"currentColor\"\r\n              fill-rule=\"evenodd\" d=\"M4.755 10.059a7.5 7.5 0 0112.548-3.364l1.903 1.903h-3.183a.75.75 0 100 1.5h4.992a.75.75 0 00.75-.75V4.356a.75.75 0 00-1.5 0v3.18l-1.9-1.9A9 9 0 003.306 9.67a.75.75 0 101.45.388zm15.408 3.352a.75.75 0 00-.919.53 7.5 7.5 0 01-12.548 3.364l-1.902-1.903h3.183a.75.75 0 000-1.5H2.984a.75.75 0 00-.75.75v4.992a.75.75 0 001.5 0v-3.18l1.9 1.9a9 9 0 0015.059-4.035.75.75 0 00-.53-.918z\" clip-rule=\"evenodd\" />\r\n          </svg>\r\n\r\n          {{ 'palette-viewer.' + (saving ? 'saving' : 'save') | translate }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Display all colors -->\r\n    <color-viewer\r\n      *ngFor=\"let color of palette.colors\"\r\n      [color]=\"color\"\r\n      (onRemove)=\"removeColor(color)\"\r\n    ></color-viewer>\r\n\r\n    <!-- Add random color to palette -->\r\n    <button\r\n      class=\"py-2 px-4 mt-4 mx-auto flex items-center\r\n             font-medium text-primary-100 bg-primary-700 rounded transition-all duration-200\"\r\n      [title]=\"'palette-viewer.' + (adding ? 'adding' : 'add') + '-title' | translate\"\r\n      (click)=\"addRandomColor($event)\"\r\n    >\r\n      <svg\r\n        *ngIf=\"!adding\"\r\n        class=\"w-6 h-6 mr-2\"\r\n        viewBox=\"0 0 48 48\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill=\"currentColor\"\r\n          d=\"M27 29.1q.65 0 1.075-.425.425-.425.425-1.075v-5.1h5.1q.65 0 1.075-.425.425-.425.425-1.075 0-.65-.425-1.075-.425-.425-1.075-.425h-5.1v-5.1q0-.65-.425-1.075Q27.65 12.9 27 12.9q-.65 0-1.075.425-.425.425-.425 1.075v5.1h-5.1q-.65 0-1.075.425Q18.9 20.35 18.9 21q0 .65.425 1.075.425.425 1.075.425h5.1v5.1q0 .65.425 1.075.425.425 1.075.425ZM13 38q-1.2 0-2.1-.9-.9-.9-.9-2.1V7q0-1.2.9-2.1.9-.9 2.1-.9h28q1.2 0 2.1.9.9.9.9 2.1v28q0 1.2-.9 2.1-.9.9-2.1.9Zm0-3h28V7H13v28Zm-6 9q-1.2 0-2.1-.9Q4 42.2 4 41V11.5q0-.65.425-1.075Q4.85 10 5.5 10q.65 0 1.075.425Q7 10.85 7 11.5V41h29.5q.65 0 1.075.425Q38 41.85 38 42.5q0 .65-.425 1.075Q37.15 44 36.5 44Zm6-37v28V7Z\"/>\r\n      </svg>\r\n\r\n      <svg\r\n        *ngIf=\"adding\"\r\n        class=\"w-6 h-6 mr-2 animate-processing\"\r\n        viewBox=\"0 0 48 48\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill=\"currentColor\"\r\n          d=\"M8.25 30.1q-.6-1.45-.85-2.975Q7.15 25.6 7.15 24q0-6.75 4.9-11.75t11.6-5h2.15l-2.3-2.3q-.45-.45-.45-1.15t.5-1.2q.45-.45 1.175-.45.725 0 1.225.45l5.25 5.35q.35.35.55.775.2.425.2.875t-.2.875q-.2.425-.55.775l-5.25 5.3q-.5.5-1.225.5-.725 0-1.225-.5-.5-.5-.5-1.225 0-.725.5-1.225l2.2-2.15h-1.95q-4.85 0-8.375 3.575Q11.85 19.1 11.85 24q0 1.2.175 2.25t.475 2q.2.65.05 1.325-.15.675-.55 1.125-.95.95-2.125.775Q8.7 31.3 8.25 30.1Zm13.8 15.4-5.35-5.25q-.35-.35-.525-.775Q16 39.05 16 38.6q0-.5.175-.9t.525-.75l5.35-5.35q.45-.45 1.15-.45t1.2.45q.45.5.45 1.175T24.4 33.9l-2.3 2.3h2.15q4.85 0 8.375-3.575Q36.15 29.05 36.15 24.1q0-1.15-.175-2.225Q35.8 20.8 35.5 19.85q-.2-.6-.075-1.25t.525-1.1q.95-.95 2.125-.8 1.175.15 1.675 1.3.55 1.5.825 3.025.275 1.525.275 3.075 0 6.8-4.9 11.825-4.9 5.025-11.55 5.025h-2.3l2.25 2.25q.45.45.45 1.15t-.45 1.15q-.5.5-1.175.5t-1.125-.5Z\"/>\r\n      </svg>\r\n\r\n      {{ 'palette-viewer.' + (adding ? 'adding' : 'add') | translate }}\r\n    </button>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "PreviewComponent",
            "id": "component-PreviewComponent-5f6cb571da08be945b121d41ec4621083a5abfe9570b097b8b5cbfb97c663d3ab2b26d54eff72e0d21cfd2cb57203748733324c2d0435490d081322d8c44647e",
            "file": "src/app/pages/preview/preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-preview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getDiscordLink",
                    "defaultValue": "getDiscordLink(this.translate)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "getGitHubLink",
                    "defaultValue": "getGitHubLink(this.translate)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {getGitHubLink, getDiscordLink} from \"../../utils/links.util\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n})\nexport class PreviewComponent implements OnInit {\n\n  getGitHubLink = getGitHubLink(this.translate)\n  getDiscordLink = getDiscordLink(this.translate)\n\n  constructor(\n    private translate: TranslateService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <article class=\"mx-auto max-w-lg px-4 text-justify text-lg\">\n    <h2>{{ 'preview.title' | translate }}</h2>\n\n    <p class=\"dark:text-gray-300\">\n      {{ 'preview.description' | translate }}\n    </p>\n\n    <p class=\"dark:text-gray-300 mt-4\"\n       [innerHtml]=\"'preview.more-info' | translate : { github: getGitHubLink(), discord: getDiscordLink() }\">\n    </p>\n  </article>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-d38ec0a525e2d7b32f6fe8bb0f64110de1903364d517cc5333d2fbc72b2fb927a30a5f87bad2b747934b024352654212e0f2c42f5ac286be67e37eabdbfc45b6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ColorViewerComponent } from './components/color-viewer/color-viewer.component';\r\nimport { PaletteViewerComponent } from './components/palette-viewer/palette-viewer.component';\r\nimport { StorageService } from \"./services/storage.service\";\r\nimport { LightSwitchComponent } from './components/light-switch/light-switch.component';\r\nimport { ColorEditorComponent } from './components/color-editor/color-editor.component';\r\nimport { ColorService } from \"./services/color.service\";\r\nimport { DialogComponent } from './components/dialog/dialog.component';\r\nimport { NotificationComponent } from './components/notification/notification.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport {AppRoutingModule} from \"./app-routing.module\";\r\nimport { EditComponent } from './pages/edit/edit.component';\r\nimport {SafeHtmlPipe} from \"./pipes/safe-html.pipe\";\r\nimport { PreviewComponent } from './pages/preview/preview.component';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { environment } from '../environments/environment';\r\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\r\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\r\nimport {TranslateHttpLoader} from \"@ngx-translate/http-loader\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ColorEditorComponent,\r\n    ColorViewerComponent,\r\n    DialogComponent,\r\n    HomeComponent,\r\n    LightSwitchComponent,\r\n    NotificationComponent,\r\n    PaletteViewerComponent,\r\n    EditComponent,\r\n    SafeHtmlPipe,\r\n    PreviewComponent\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    ServiceWorkerModule.register('ngsw-worker.js', {\r\n      enabled: environment.production,\r\n      // Register the ServiceWorker as soon as the application is stable\r\n      // or after 30 seconds (whichever comes first).\r\n      registrationStrategy: 'registerWhenStable:30000'\r\n    })\r\n  ],\r\n  providers: [\r\n    ColorService,\r\n    StorageService\r\n  ],\r\n  bootstrap: [\r\n    AppComponent\r\n  ]\r\n})\r\nexport class AppModule { }\r\n\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ColorService"
                        },
                        {
                            "name": "StorageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ColorEditorComponent"
                        },
                        {
                            "name": "ColorViewerComponent"
                        },
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "EditComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LightSwitchComponent"
                        },
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "PaletteViewerComponent"
                        },
                        {
                            "name": "PreviewComponent"
                        },
                        {
                            "name": "SafeHtmlPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-20c907e0ab1f9816b3aa453fb58d70df00c0569cc303e468213a706b8006791b56a69a2995e64ebe25162faa1b78d773e0e2e3d8ce74a680f65ae0bc88b5bc0c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {RouterModule, Routes} from \"@angular/router\";\r\nimport {HomeComponent} from \"./pages/home/home.component\";\r\nimport {NgModule} from \"@angular/core\";\r\nimport {PaletteGuard} from \"./guards/palette.guard\";\r\nimport {EditComponent} from \"./pages/edit/edit.component\";\r\nimport {PreviewComponent} from \"./pages/preview/preview.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', component: HomeComponent },\r\n  { path: 'edit', pathMatch: 'full', canActivate: [PaletteGuard], component: EditComponent },\r\n  { path: 'preview', pathMatch: 'full', canActivate: [PaletteGuard], component: PreviewComponent }\r\n]\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorybookTranslateModule",
            "id": "module-StorybookTranslateModule-21e6ecdaff1c738f613cb4a940b77084638556abd6646a52c12544eeac030b230f2f7350653cf3e639044b2f633b2d45a58c4a7779e72c0b735b911bad736b5a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/utils/storybook-translate.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\r\nimport {TranslateLoader, TranslateModule, TranslateService} from \"@ngx-translate/core\";\r\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\r\nimport {TranslateHttpLoader} from \"@ngx-translate/http-loader\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    })\r\n  ],\r\n  exports: [\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class StorybookTranslateModule {\r\n  constructor(\r\n    private translate: TranslateService\r\n  ) {\r\n    translate.setDefaultLang('en')\r\n    translate.use(translate.getBrowserLang() ?? 'en')\r\n  }\r\n}\r\n\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Analogous",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "chars",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/to-unicode-variant.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'"
            },
            {
                "name": "Complementary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Compound",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  version: packageJson.version\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  version: packageJson.version\n}"
            },
            {
                "name": "MediaScope",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mediaScopePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('media-scope', uuidv4())"
            },
            {
                "name": "Monochromatic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "numbers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/to-unicode-variant.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'0123456789'"
            },
            {
                "name": "offsets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/to-unicode-variant.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  m: [0x1d670, 0x1d7f6],\r\n  b: [0x1d400, 0x1d7ce],\r\n  i: [0x1d434, 0x00030],\r\n  bi: [0x1d468, 0x00030],\r\n  c: [0x0001d49c, 0x00030],\r\n  bc: [0x1d4d0, 0x00030],\r\n  g: [0x1d504, 0x00030],\r\n  d: [0x1d538, 0x1d7d8],\r\n  bg: [0x1d56c, 0x00030],\r\n  s: [0x1d5a0, 0x1d7e2],\r\n  bs: [0x1d5d4, 0x1d7ec],\r\n  is: [0x1d608, 0x00030],\r\n  bis: [0x1d63c, 0x00030],\r\n  o: [0x24B6, 0x2460],\r\n  on: [0x0001f150, 0x2460],\r\n  p: [0x249c, 0x2474],\r\n  q: [0x1f130, 0x00030],\r\n  qn: [0x0001F170, 0x00030],\r\n  w: [0xff21, 0xff10],\r\n  u: [0x2090, 0xff10]\r\n}"
            },
            {
                "name": "Pawcode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PawcodeBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pawcodePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('pawcode', uuidv4())"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Rainbow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "special",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/to-unicode-variant.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  m: {\r\n    ' ': 0x2000,\r\n    '-': 0x2013\r\n  },\r\n  i: {\r\n    'h': 0x210e\r\n  },\r\n  g: {\r\n    'C': 0x212d,\r\n    'H': 0x210c,\r\n    'I': 0x2111,\r\n    'R': 0x211c,\r\n    'Z': 0x2128\r\n  },\r\n  d: {\r\n    'C': 0x2102,\r\n    'H': 0x210D,\r\n    'N': 0x2115,\r\n    'P': 0x2119,\r\n    'Q': 0x211A,\r\n    'R': 0x211D,\r\n    'Z': 0x2124\r\n  },\r\n  o: {\r\n    '0': 0x24EA,\r\n    '1': 0x2460,\r\n    '2': 0x2461,\r\n    '3': 0x2462,\r\n    '4': 0x2463,\r\n    '5': 0x2464,\r\n    '6': 0x2465,\r\n    '7': 0x2466,\r\n    '8': 0x2467,\r\n    '9': 0x2468,\r\n  },\r\n  on: {},\r\n  p: {},\r\n  q: {},\r\n  qn: {},\r\n  w: {}\r\n}"
            },
            {
                "name": "Split",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Tailwind",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "tailwindPalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('Tailwind', uuidv4())"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService,\r\n      useClass: MockColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule,\r\n    ]\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService\r\n    }, {\r\n      provide: NotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
            },
            {
                "name": "Triadic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "variantOffsets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/to-unicode-variant.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  'monospace': 'm',\r\n  'bold': 'b',\r\n  'italic': 'i',\r\n  'bold italic': 'bi',\r\n  'script': 'c',\r\n  'bold script': 'bc',\r\n  'gothic': 'g',\r\n  'gothic bold': 'bg',\r\n  'doublestruck': 'd',\r\n  'sans': 's',\r\n  'bold sans': 'bs',\r\n  'italic sans': 'is',\r\n  'bold italic sans': 'bis',\r\n  'parenthesis': 'p',\r\n  'circled': 'o',\r\n  'circled negative': 'on',\r\n  'squared': 'q',\r\n  'squared negative': 'qn',\r\n  'fullwidth': 'w'\r\n}"
            }
        ],
        "functions": [
            {
                "name": "getDiscordLink",
                "file": "src/app/utils/links.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFlag",
                "file": "src/app/utils/to-unicode-variant.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "flag",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "flags",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "flag",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "flags",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGitHubLink",
                "file": "src/app/utils/links.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getType",
                "file": "src/app/utils/to-unicode-variant.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "variant",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "variant",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TranslateHttpLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/utils/storybook-translate.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TranslateHttpLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toUnicodeVariant",
                "file": "src/app/utils/to-unicode-variant.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "variant",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "flags",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "variant",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "flags",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ChangeType",
                "childs": [
                    {
                        "name": "LOAD",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ADJUST",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/color.service.ts"
            },
            {
                "name": "PaletteScheme",
                "childs": [
                    {
                        "name": "RAINBOW",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SURPRISE_ME",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "MONOCHROMATIC",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ANALOGOUS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "COMPLEMENTARY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SPLIT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TRIADIC",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "COMPOUND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/class/palette-generator.ts"
            },
            {
                "name": "UpdateType",
                "childs": [
                    {
                        "name": "HEX",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "HUE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SATURATION",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LUMINOSITY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/color-editor/color-editor.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/palette-viewer/palette-viewer.component.stories.ts": [
                {
                    "name": "Analogous",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Complementary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Compound",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MediaScope",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mediaScopePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('media-scope', uuidv4())"
                },
                {
                    "name": "Monochromatic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Pawcode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "pawcodePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('pawcode', uuidv4())"
                },
                {
                    "name": "Rainbow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Split",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Tailwind",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "tailwindPalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('Tailwind', uuidv4())"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService\r\n    }, {\r\n      provide: NotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
                },
                {
                    "name": "Triadic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/utils/to-unicode-variant.util.ts": [
                {
                    "name": "chars",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/to-unicode-variant.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'"
                },
                {
                    "name": "numbers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/to-unicode-variant.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'0123456789'"
                },
                {
                    "name": "offsets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/to-unicode-variant.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  m: [0x1d670, 0x1d7f6],\r\n  b: [0x1d400, 0x1d7ce],\r\n  i: [0x1d434, 0x00030],\r\n  bi: [0x1d468, 0x00030],\r\n  c: [0x0001d49c, 0x00030],\r\n  bc: [0x1d4d0, 0x00030],\r\n  g: [0x1d504, 0x00030],\r\n  d: [0x1d538, 0x1d7d8],\r\n  bg: [0x1d56c, 0x00030],\r\n  s: [0x1d5a0, 0x1d7e2],\r\n  bs: [0x1d5d4, 0x1d7ec],\r\n  is: [0x1d608, 0x00030],\r\n  bis: [0x1d63c, 0x00030],\r\n  o: [0x24B6, 0x2460],\r\n  on: [0x0001f150, 0x2460],\r\n  p: [0x249c, 0x2474],\r\n  q: [0x1f130, 0x00030],\r\n  qn: [0x0001F170, 0x00030],\r\n  w: [0xff21, 0xff10],\r\n  u: [0x2090, 0xff10]\r\n}"
                },
                {
                    "name": "special",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/to-unicode-variant.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  m: {\r\n    ' ': 0x2000,\r\n    '-': 0x2013\r\n  },\r\n  i: {\r\n    'h': 0x210e\r\n  },\r\n  g: {\r\n    'C': 0x212d,\r\n    'H': 0x210c,\r\n    'I': 0x2111,\r\n    'R': 0x211c,\r\n    'Z': 0x2128\r\n  },\r\n  d: {\r\n    'C': 0x2102,\r\n    'H': 0x210D,\r\n    'N': 0x2115,\r\n    'P': 0x2119,\r\n    'Q': 0x211A,\r\n    'R': 0x211D,\r\n    'Z': 0x2124\r\n  },\r\n  o: {\r\n    '0': 0x24EA,\r\n    '1': 0x2460,\r\n    '2': 0x2461,\r\n    '3': 0x2462,\r\n    '4': 0x2463,\r\n    '5': 0x2464,\r\n    '6': 0x2465,\r\n    '7': 0x2466,\r\n    '8': 0x2467,\r\n    '9': 0x2468,\r\n  },\r\n  on: {},\r\n  p: {},\r\n  q: {},\r\n  qn: {},\r\n  w: {}\r\n}"
                },
                {
                    "name": "variantOffsets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/to-unicode-variant.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  'monospace': 'm',\r\n  'bold': 'b',\r\n  'italic': 'i',\r\n  'bold italic': 'bi',\r\n  'script': 'c',\r\n  'bold script': 'bc',\r\n  'gothic': 'g',\r\n  'gothic bold': 'bg',\r\n  'doublestruck': 'd',\r\n  'sans': 's',\r\n  'bold sans': 'bs',\r\n  'italic sans': 'is',\r\n  'bold italic sans': 'bis',\r\n  'parenthesis': 'p',\r\n  'circled': 'o',\r\n  'circled negative': 'on',\r\n  'squared': 'q',\r\n  'squared negative': 'qn',\r\n  'fullwidth': 'w'\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  version: packageJson.version\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  version: packageJson.version\n}"
                }
            ],
            "src/app/components/color-viewer/color-viewer.component.stories.ts": [
                {
                    "name": "PawcodeBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
                }
            ],
            "src/app/components/color-editor/color-editor.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-editor/color-editor.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: ColorService,\r\n      useClass: MockColorService\r\n    }, {\r\n      provide: NotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
                }
            ],
            "src/app/components/light-switch/light-switch.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/light-switch/light-switch.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: StorageService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
                }
            ],
            "src/app/components/dialog/dialog.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule\r\n    ]\r\n  }\r\n})"
                }
            ],
            "src/app/components/notification/notification.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: {\r\n    providers: [{\r\n      provide: NotificationService,\r\n      useClass: MockNotificationService\r\n    }],\r\n    imports: [\r\n      StorybookTranslateModule,\r\n    ]\r\n  }\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/utils/links.util.ts": [
                {
                    "name": "getDiscordLink",
                    "file": "src/app/utils/links.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "translate",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "translate",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGitHubLink",
                    "file": "src/app/utils/links.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "translate",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "translate",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/utils/to-unicode-variant.util.ts": [
                {
                    "name": "getFlag",
                    "file": "src/app/utils/to-unicode-variant.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "flag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "flag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getType",
                    "file": "src/app/utils/to-unicode-variant.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toUnicodeVariant",
                    "file": "src/app/utils/to-unicode-variant.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variant",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TranslateHttpLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/utils/storybook-translate.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/utils/storybook-translate.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TranslateHttpLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/services/color.service.ts": [
                {
                    "name": "ChangeType",
                    "childs": [
                        {
                            "name": "LOAD",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ADJUST",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/color.service.ts"
                }
            ],
            "src/app/class/palette-generator.ts": [
                {
                    "name": "PaletteScheme",
                    "childs": [
                        {
                            "name": "RAINBOW",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SURPRISE_ME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "MONOCHROMATIC",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ANALOGOUS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "COMPLEMENTARY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SPLIT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TRIADIC",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "COMPOUND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/class/palette-generator.ts"
                }
            ],
            "src/app/components/color-editor/color-editor.component.ts": [
                {
                    "name": "UpdateType",
                    "childs": [
                        {
                            "name": "HEX",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "HUE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SATURATION",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LUMINOSITY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/color-editor/color-editor.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "edit",
                        "pathMatch": "full",
                        "canActivate": [
                            "PaletteGuard"
                        ],
                        "component": "EditComponent"
                    },
                    {
                        "path": "preview",
                        "pathMatch": "full",
                        "canActivate": [
                            "PaletteGuard"
                        ],
                        "component": "PreviewComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 8,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-converter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorConverter",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-interpolater.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorInterpolater",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "src/app/class/color-namer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorNamer",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-namer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Entry",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/class/palette-exporter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaletteExporter",
                "coveragePercent": 88,
                "coverageCount": "8/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/class/palette-generator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaletteGenerator",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockColorService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-editor/color-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorEditorComponent",
                "coveragePercent": 46,
                "coverageCount": "6/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PawcodeBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorViewerComponent",
                "coveragePercent": 30,
                "coverageCount": "4/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/light-switch/light-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LightSwitchComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Analogous",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Complementary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Compound",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MediaScope",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediaScopePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Monochromatic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pawcode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pawcodePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rainbow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Split",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tailwind",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tailwindPalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Triadic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaletteViewerComponent",
                "coveragePercent": 41,
                "coverageCount": "7/17",
                "status": "medium"
            },
            {
                "filePath": "src/app/dialogs/css-copy.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssCopyDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/css-file.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssFileDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/css.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CssDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/export.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExportDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind-copy.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindCopyDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind-file.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindFileDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/tailwind.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TailwindDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/palette.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "PaletteGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/dialog.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Action",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/dialog.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dialog",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/color.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Color",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/palette.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Palette",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/shade.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Shade",
                "coveragePercent": 40,
                "coverageCount": "6/15",
                "status": "medium"
            },
            {
                "filePath": "src/app/pages/edit/edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/preview/preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/safe-html.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorService",
                "coveragePercent": 58,
                "coverageCount": "7/12",
                "status": "good"
            },
            {
                "filePath": "src/app/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/palette.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaletteService",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/utils/links.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDiscordLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/links.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGitHubLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/storybook-translate.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFlag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toUnicodeVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "chars",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "numbers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "offsets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "special",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/to-unicode-variant.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "variantOffsets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}