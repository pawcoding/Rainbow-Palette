{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Color",
            "id": "class-Color-9c0b93297ca7d576f2c6fa5c3d85b07c16d779de4326ecfa15d86caec6eddd35d77c7c16aba68be3de0aeed8d4c14a07209b747ba9364919b408b9698bb77900",
            "file": "src/app/models/color.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorInterpolater} from \"../class/color-interpolater\";\nimport {Shade} from \"./shade.model\";\n\nexport class Color {\n\n  name: string\n\n  shades: Shade[]\n\n  constructor(\n    name: string,\n    hex: string\n  ) {\n    if (!hex.startsWith('#') || hex.length !== 7)\n      throw `Color '${hex}' is not in form #RRGGBB.`\n\n    this.name = name\n    this.shades = ColorInterpolater.interpolateShades(hex)\n\n    this.shades.sort((a, b) => a.index - b.index)\n  }\n\n  getShade(index: number) {\n    return this.shades.find(s => s.index === index)\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hex",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hex",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "shades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shade[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "getShade",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorConverter",
            "id": "class-ColorConverter-0132430addf55c559fbe2f567c6ed82f01eda860b6ada27f8be9b9e3455c4a3c9ea1783fc13ab2d754e32ceb9e76ea4ecd4ca7c8dd21fac0783e4739ded68526",
            "file": "src/app/class/color-converter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ColorConverter {\n\n  static rgbToHsl(color: string) {\n    if (!color.startsWith('#') || color.length !== 7)\n      throw `Color '${color}' is not in form #RRGGBB.`\n\n    const r = parseInt(color.substring(1, 3), 16) / 255\n    const g = parseInt(color.substring(3, 5), 16) / 255\n    const b = parseInt(color.substring(5, 7), 16) / 255\n\n    const cMax = Math.max(r, g, b)\n    const cMin = Math.min(r, g, b)\n    const d = cMax - cMin\n\n    const l = this.getLightnessFromRgb(cMax, cMin)\n    const s = this.getSaturation(d, l)\n    let h = this.getHue(d, cMax, r, g, b)\n    if (h < 0)\n      h += 360\n\n    return {\n      hue: Math.round(h),\n      saturation: Math.round(s),\n      luminosity: Math.round(l)\n    }\n  }\n\n  private static getLightnessFromRgb(cMax: number, cMin: number): number {\n    return (cMax + cMin) * 50\n  }\n\n  private static getSaturation(d: number, l: number): number {\n    if (d === 0)\n      return 0\n    else\n      return 100 * d / (1 - Math.abs(2 * (l / 100) - 1))\n  }\n\n  private static getHue(d: number, cMax: number, r: number, g: number, b: number): number {\n    if (d === 0)\n      return 0\n    else if (cMax === r)\n      return 60 * ( ( (g - b) / d) % 6)\n    else if (cMax === g)\n      return 60 * ( ( (b - r) / d) + 2)\n    else\n      return 60 * ( ( (r - g) / d) + 4)\n  }\n\n\n  static hslToRgb(hue: number, saturation: number, lightness: number): string {\n    if (hue < 0 || hue > 360 || saturation < 0 || saturation > 100 || lightness < 0 || lightness > 100)\n      throw `Color values [${hue}Â°, ${saturation}%, ${lightness}%] are not in valid ranges.`\n\n    const h = hue\n    const s = saturation / 100\n    const l = lightness / 100\n\n    const c = (1 - Math.abs(2 * l - 1)) * s\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1))\n    const m = l - c / 2\n\n    const r = (h < 60 || h >=300) ? c : (h < 120 || h >= 240) ? x : 0\n    const g = (h >= 240) ? 0 : (h < 60 || h >= 180) ? x : c\n    const b = (h < 120) ? 0 : (h < 180 || h >= 300) ? x : c\n\n    const R = Math.round((r + m) * 255)\n    const G = Math.round((g + m) * 255)\n    const B = Math.round((b + m) * 255)\n\n    return `#${(R < 16 ? 0 : '') + R.toString(16)}${(G < 16 ? 0 : '') + G.toString(16)}${(B < 16 ? 0 : '') + B.toString(16)}`\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getHue",
                    "args": [
                        {
                            "name": "d",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "r",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "g",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "r",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "g",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLightnessFromRgb",
                    "args": [
                        {
                            "name": "cMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "cMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSaturation",
                    "args": [
                        {
                            "name": "d",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "l",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "l",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hslToRgb",
                    "args": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saturation",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rgbToHsl",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ hue: any; saturation: any; luminosity: any; }",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorInterpolater",
            "id": "class-ColorInterpolater-d73655a074c958aab3c2e4d130f25c6856945c2490638eb0c1c9346e071cbac88f8c1b6682498e254c5f0c598412862f35388b71f71bd65776dba9a92a193933",
            "file": "src/app/class/color-interpolater.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorConverter} from \"./color-converter\";\nimport {Shade} from \"../models/shade.model\";\n\nexport class ColorInterpolater {\n\n  static interpolateShades(color: string) {\n    if (!color.startsWith('#') || color.length !== 7)\n      throw `Color '${color}' is not in form #RRGGBB.`\n\n    const shades: Shade[] = []\n    const hsl = ColorConverter.rgbToHsl(color)\n\n    if (100 - hsl.luminosity < 7.5) {\n      shades.push(new Shade(50, color))\n      this.generateDarkerColors(hsl, 0, shades)\n    } else if (100 - hsl.luminosity >= 85) {\n      shades.push(new Shade(900, color))\n      this.generateLighterColors(hsl, 900, shades)\n    } else {\n      let index = 100\n      while (100 - hsl.luminosity > (index / 10) + 5)\n        index += 100\n      shades.push(new Shade(index, color))\n      this.generateLighterColors(hsl, index, shades)\n      this.generateDarkerColors(hsl, index, shades)\n    }\n\n    return shades\n  }\n\n  private static generateLighterColors(hslColor: { saturation: number; hue: number; luminosity: number }, step: number, shades: Shade[]) {\n    const index = step / 100\n    let i = 1\n\n    for (; i < index; i++) {\n      const interpolatedLuminosity = hslColor.luminosity + (i / index) * (100 - hslColor.luminosity)\n      const newIndex = step - i * 100\n      shades.push(new Shade(newIndex, hslColor.hue, hslColor.saturation, interpolatedLuminosity))\n    }\n\n    const interpolatedLuminosity = hslColor.luminosity + ((2 * i - 1) / (2 * index)) * (100 - hslColor.luminosity)\n    shades.push(new Shade(50, hslColor.hue, hslColor.saturation, interpolatedLuminosity))\n  }\n\n  private static generateDarkerColors(hslColor: { saturation: number; hue: number; luminosity: number }, step: number, shades: Shade[]) {\n    const index = (1000 - step) / 100\n    let i = 1\n\n    for (; i < index; i++) {\n      const interpolatedLuminosity = hslColor.luminosity - (i / index) * hslColor.luminosity\n      const newIndex = step + i * 100\n      shades.push(new Shade(newIndex, hslColor.hue, hslColor.saturation, interpolatedLuminosity))\n    }\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "generateDarkerColors",
                    "args": [
                        {
                            "name": "hslColor",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hslColor",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateLighterColors",
                    "args": [
                        {
                            "name": "hslColor",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "hslColor",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shades",
                            "type": "Shade[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "interpolateShades",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Palette",
            "id": "class-Palette-947bc64b001e66e06af9795e383c1fc8241a640625430f341de4d54a3638054a2255dc5ee5490573d96d1e46c5a4e738619a9564791a63ba91f6a8436463238c",
            "file": "src/app/models/palette.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Color} from \"./color.model\";\n\nexport class Palette {\n\n  title: string\n  id: string\n  colors: Color[] = []\n\n  constructor(title: string) {\n    this.title = title\n    this.id = 'sfhaislfhasbfshgf'\n  }\n\n  public addColor(name: string, hex: string) {\n    this.colors.push(new Color(name, hex))\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "addColor",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Shade",
            "id": "class-Shade-6034fb332edfdcd0a23b1040523acbadfc33e6a9089c13a7dc949b1753c7890bf805522784fc635677dbc1396384bd5055257d6079fcb0bf8f1f141c88f4f3c6",
            "file": "src/app/models/shade.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ColorConverter} from \"../class/color-converter\";\n\nexport class Shade {\n\n  index: number\n  hex: string\n  hue: number\n  saturation: number\n  luminosity: number\n\n  public constructor(index: number, hex: string);\n  public constructor(index: number, hue: number, saturation: number, luminosity: number);\n  public constructor(index: number, hex: string, hue: number, saturation: number, luminosity: number);\n\n  constructor(...args: any[]) {\n    this.index = args[0]\n\n    if (args.length === 2) {\n      this.hex = args[1]\n      const hsl = ColorConverter.rgbToHsl(this.hex)\n      this.hue = hsl.hue\n      this.saturation = hsl.saturation\n      this.luminosity = hsl.luminosity\n    } else if (args.length === 4) {\n      this.hex = ColorConverter.hslToRgb(args[1], args[2], args[3])\n      this.hue = args[1]\n      this.saturation = args[2]\n      this.luminosity = args[3]\n    } else {\n      this.hex = args[1]\n      this.hue = args[2]\n      this.saturation = args[3]\n      this.luminosity = args[4]\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "hex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "luminosity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-189b5ae70d0de93764ad1a63b2596d4a147d7c0f18561fff5c74ea040b2355d3c7e877914109ecf66e81c52c2d8fabeb88ff735499015673c0b84ed2eaa1e20f",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "palette",
                    "defaultValue": "new Palette('Random')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "shade",
                    "defaultValue": "new Shade(0, this.generateRandomHex())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "'tailwind-color-generator'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "generateRandomHex",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {Palette} from \"./models/palette.model\";\nimport {ColorConverter} from \"./class/color-converter\";\nimport {Shade} from \"./models/shade.model\";\nimport {Color} from \"./models/color.model\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  title = 'tailwind-color-generator'\n\n  shade = new Shade(0, this.generateRandomHex())\n\n  color: Color | undefined\n\n  palette = new Palette('Random')\n\n  constructor() {\n    const random = Math.floor(4 + Math.random() * 6)\n\n    for (let i = 0; i < random; i++) {\n      const hex = this.generateRandomHex()\n      this.palette.addColor(hex, hex)\n    }\n  }\n\n  generateRandomHex() {\n    const hue = Math.floor(Math.random() * 360)\n    const saturation = Math.floor(Math.random() * 100)\n    const luminosity = Math.floor(Math.random() * 100)\n\n    return ColorConverter.hslToRgb(hue, saturation, luminosity)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "templateData": "<h1>\n  Color Palette Generator\n</h1>\n\n<app-color-picker [shade]=\"shade\" (colorEmitter)=\"color = $event\"></app-color-picker>\n\n<app-color-viewer [color]=\"color\"></app-color-viewer>\n\n<app-palette-viewer [palette]=\"palette\"></app-palette-viewer>\n"
        },
        {
            "name": "ColorPickerComponent",
            "id": "component-ColorPickerComponent-19fe903a8d894c1b75e950629c2d95bd6fc21a20508d25dfcf024f01b10c5a8776292d079f15c7a377b650f0ee02b899e63c801f280c96d6a37a9b0d333d9730",
            "file": "src/app/components/color-picker/color-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-picker",
            "styleUrls": [
                "./color-picker.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./color-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "shade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Shade | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorEmitter",
                    "defaultValue": "new EventEmitter<Color>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generateColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateShade",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Shade} from \"../../models/shade.model\";\nimport {Color} from \"../../models/color.model\";\n\n@Component({\n  selector: 'app-color-picker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.css']\n})\nexport class ColorPickerComponent implements OnInit {\n\n  @Input()\n  shade: Shade | undefined\n\n  @Input()\n  dark = false\n\n  @Input()\n  name = ''\n\n  @Output()\n  colorEmitter = new EventEmitter<Color>()\n\n  ngOnInit(): void {\n    this.updateProperties()\n  }\n\n  updateShade(type: string, value: string | number): void {\n    if (type === 'HEX' && isNaN(+value))\n      this.shade = new Shade(0, `${value}`)\n    else if (!isNaN(+value)) {\n      if (type === 'HUE') {\n        // @ts-ignore\n        this.shade = new Shade(0, value, this.shade?.saturation, this.shade?.luminosity)\n      } else if (type === 'SATURATION') {\n        // @ts-ignore\n        this.shade = new Shade(0, this.shade?.hue, value, this.shade?.luminosity)\n      } else if (type === 'LUMINOSITY') {\n        // @ts-ignore\n        this.shade = new Shade(0, this.shade?.hue, this.shade?.saturation, value)\n      }\n    }\n\n    this.updateProperties()\n  }\n\n  updateProperties() {\n    if (this.shade) {\n      document.documentElement.style.setProperty('--selected-hex', this.shade.hex)\n      document.documentElement.style.setProperty('--selected-hue', String(this.shade.hue))\n      document.documentElement.style.setProperty('--selected-saturation', this.shade.saturation + \"%\")\n      document.documentElement.style.setProperty('--selected-luminosity', this.shade.luminosity + \"%\")\n    }\n  }\n\n  updateName(name: string) {\n    this.name = name\n  }\n\n  generateColor() {\n    if (this.shade)\n      this.colorEmitter.emit(new Color(this.name || this.shade.hex, this.shade.hex))\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\r\n  @apply block w-full;\r\n}\r\n\r\ninput[type=range], input[type=color] {\r\n  @apply w-full outline-none appearance-none;\r\n  -webkit-appearance: none;\r\n}\r\n\r\ninput[type=range] {\r\n  @apply h-1/2;\r\n}\r\n\r\ninput[type=range]::-webkit-slider-thumb {\r\n  @apply w-6 h-8 cursor-pointer appearance-none;\r\n  background-color: var(--selected-hex);\r\n  -webkit-appearance: none;\r\n}\r\n\r\ninput[type=range]::-moz-range-thumb {\r\n  @apply w-6 h-6 cursor-pointer;\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\ninput[type=color]::-webkit-color-swatch-wrapper {\r\n  @apply p-0;\r\n}\r\n\r\ninput[type=color]::-webkit-color-swatch {\r\n  @apply border-none;\r\n}\r\n\r\n#hexInput {\r\n  @apply h-full;\r\n  background-color: var(--selected-hex);\r\n}\r\n\r\n#hueInput {\r\n  background: linear-gradient(90deg,\r\n    hsl(0, var(--selected-saturation), var(--selected-luminosity)) 0%,\r\n    hsl(36, var(--selected-saturation), var(--selected-luminosity)) 10%,\r\n    hsl(72, var(--selected-saturation), var(--selected-luminosity)) 20%,\r\n    hsl(108, var(--selected-saturation), var(--selected-luminosity)) 30%,\r\n    hsl(144, var(--selected-saturation), var(--selected-luminosity)) 40%,\r\n    hsl(180, var(--selected-saturation), var(--selected-luminosity)) 50%,\r\n    hsl(216, var(--selected-saturation), var(--selected-luminosity)) 60%,\r\n    hsl(252, var(--selected-saturation), var(--selected-luminosity)) 70%,\r\n    hsl(288, var(--selected-saturation), var(--selected-luminosity)) 80%,\r\n    hsl(324, var(--selected-saturation), var(--selected-luminosity)) 90%,\r\n    hsl(360, var(--selected-saturation), var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#saturationInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), 0%, var(--selected-luminosity)) 0%,\r\n  hsl(var(--selected-hue), 100%, var(--selected-luminosity)) 100%);\r\n}\r\n\r\n#luminosityInput {\r\n  background: linear-gradient(90deg,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 0%) 0%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 50%) 50%,\r\n  hsl(var(--selected-hue), var(--selected-saturation), 100%) 100%);\r\n}\r\n",
                    "styleUrl": "./color-picker.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\n  class=\"grid grid-cols-2 grid-rows-5 gap-x-4 gap-y-2\n    max-w-3xl mx-auto items-center p-4 rounded-xl border shadow-lg\n    border-neutral-600 dark:border-neutral-300 bg-neutral-200 dark:bg-neutral-700\"\n  *ngIf=\"shade\"\n>\n  <input class=\"row-span-2\" id=\"hexInput\" type=\"color\" [value]=\"shade.hex\" #hexInput (input)=\"updateShade('HEX', hexInput.value)\">\n\n  <input class=\"text-black\" id=\"nameInput\" type=\"text\" [value]=\"name\" #nameInput (input)=\"updateName(nameInput.value)\">\n\n  <section\n    [ngStyle]=\"{\n      'background-color': shade.hex,\n      'color': shade.luminosity > 48 ? '#000000' : '#ffffff'\n    }\"\n    (click)=\"generateColor()\"\n    class=\"block w-full text-lg flex items-center justify-center row-span-4 h-full cursor-pointer\"\n  >\n    <h2 class=\"center\">\n      Click to generate shades for\n      {{shade.hex}}\n    </h2>\n  </section>\n\n  <input id=\"hueInput\" type=\"range\" [value]=\"shade.hue\" min=\"0\" max=\"360\" #hueInput (input)=\"updateShade('HUE', hueInput.value)\">\n  <input id=\"saturationInput\" type=\"range\" [value]=\"shade.saturation\" min=\"0\" max=\"100\" #saturationInput (input)=\"updateShade('SATURATION', saturationInput.value)\">\n  <input id=\"luminosityInput\" type=\"range\" [value]=\"shade.luminosity\" min=\"0\" max=\"100\" #luminosityInput (input)=\"updateShade('LUMINOSITY', luminosityInput.value)\">\n</article>\n"
        },
        {
            "name": "ColorViewerComponent",
            "id": "component-ColorViewerComponent-0dfcc7d43b3c708a83daddaa5cef78a772896fd0dc9c895d1cb4a1f628fbeb519cbae86b2d32207e7dcc7105bce9a2ca6c687c009b570cb522ea3305597a6ad8",
            "file": "src/app/components/color-viewer/color-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./color-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Color | undefined",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Color} from \"../../models/color.model\";\n\n@Component({\n  selector: 'app-color-viewer',\n  templateUrl: './color-viewer.component.html',\n})\nexport class ColorViewerComponent implements OnInit {\n\n  @Input()\n  color: Color | undefined\n\n  @Input()\n  dark = false\n\n  constructor() {\n    if (document.getElementById('body')?.classList.contains('dark'))\n      this.dark = true\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\n  *ngIf=\"color\"\n  [ngStyle]=\"{\n    'border-color': color.shades[dark ? 2 : 7].hex\n  }\"\n  class=\"overflow-auto my-4 rounded-xl shadow-lg border\"\n>\n  <h3\n    [ngStyle]=\"{\n      'background-color': color.shades[dark ? 8 : 1].hex,\n      'color': color.shades[dark ? 1 : 8].hex,\n      'text-align': dark ? 'right' : 'left'\n    }\"\n  >\n    {{color.name}}\n  </h3>\n\n  <section class=\"flex\">\n    <span\n      *ngFor=\"let shade of color.shades\"\n      [ngStyle]=\"{\n        'background-color': shade.hex,\n        'color': color.shades[shade.luminosity > 48 ? 9 : 0].hex\n      }\"\n      class=\"block w-full text-center text-sm md:text-base lg:text-xl py-4 lg:py-6\"\n    >\n      {{shade.hex}}\n    </span>\n  </section>\n</article>\n"
        },
        {
            "name": "PaletteViewerComponent",
            "id": "component-PaletteViewerComponent-b2e4fc4babfb349fa3a0d5dcf2f7ce109ca1ad504f390809c9b125492314845e00d06bb313bf729eab40fb2b5075fd4ca9ac96beff7d1e343681cbd5f84f72e1",
            "file": "src/app/components/palette-viewer/palette-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-palette-viewer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./palette-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Palette | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Palette} from \"../../models/palette.model\";\n\n@Component({\n  selector: 'app-palette-viewer',\n  templateUrl: './palette-viewer.component.html',\n})\nexport class PaletteViewerComponent implements OnInit {\n\n  @Input()\n  palette: Palette | undefined\n\n  @Input()\n  dark = false\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section\n  *ngIf=\"palette\"\n  class=\"max-w-7xl mx-auto\"\n>\n  <h2>{{palette.title}}</h2>\n\n  <app-color-viewer\n    *ngFor=\"let color of palette.colors\"\n    [color]=\"color\"\n    [dark]=\"dark\"\n  ></app-color-viewer>\n</section>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-c4708c598bfe7ba842f5930fa5887e634d525c131b687ef0f22df27c71c2e3a924799fe81a77422c454a2df94b4758d819b72de1f0222872223abb36eac21093",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ColorViewerComponent } from './components/color-viewer/color-viewer.component';\nimport { PaletteViewerComponent } from './components/palette-viewer/palette-viewer.component';\nimport { ColorPickerComponent } from './components/color-picker/color-picker.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ColorViewerComponent,\n    PaletteViewerComponent,\n    ColorPickerComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ColorPickerComponent"
                        },
                        {
                            "name": "ColorViewerComponent"
                        },
                        {
                            "name": "PaletteViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "MediaScope",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mediaScopePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('media-scope')"
            },
            {
                "name": "Pawcode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PawcodeBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-picker/color-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PawcodeBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pawcodePalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('pawcode')"
            },
            {
                "name": "Rainbow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "rainbowPalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Palette('Rainbow')"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-picker/color-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/components/palette-viewer/palette-viewer.component.stories.ts": [
                {
                    "name": "MediaScope",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mediaScopePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('media-scope')"
                },
                {
                    "name": "Pawcode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "pawcodePalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('pawcode')"
                },
                {
                    "name": "Rainbow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "rainbowPalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Palette('Rainbow')"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/app/components/color-picker/color-picker.component.stories.ts": [
                {
                    "name": "PawcodeBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-picker/color-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-picker/color-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/app/components/color-viewer/color-viewer.component.stories.ts": [
                {
                    "name": "PawcodeBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-converter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorConverter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/class/color-interpolater.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorInterpolater",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-picker/color-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PawcodeBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-picker/color-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-picker/color-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PawcodeBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/color-viewer/color-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MediaScope",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediaScopePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pawcode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pawcodePalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rainbow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rainbowPalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/palette-viewer/palette-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaletteViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/color.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Color",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/palette.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Palette",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/shade.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Shade",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}